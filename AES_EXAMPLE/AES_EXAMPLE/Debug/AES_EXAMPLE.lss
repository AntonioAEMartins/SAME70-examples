
AES_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006574  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406574  00406574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a08  20400000  0040657c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000490  20400a08  00406f84  00020a08  2**2
                  ALLOC
  4 .stack        00002000  20400e98  00407414  00020a08  2**0
                  ALLOC
  5 .heap         00000200  20402e98  00409414  00020a08  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020a08  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a36  2**0
                  CONTENTS, READONLY
  8 .debug_info   00017543  00000000  00000000  00020a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003011  00000000  00000000  00037fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004961  00000000  00000000  0003afe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a48  00000000  00000000  0003f944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a50  00000000  00000000  0004038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001fd62  00000000  00000000  00040ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c4cc  00000000  00000000  00060b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008c434  00000000  00000000  0006d00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000027c4  00000000  00000000  000f9440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 2e 40 20 ad 16 40 00 ab 16 40 00 ab 16 40 00     ..@ ..@...@...@.
  400010:	ab 16 40 00 ab 16 40 00 ab 16 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ab 16 40 00 ab 16 40 00 00 00 00 00 ab 16 40 00     ..@...@.......@.
  40003c:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  40004c:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  40005c:	ab 16 40 00 ab 16 40 00 00 00 00 00 49 13 40 00     ..@...@.....I.@.
  40006c:	5d 13 40 00 71 13 40 00 ab 16 40 00 ab 16 40 00     ].@.q.@...@...@.
  40007c:	ab 16 40 00 85 13 40 00 99 13 40 00 ab 16 40 00     ..@...@...@...@.
  40008c:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  40009c:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  4000ac:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  4000bc:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  4000cc:	ab 16 40 00 00 00 00 00 ab 16 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  4000ec:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  4000fc:	ab 16 40 00 ab 16 40 00 ab 16 40 00 ab 16 40 00     ..@...@...@...@.
  40010c:	ab 16 40 00 ab 16 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a1 12 40 00 ab 16 40 00 f9 04 40 00     ......@...@...@.
  40012c:	ab 16 40 00 ab 16 40 00 00 00 00 00 ab 16 40 00     ..@...@.......@.
  40013c:	ab 16 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400a08 	.word	0x20400a08
  40015c:	00000000 	.word	0x00000000
  400160:	0040657c 	.word	0x0040657c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040657c 	.word	0x0040657c
  4001a0:	20400a0c 	.word	0x20400a0c
  4001a4:	0040657c 	.word	0x0040657c
  4001a8:	00000000 	.word	0x00000000

004001ac <aes_callback>:

/**
 * \brief The AES interrupt call back function.
 */
static void aes_callback(void)
{
  4001ac:	b508      	push	{r3, lr}
	/* Read the output. */
	aes_read_output_data(AES, output_data);
  4001ae:	4904      	ldr	r1, [pc, #16]	; (4001c0 <aes_callback+0x14>)
  4001b0:	4804      	ldr	r0, [pc, #16]	; (4001c4 <aes_callback+0x18>)
  4001b2:	4b05      	ldr	r3, [pc, #20]	; (4001c8 <aes_callback+0x1c>)
  4001b4:	4798      	blx	r3
	state = true;
  4001b6:	2201      	movs	r2, #1
  4001b8:	4b04      	ldr	r3, [pc, #16]	; (4001cc <aes_callback+0x20>)
  4001ba:	701a      	strb	r2, [r3, #0]
  4001bc:	bd08      	pop	{r3, pc}
  4001be:	bf00      	nop
  4001c0:	20400a24 	.word	0x20400a24
  4001c4:	4006c000 	.word	0x4006c000
  4001c8:	00401241 	.word	0x00401241
  4001cc:	20400a34 	.word	0x20400a34

004001d0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001d2:	b083      	sub	sp, #12
  4001d4:	4605      	mov	r5, r0
  4001d6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001d8:	2300      	movs	r3, #0
  4001da:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001dc:	4b2a      	ldr	r3, [pc, #168]	; (400288 <usart_serial_getchar+0xb8>)
  4001de:	4298      	cmp	r0, r3
  4001e0:	d013      	beq.n	40020a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001e2:	4b2a      	ldr	r3, [pc, #168]	; (40028c <usart_serial_getchar+0xbc>)
  4001e4:	4298      	cmp	r0, r3
  4001e6:	d018      	beq.n	40021a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4001e8:	4b29      	ldr	r3, [pc, #164]	; (400290 <usart_serial_getchar+0xc0>)
  4001ea:	4298      	cmp	r0, r3
  4001ec:	d01d      	beq.n	40022a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4001ee:	4b29      	ldr	r3, [pc, #164]	; (400294 <usart_serial_getchar+0xc4>)
  4001f0:	429d      	cmp	r5, r3
  4001f2:	d022      	beq.n	40023a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001f4:	4b28      	ldr	r3, [pc, #160]	; (400298 <usart_serial_getchar+0xc8>)
  4001f6:	429d      	cmp	r5, r3
  4001f8:	d027      	beq.n	40024a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001fa:	4b28      	ldr	r3, [pc, #160]	; (40029c <usart_serial_getchar+0xcc>)
  4001fc:	429d      	cmp	r5, r3
  4001fe:	d02e      	beq.n	40025e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400200:	4b27      	ldr	r3, [pc, #156]	; (4002a0 <usart_serial_getchar+0xd0>)
  400202:	429d      	cmp	r5, r3
  400204:	d035      	beq.n	400272 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400206:	b003      	add	sp, #12
  400208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40020a:	461f      	mov	r7, r3
  40020c:	4e25      	ldr	r6, [pc, #148]	; (4002a4 <usart_serial_getchar+0xd4>)
  40020e:	4621      	mov	r1, r4
  400210:	4638      	mov	r0, r7
  400212:	47b0      	blx	r6
  400214:	2800      	cmp	r0, #0
  400216:	d1fa      	bne.n	40020e <usart_serial_getchar+0x3e>
  400218:	e7e9      	b.n	4001ee <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40021a:	461f      	mov	r7, r3
  40021c:	4e21      	ldr	r6, [pc, #132]	; (4002a4 <usart_serial_getchar+0xd4>)
  40021e:	4621      	mov	r1, r4
  400220:	4638      	mov	r0, r7
  400222:	47b0      	blx	r6
  400224:	2800      	cmp	r0, #0
  400226:	d1fa      	bne.n	40021e <usart_serial_getchar+0x4e>
  400228:	e7e4      	b.n	4001f4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40022a:	461f      	mov	r7, r3
  40022c:	4e1d      	ldr	r6, [pc, #116]	; (4002a4 <usart_serial_getchar+0xd4>)
  40022e:	4621      	mov	r1, r4
  400230:	4638      	mov	r0, r7
  400232:	47b0      	blx	r6
  400234:	2800      	cmp	r0, #0
  400236:	d1fa      	bne.n	40022e <usart_serial_getchar+0x5e>
  400238:	e7df      	b.n	4001fa <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40023a:	461f      	mov	r7, r3
  40023c:	4e19      	ldr	r6, [pc, #100]	; (4002a4 <usart_serial_getchar+0xd4>)
  40023e:	4621      	mov	r1, r4
  400240:	4638      	mov	r0, r7
  400242:	47b0      	blx	r6
  400244:	2800      	cmp	r0, #0
  400246:	d1fa      	bne.n	40023e <usart_serial_getchar+0x6e>
  400248:	e7da      	b.n	400200 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40024a:	461e      	mov	r6, r3
  40024c:	4d16      	ldr	r5, [pc, #88]	; (4002a8 <usart_serial_getchar+0xd8>)
  40024e:	a901      	add	r1, sp, #4
  400250:	4630      	mov	r0, r6
  400252:	47a8      	blx	r5
  400254:	2800      	cmp	r0, #0
  400256:	d1fa      	bne.n	40024e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400258:	9b01      	ldr	r3, [sp, #4]
  40025a:	7023      	strb	r3, [r4, #0]
  40025c:	e7d3      	b.n	400206 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40025e:	461e      	mov	r6, r3
  400260:	4d11      	ldr	r5, [pc, #68]	; (4002a8 <usart_serial_getchar+0xd8>)
  400262:	a901      	add	r1, sp, #4
  400264:	4630      	mov	r0, r6
  400266:	47a8      	blx	r5
  400268:	2800      	cmp	r0, #0
  40026a:	d1fa      	bne.n	400262 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40026c:	9b01      	ldr	r3, [sp, #4]
  40026e:	7023      	strb	r3, [r4, #0]
  400270:	e7c9      	b.n	400206 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400272:	461e      	mov	r6, r3
  400274:	4d0c      	ldr	r5, [pc, #48]	; (4002a8 <usart_serial_getchar+0xd8>)
  400276:	a901      	add	r1, sp, #4
  400278:	4630      	mov	r0, r6
  40027a:	47a8      	blx	r5
  40027c:	2800      	cmp	r0, #0
  40027e:	d1fa      	bne.n	400276 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400280:	9b01      	ldr	r3, [sp, #4]
  400282:	7023      	strb	r3, [r4, #0]
}
  400284:	e7bf      	b.n	400206 <usart_serial_getchar+0x36>
  400286:	bf00      	nop
  400288:	400e0800 	.word	0x400e0800
  40028c:	400e0a00 	.word	0x400e0a00
  400290:	400e1a00 	.word	0x400e1a00
  400294:	400e1c00 	.word	0x400e1c00
  400298:	40024000 	.word	0x40024000
  40029c:	40028000 	.word	0x40028000
  4002a0:	4002c000 	.word	0x4002c000
  4002a4:	00401587 	.word	0x00401587
  4002a8:	00401693 	.word	0x00401693

004002ac <usart_serial_putchar>:
{
  4002ac:	b570      	push	{r4, r5, r6, lr}
  4002ae:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4002b0:	4b2a      	ldr	r3, [pc, #168]	; (40035c <usart_serial_putchar+0xb0>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d013      	beq.n	4002de <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4002b6:	4b2a      	ldr	r3, [pc, #168]	; (400360 <usart_serial_putchar+0xb4>)
  4002b8:	4298      	cmp	r0, r3
  4002ba:	d019      	beq.n	4002f0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4002bc:	4b29      	ldr	r3, [pc, #164]	; (400364 <usart_serial_putchar+0xb8>)
  4002be:	4298      	cmp	r0, r3
  4002c0:	d01f      	beq.n	400302 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4002c2:	4b29      	ldr	r3, [pc, #164]	; (400368 <usart_serial_putchar+0xbc>)
  4002c4:	4298      	cmp	r0, r3
  4002c6:	d025      	beq.n	400314 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4002c8:	4b28      	ldr	r3, [pc, #160]	; (40036c <usart_serial_putchar+0xc0>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d02b      	beq.n	400326 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4002ce:	4b28      	ldr	r3, [pc, #160]	; (400370 <usart_serial_putchar+0xc4>)
  4002d0:	4298      	cmp	r0, r3
  4002d2:	d031      	beq.n	400338 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4002d4:	4b27      	ldr	r3, [pc, #156]	; (400374 <usart_serial_putchar+0xc8>)
  4002d6:	4298      	cmp	r0, r3
  4002d8:	d037      	beq.n	40034a <usart_serial_putchar+0x9e>
	return 0;
  4002da:	2000      	movs	r0, #0
}
  4002dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002de:	461e      	mov	r6, r3
  4002e0:	4d25      	ldr	r5, [pc, #148]	; (400378 <usart_serial_putchar+0xcc>)
  4002e2:	4621      	mov	r1, r4
  4002e4:	4630      	mov	r0, r6
  4002e6:	47a8      	blx	r5
  4002e8:	2800      	cmp	r0, #0
  4002ea:	d1fa      	bne.n	4002e2 <usart_serial_putchar+0x36>
		return 1;
  4002ec:	2001      	movs	r0, #1
  4002ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002f0:	461e      	mov	r6, r3
  4002f2:	4d21      	ldr	r5, [pc, #132]	; (400378 <usart_serial_putchar+0xcc>)
  4002f4:	4621      	mov	r1, r4
  4002f6:	4630      	mov	r0, r6
  4002f8:	47a8      	blx	r5
  4002fa:	2800      	cmp	r0, #0
  4002fc:	d1fa      	bne.n	4002f4 <usart_serial_putchar+0x48>
		return 1;
  4002fe:	2001      	movs	r0, #1
  400300:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400302:	461e      	mov	r6, r3
  400304:	4d1c      	ldr	r5, [pc, #112]	; (400378 <usart_serial_putchar+0xcc>)
  400306:	4621      	mov	r1, r4
  400308:	4630      	mov	r0, r6
  40030a:	47a8      	blx	r5
  40030c:	2800      	cmp	r0, #0
  40030e:	d1fa      	bne.n	400306 <usart_serial_putchar+0x5a>
		return 1;
  400310:	2001      	movs	r0, #1
  400312:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400314:	461e      	mov	r6, r3
  400316:	4d18      	ldr	r5, [pc, #96]	; (400378 <usart_serial_putchar+0xcc>)
  400318:	4621      	mov	r1, r4
  40031a:	4630      	mov	r0, r6
  40031c:	47a8      	blx	r5
  40031e:	2800      	cmp	r0, #0
  400320:	d1fa      	bne.n	400318 <usart_serial_putchar+0x6c>
		return 1;
  400322:	2001      	movs	r0, #1
  400324:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400326:	461e      	mov	r6, r3
  400328:	4d14      	ldr	r5, [pc, #80]	; (40037c <usart_serial_putchar+0xd0>)
  40032a:	4621      	mov	r1, r4
  40032c:	4630      	mov	r0, r6
  40032e:	47a8      	blx	r5
  400330:	2800      	cmp	r0, #0
  400332:	d1fa      	bne.n	40032a <usart_serial_putchar+0x7e>
		return 1;
  400334:	2001      	movs	r0, #1
  400336:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400338:	461e      	mov	r6, r3
  40033a:	4d10      	ldr	r5, [pc, #64]	; (40037c <usart_serial_putchar+0xd0>)
  40033c:	4621      	mov	r1, r4
  40033e:	4630      	mov	r0, r6
  400340:	47a8      	blx	r5
  400342:	2800      	cmp	r0, #0
  400344:	d1fa      	bne.n	40033c <usart_serial_putchar+0x90>
		return 1;
  400346:	2001      	movs	r0, #1
  400348:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40034a:	461e      	mov	r6, r3
  40034c:	4d0b      	ldr	r5, [pc, #44]	; (40037c <usart_serial_putchar+0xd0>)
  40034e:	4621      	mov	r1, r4
  400350:	4630      	mov	r0, r6
  400352:	47a8      	blx	r5
  400354:	2800      	cmp	r0, #0
  400356:	d1fa      	bne.n	40034e <usart_serial_putchar+0xa2>
		return 1;
  400358:	2001      	movs	r0, #1
  40035a:	bd70      	pop	{r4, r5, r6, pc}
  40035c:	400e0800 	.word	0x400e0800
  400360:	400e0a00 	.word	0x400e0a00
  400364:	400e1a00 	.word	0x400e1a00
  400368:	400e1c00 	.word	0x400e1c00
  40036c:	40024000 	.word	0x40024000
  400370:	40028000 	.word	0x40028000
  400374:	4002c000 	.word	0x4002c000
  400378:	00401575 	.word	0x00401575
  40037c:	0040167d 	.word	0x0040167d

00400380 <ase_xdmac_configure>:
	}
}

#endif

static void ase_xdmac_configure(void){
  400380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t xdmaint;
	/* Initialize and enable DMA controller */
	pmc_enable_periph_clk(ID_XDMAC);
  400382:	203a      	movs	r0, #58	; 0x3a
  400384:	4b4e      	ldr	r3, [pc, #312]	; (4004c0 <ase_xdmac_configure+0x140>)
  400386:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400388:	4b4e      	ldr	r3, [pc, #312]	; (4004c4 <ase_xdmac_configure+0x144>)
  40038a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40038e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400392:	2120      	movs	r1, #32
  400394:	f883 133a 	strb.w	r1, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400398:	605a      	str	r2, [r3, #4]
	/** XDMAC channel configuration. */
	static xdmac_channel_config_t xdmac_channel_MEM2AES_cfg;

	/* Initialize channel config */

	xdmac_channel_MEM2AES_cfg.mbr_ubc = XDMAC_UBC_NVIEW_NDV0 |
  40039a:	4a4b      	ldr	r2, [pc, #300]	; (4004c8 <ase_xdmac_configure+0x148>)
  40039c:	4b4b      	ldr	r3, [pc, #300]	; (4004cc <ase_xdmac_configure+0x14c>)
  40039e:	6013      	str	r3, [r2, #0]
                                      XDMAC_UBC_NDE_FETCH_DIS |
                                      XDMAC_UBC_NDEN_UPDATED |
                                      BUFFER_SIZE;

	xdmac_channel_MEM2AES_cfg.mbr_sa = (uint32_t)bufferRX;
  4003a0:	4b4b      	ldr	r3, [pc, #300]	; (4004d0 <ase_xdmac_configure+0x150>)
  4003a2:	6053      	str	r3, [r2, #4]
	xdmac_channel_MEM2AES_cfg.mbr_da = (uint32_t)&AES->AES_IDATAR[0] ;
  4003a4:	4b4b      	ldr	r3, [pc, #300]	; (4004d4 <ase_xdmac_configure+0x154>)
  4003a6:	6093      	str	r3, [r2, #8]
	xdmac_channel_MEM2AES_cfg.mbr_cfg =	XDMAC_CC_TYPE_PER_TRAN |
  4003a8:	4b4b      	ldr	r3, [pc, #300]	; (4004d8 <ase_xdmac_configure+0x158>)
  4003aa:	60d3      	str	r3, [r2, #12]
											XDMAC_CC_DIF_AHB_IF1 |
											XDMAC_CC_SIF_AHB_IF0 |
											XDMAC_CC_SAM_INCREMENTED_AM |
											XDMAC_CC_DAM_FIXED_AM |
											XDMAC_CC_PERID(XDMAC_CH_NUM_MEM2AES);
	xdmac_channel_MEM2AES_cfg.mbr_bc  = 0;
  4003ac:	2400      	movs	r4, #0
  4003ae:	6114      	str	r4, [r2, #16]
	xdmac_channel_MEM2AES_cfg.mbr_ds  = 0;
  4003b0:	6154      	str	r4, [r2, #20]
	xdmac_channel_MEM2AES_cfg.mbr_sus = 0;
  4003b2:	6194      	str	r4, [r2, #24]
	xdmac_channel_MEM2AES_cfg.mbr_dus = 0;
  4003b4:	61d4      	str	r4, [r2, #28]

	xdmac_configure_transfer(XDMAC, XDMAC_CH_MEM2AES, &xdmac_channel_MEM2AES_cfg);
  4003b6:	4d49      	ldr	r5, [pc, #292]	; (4004dc <ase_xdmac_configure+0x15c>)
  4003b8:	4621      	mov	r1, r4
  4003ba:	4628      	mov	r0, r5
  4003bc:	4e48      	ldr	r6, [pc, #288]	; (4004e0 <ase_xdmac_configure+0x160>)
  4003be:	47b0      	blx	r6
 */
static inline void xdmac_channel_set_descriptor_control(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CNDC = config;
  4003c0:	66ec      	str	r4, [r5, #108]	; 0x6c

  /** XDMAC channel configuration. */
	static xdmac_channel_config_t xdmac_channel_AES2MEM_cfg;

  /* Initialize channel config for receiver */
  xdmac_channel_AES2MEM_cfg.mbr_ubc = BUFFER_SIZE;
  4003c2:	4a48      	ldr	r2, [pc, #288]	; (4004e4 <ase_xdmac_configure+0x164>)
  4003c4:	2364      	movs	r3, #100	; 0x64
  4003c6:	6013      	str	r3, [r2, #0]
  xdmac_channel_AES2MEM_cfg.mbr_da = (uint32_t)bufferTX ;
  4003c8:	4b47      	ldr	r3, [pc, #284]	; (4004e8 <ase_xdmac_configure+0x168>)
  4003ca:	6093      	str	r3, [r2, #8]
  xdmac_channel_AES2MEM_cfg.mbr_sa = (uint32_t)&AES->AES_ODATAR[0];
  4003cc:	4b47      	ldr	r3, [pc, #284]	; (4004ec <ase_xdmac_configure+0x16c>)
  4003ce:	6053      	str	r3, [r2, #4]
  xdmac_channel_AES2MEM_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN |
  4003d0:	4b47      	ldr	r3, [pc, #284]	; (4004f0 <ase_xdmac_configure+0x170>)
  4003d2:	60d3      	str	r3, [r2, #12]
										XDMAC_CC_SIF_AHB_IF1 |
										XDMAC_CC_DIF_AHB_IF0 |
										XDMAC_CC_SAM_FIXED_AM |
										XDMAC_CC_DAM_INCREMENTED_AM |
										XDMAC_CC_PERID(XDMAC_CH_NUM_AES2MEM);
  xdmac_channel_AES2MEM_cfg.mbr_bc = 0;
  4003d4:	6114      	str	r4, [r2, #16]
  xdmac_channel_AES2MEM_cfg.mbr_ds = 0;
  4003d6:	6154      	str	r4, [r2, #20]
  xdmac_channel_AES2MEM_cfg.mbr_sus = 0;
  4003d8:	6194      	str	r4, [r2, #24]
  xdmac_channel_AES2MEM_cfg.mbr_dus =0;
  4003da:	61d4      	str	r4, [r2, #28]
  
  xdmac_configure_transfer(XDMAC, XDMAC_CH_AES2MEM, &xdmac_channel_AES2MEM_cfg);
  4003dc:	2101      	movs	r1, #1
  4003de:	4628      	mov	r0, r5
  4003e0:	47b0      	blx	r6
  4003e2:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
	xdmac->XDMAC_GIE = ( XDMAC_GIE_IE0 << channel_num) ;
  4003e6:	2301      	movs	r3, #1
  4003e8:	60eb      	str	r3, [r5, #12]
  4003ea:	2302      	movs	r3, #2
  4003ec:	60eb      	str	r3, [r5, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CIE = mask;
  4003ee:	237d      	movs	r3, #125	; 0x7d
  4003f0:	652b      	str	r3, [r5, #80]	; 0x50
  4003f2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003f6:	4b3f      	ldr	r3, [pc, #252]	; (4004f4 <ase_xdmac_configure+0x174>)
  4003f8:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003fc:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400400:	f007 0007 	and.w	r0, r7, #7
  400404:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400406:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40040a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40040e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400412:	f3bf 8f4f 	dsb	sy
  400416:	f04f 34ff 	mov.w	r4, #4294967295
  40041a:	fa04 fc00 	lsl.w	ip, r4, r0
  40041e:	fa06 f000 	lsl.w	r0, r6, r0
  400422:	fa04 f40e 	lsl.w	r4, r4, lr
  400426:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  40042a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40042c:	463a      	mov	r2, r7
  40042e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400430:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  400434:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  400438:	3a01      	subs	r2, #1
  40043a:	4423      	add	r3, r4
  40043c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400440:	d1f6      	bne.n	400430 <ase_xdmac_configure+0xb0>
        } while(sets--);
  400442:	3e01      	subs	r6, #1
  400444:	4460      	add	r0, ip
  400446:	f1b6 3fff 	cmp.w	r6, #4294967295
  40044a:	d1ef      	bne.n	40042c <ase_xdmac_configure+0xac>
  40044c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400450:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400454:	2202      	movs	r2, #2
  400456:	4b21      	ldr	r3, [pc, #132]	; (4004dc <ase_xdmac_configure+0x15c>)
  400458:	61da      	str	r2, [r3, #28]
    ccsidr  = SCB->CCSIDR;
  40045a:	4b26      	ldr	r3, [pc, #152]	; (4004f4 <ase_xdmac_configure+0x174>)
  40045c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400460:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400464:	f007 0007 	and.w	r0, r7, #7
  400468:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40046a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40046e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400472:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400476:	f3bf 8f4f 	dsb	sy
  40047a:	f04f 34ff 	mov.w	r4, #4294967295
  40047e:	fa04 fc00 	lsl.w	ip, r4, r0
  400482:	fa06 f000 	lsl.w	r0, r6, r0
  400486:	fa04 f40e 	lsl.w	r4, r4, lr
  40048a:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCCISW = sw;
  40048e:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400490:	463a      	mov	r2, r7
  400492:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400494:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  400498:	f8c5 1274 	str.w	r1, [r5, #628]	; 0x274
            } while(tmpways--);
  40049c:	3a01      	subs	r2, #1
  40049e:	4423      	add	r3, r4
  4004a0:	f1b2 3fff 	cmp.w	r2, #4294967295
  4004a4:	d1f6      	bne.n	400494 <ase_xdmac_configure+0x114>
        } while(sets--);
  4004a6:	3e01      	subs	r6, #1
  4004a8:	4460      	add	r0, ip
  4004aa:	f1b6 3fff 	cmp.w	r6, #4294967295
  4004ae:	d1ef      	bne.n	400490 <ase_xdmac_configure+0x110>
  4004b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004b4:	f3bf 8f6f 	isb	sy
  4004b8:	2201      	movs	r2, #1
  4004ba:	4b08      	ldr	r3, [pc, #32]	; (4004dc <ase_xdmac_configure+0x15c>)
  4004bc:	61da      	str	r2, [r3, #28]
  4004be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004c0:	004014cd 	.word	0x004014cd
  4004c4:	e000e100 	.word	0xe000e100
  4004c8:	20400a58 	.word	0x20400a58
  4004cc:	04000064 	.word	0x04000064
  4004d0:	20400b24 	.word	0x20400b24
  4004d4:	4006c040 	.word	0x4006c040
  4004d8:	25015201 	.word	0x25015201
  4004dc:	40078000 	.word	0x40078000
  4004e0:	00400e11 	.word	0x00400e11
  4004e4:	20400a38 	.word	0x20400a38
  4004e8:	20400cb4 	.word	0x20400cb4
  4004ec:	4006c050 	.word	0x4006c050
  4004f0:	26042001 	.word	0x26042001
  4004f4:	e000ed00 	.word	0xe000ed00

004004f8 <XDMAC_Handler>:

/**
 * \brief XDMAC interrupt handler.
 */
void XDMAC_Handler(void)
{
  4004f8:	b508      	push	{r3, lr}
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4004fa:	4b03      	ldr	r3, [pc, #12]	; (400508 <XDMAC_Handler+0x10>)
  4004fc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
	uint32_t dma_status;
	
	dma_status = xdmac_channel_get_interrupt_status(XDMAC, XDMAC_CH_MEM2AES);
	printf("Acabou !! %x \n", dma_status);
  4004fe:	4803      	ldr	r0, [pc, #12]	; (40050c <XDMAC_Handler+0x14>)
  400500:	4b03      	ldr	r3, [pc, #12]	; (400510 <XDMAC_Handler+0x18>)
  400502:	4798      	blx	r3
  400504:	bd08      	pop	{r3, pc}
  400506:	bf00      	nop
  400508:	40078000 	.word	0x40078000
  40050c:	00405f90 	.word	0x00405f90
  400510:	004019ad 	.word	0x004019ad

00400514 <main>:

/**
 * \brief The main function.
 */
int main(void)
{
  400514:	b580      	push	{r7, lr}
  400516:	b088      	sub	sp, #32
	uint8_t key;

	/* Initialize the SAM system */
	sysclk_init();
  400518:	4b85      	ldr	r3, [pc, #532]	; (400730 <main+0x21c>)
  40051a:	4798      	blx	r3
	board_init();
  40051c:	4b85      	ldr	r3, [pc, #532]	; (400734 <main+0x220>)
  40051e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400520:	4d85      	ldr	r5, [pc, #532]	; (400738 <main+0x224>)
  400522:	4b86      	ldr	r3, [pc, #536]	; (40073c <main+0x228>)
  400524:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400526:	4a86      	ldr	r2, [pc, #536]	; (400740 <main+0x22c>)
  400528:	4b86      	ldr	r3, [pc, #536]	; (400744 <main+0x230>)
  40052a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40052c:	4a86      	ldr	r2, [pc, #536]	; (400748 <main+0x234>)
  40052e:	4b87      	ldr	r3, [pc, #540]	; (40074c <main+0x238>)
  400530:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400532:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400536:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  400538:	23c0      	movs	r3, #192	; 0xc0
  40053a:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  40053c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400540:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  400542:	2400      	movs	r4, #0
  400544:	9404      	str	r4, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400546:	9405      	str	r4, [sp, #20]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400548:	200e      	movs	r0, #14
  40054a:	4b81      	ldr	r3, [pc, #516]	; (400750 <main+0x23c>)
  40054c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40054e:	4a81      	ldr	r2, [pc, #516]	; (400754 <main+0x240>)
  400550:	a901      	add	r1, sp, #4
  400552:	4628      	mov	r0, r5
  400554:	4b80      	ldr	r3, [pc, #512]	; (400758 <main+0x244>)
  400556:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400558:	4628      	mov	r0, r5
  40055a:	4b80      	ldr	r3, [pc, #512]	; (40075c <main+0x248>)
  40055c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40055e:	4628      	mov	r0, r5
  400560:	4b7f      	ldr	r3, [pc, #508]	; (400760 <main+0x24c>)
  400562:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400564:	4e7f      	ldr	r6, [pc, #508]	; (400764 <main+0x250>)
  400566:	6833      	ldr	r3, [r6, #0]
  400568:	4621      	mov	r1, r4
  40056a:	6898      	ldr	r0, [r3, #8]
  40056c:	4d7e      	ldr	r5, [pc, #504]	; (400768 <main+0x254>)
  40056e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400570:	6833      	ldr	r3, [r6, #0]
  400572:	4621      	mov	r1, r4
  400574:	6858      	ldr	r0, [r3, #4]
  400576:	47a8      	blx	r5

	/* Initialize the console  */
	configure_console();

	/* Output example information */
	printf("-- AES Example --\r\n");
  400578:	487c      	ldr	r0, [pc, #496]	; (40076c <main+0x258>)
  40057a:	4c7d      	ldr	r4, [pc, #500]	; (400770 <main+0x25c>)
  40057c:	47a0      	blx	r4
	printf("-- %s\n\r", BOARD_NAME);
  40057e:	497d      	ldr	r1, [pc, #500]	; (400774 <main+0x260>)
  400580:	487d      	ldr	r0, [pc, #500]	; (400778 <main+0x264>)
  400582:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  400584:	4a7d      	ldr	r2, [pc, #500]	; (40077c <main+0x268>)
  400586:	497e      	ldr	r1, [pc, #504]	; (400780 <main+0x26c>)
  400588:	487e      	ldr	r0, [pc, #504]	; (400784 <main+0x270>)
  40058a:	47a0      	blx	r4

	/* Enable the AES module. */
	aes_get_config_defaults(&g_aes_cfg);
  40058c:	4e7e      	ldr	r6, [pc, #504]	; (400788 <main+0x274>)
  40058e:	4630      	mov	r0, r6
  400590:	4b7e      	ldr	r3, [pc, #504]	; (40078c <main+0x278>)
  400592:	4798      	blx	r3
	aes_init(AES, &g_aes_cfg);
  400594:	4d7e      	ldr	r5, [pc, #504]	; (400790 <main+0x27c>)
  400596:	4631      	mov	r1, r6
  400598:	4628      	mov	r0, r5
  40059a:	4b7e      	ldr	r3, [pc, #504]	; (400794 <main+0x280>)
  40059c:	4798      	blx	r3
	aes_enable();
  40059e:	4b7e      	ldr	r3, [pc, #504]	; (400798 <main+0x284>)
  4005a0:	4798      	blx	r3

	/* Enable AES interrupt. */
	aes_set_callback(AES, AES_INTERRUPT_DATA_READY,
  4005a2:	2301      	movs	r3, #1
  4005a4:	4a7d      	ldr	r2, [pc, #500]	; (40079c <main+0x288>)
  4005a6:	4619      	mov	r1, r3
  4005a8:	4628      	mov	r0, r5
  4005aa:	4d7d      	ldr	r5, [pc, #500]	; (4007a0 <main+0x28c>)
  4005ac:	47a8      	blx	r5
	printf("Menu :\n\r"
  4005ae:	487d      	ldr	r0, [pc, #500]	; (4007a4 <main+0x290>)
  4005b0:	47a0      	blx	r4

	/* Display menu */
	display_menu();

	while (1) {
		scanf("%c", (char *)&key);
  4005b2:	4d7d      	ldr	r5, [pc, #500]	; (4007a8 <main+0x294>)
  4005b4:	4c7d      	ldr	r4, [pc, #500]	; (4007ac <main+0x298>)
			#if SAM4C || SAM4CP || SAM4CM
			printf(
					"ECB mode encryption and decryption test with PDC.\r\n");
			ecb_mode_test_pdc();
			#else
			printf("This mode is not supported by device.\r\n");
  4005b6:	4e7e      	ldr	r6, [pc, #504]	; (4007b0 <main+0x29c>)
  4005b8:	e002      	b.n	4005c0 <main+0xac>
	printf("Menu :\n\r"
  4005ba:	487a      	ldr	r0, [pc, #488]	; (4007a4 <main+0x290>)
  4005bc:	4b6c      	ldr	r3, [pc, #432]	; (400770 <main+0x25c>)
  4005be:	4798      	blx	r3
		scanf("%c", (char *)&key);
  4005c0:	f10d 011f 	add.w	r1, sp, #31
  4005c4:	4628      	mov	r0, r5
  4005c6:	47a0      	blx	r4
		switch (key) {
  4005c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4005cc:	3b31      	subs	r3, #49	; 0x31
  4005ce:	2b3f      	cmp	r3, #63	; 0x3f
  4005d0:	d8f6      	bhi.n	4005c0 <main+0xac>
  4005d2:	a201      	add	r2, pc, #4	; (adr r2, 4005d8 <main+0xc4>)
  4005d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4005d8:	004006d9 	.word	0x004006d9
  4005dc:	004007ed 	.word	0x004007ed
  4005e0:	0040091f 	.word	0x0040091f
  4005e4:	00400ac5 	.word	0x00400ac5
  4005e8:	00400c5d 	.word	0x00400c5d
  4005ec:	004005c1 	.word	0x004005c1
  4005f0:	004005c1 	.word	0x004005c1
  4005f4:	004005c1 	.word	0x004005c1
  4005f8:	004005c1 	.word	0x004005c1
  4005fc:	004005c1 	.word	0x004005c1
  400600:	004005c1 	.word	0x004005c1
  400604:	004005c1 	.word	0x004005c1
  400608:	004005c1 	.word	0x004005c1
  40060c:	004005c1 	.word	0x004005c1
  400610:	004005c1 	.word	0x004005c1
  400614:	004005c1 	.word	0x004005c1
  400618:	004005c1 	.word	0x004005c1
  40061c:	004005c1 	.word	0x004005c1
  400620:	004005c1 	.word	0x004005c1
  400624:	004005c1 	.word	0x004005c1
  400628:	004005c1 	.word	0x004005c1
  40062c:	004005c1 	.word	0x004005c1
  400630:	004005c1 	.word	0x004005c1
  400634:	004005c1 	.word	0x004005c1
  400638:	004005c1 	.word	0x004005c1
  40063c:	004005c1 	.word	0x004005c1
  400640:	004005c1 	.word	0x004005c1
  400644:	004005c1 	.word	0x004005c1
  400648:	004005c1 	.word	0x004005c1
  40064c:	004005c1 	.word	0x004005c1
  400650:	004005c1 	.word	0x004005c1
  400654:	004005c1 	.word	0x004005c1
  400658:	004005c1 	.word	0x004005c1
  40065c:	004005c1 	.word	0x004005c1
  400660:	004005c1 	.word	0x004005c1
  400664:	004005c1 	.word	0x004005c1
  400668:	004005c1 	.word	0x004005c1
  40066c:	004005c1 	.word	0x004005c1
  400670:	004005c1 	.word	0x004005c1
  400674:	004005c1 	.word	0x004005c1
  400678:	004005c1 	.word	0x004005c1
  40067c:	004005c1 	.word	0x004005c1
  400680:	004005c1 	.word	0x004005c1
  400684:	004005c1 	.word	0x004005c1
  400688:	004005c1 	.word	0x004005c1
  40068c:	004005c1 	.word	0x004005c1
  400690:	004005c1 	.word	0x004005c1
  400694:	004005c1 	.word	0x004005c1
  400698:	004005c1 	.word	0x004005c1
  40069c:	004005c1 	.word	0x004005c1
  4006a0:	004005c1 	.word	0x004005c1
  4006a4:	00400d93 	.word	0x00400d93
  4006a8:	004005c1 	.word	0x004005c1
  4006ac:	004005c1 	.word	0x004005c1
  4006b0:	004005c1 	.word	0x004005c1
  4006b4:	004005bb 	.word	0x004005bb
  4006b8:	004005c1 	.word	0x004005c1
  4006bc:	004005c1 	.word	0x004005c1
  4006c0:	004005c1 	.word	0x004005c1
  4006c4:	004005c1 	.word	0x004005c1
  4006c8:	004005c1 	.word	0x004005c1
  4006cc:	004005c1 	.word	0x004005c1
  4006d0:	004005c1 	.word	0x004005c1
  4006d4:	00400da3 	.word	0x00400da3
			printf("ECB mode encryption and decryption test.\r\n");
  4006d8:	4836      	ldr	r0, [pc, #216]	; (4007b4 <main+0x2a0>)
  4006da:	4f25      	ldr	r7, [pc, #148]	; (400770 <main+0x25c>)
  4006dc:	47b8      	blx	r7
	printf("\r\n-----------------------------------\r\n");
  4006de:	4836      	ldr	r0, [pc, #216]	; (4007b8 <main+0x2a4>)
  4006e0:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  4006e2:	4836      	ldr	r0, [pc, #216]	; (4007bc <main+0x2a8>)
  4006e4:	47b8      	blx	r7
	printf("- ECB cipher mode\r\n");
  4006e6:	4836      	ldr	r0, [pc, #216]	; (4007c0 <main+0x2ac>)
  4006e8:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  4006ea:	4836      	ldr	r0, [pc, #216]	; (4007c4 <main+0x2b0>)
  4006ec:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  4006ee:	4836      	ldr	r0, [pc, #216]	; (4007c8 <main+0x2b4>)
  4006f0:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  4006f2:	4836      	ldr	r0, [pc, #216]	; (4007cc <main+0x2b8>)
  4006f4:	47b8      	blx	r7
	state = false;
  4006f6:	2300      	movs	r3, #0
  4006f8:	4a35      	ldr	r2, [pc, #212]	; (4007d0 <main+0x2bc>)
  4006fa:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
  4006fc:	4922      	ldr	r1, [pc, #136]	; (400788 <main+0x274>)
  4006fe:	2201      	movs	r2, #1
  400700:	700a      	strb	r2, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  400702:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_IDATAR0_START;
  400704:	2202      	movs	r2, #2
  400706:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
  400708:	70cb      	strb	r3, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  40070a:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  40070c:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  40070e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 400790 <main+0x27c>
  400712:	4640      	mov	r0, r8
  400714:	4b2f      	ldr	r3, [pc, #188]	; (4007d4 <main+0x2c0>)
  400716:	4798      	blx	r3
	aes_write_key(AES, key128);
  400718:	492f      	ldr	r1, [pc, #188]	; (4007d8 <main+0x2c4>)
  40071a:	4640      	mov	r0, r8
  40071c:	4b2f      	ldr	r3, [pc, #188]	; (4007dc <main+0x2c8>)
  40071e:	4798      	blx	r3
	printf("inicializando DMA \n");
  400720:	482f      	ldr	r0, [pc, #188]	; (4007e0 <main+0x2cc>)
  400722:	47b8      	blx	r7
	ase_xdmac_configure();
  400724:	4b2f      	ldr	r3, [pc, #188]	; (4007e4 <main+0x2d0>)
  400726:	4798      	blx	r3
	printf("DMA \n");
  400728:	482f      	ldr	r0, [pc, #188]	; (4007e8 <main+0x2d4>)
  40072a:	47b8      	blx	r7
  40072c:	e748      	b.n	4005c0 <main+0xac>
  40072e:	bf00      	nop
  400730:	00400e4d 	.word	0x00400e4d
  400734:	00400f49 	.word	0x00400f49
  400738:	40028000 	.word	0x40028000
  40073c:	20400e60 	.word	0x20400e60
  400740:	004002ad 	.word	0x004002ad
  400744:	20400e5c 	.word	0x20400e5c
  400748:	004001d1 	.word	0x004001d1
  40074c:	20400e58 	.word	0x20400e58
  400750:	004014cd 	.word	0x004014cd
  400754:	08f0d180 	.word	0x08f0d180
  400758:	0040161d 	.word	0x0040161d
  40075c:	00401671 	.word	0x00401671
  400760:	00401677 	.word	0x00401677
  400764:	20400058 	.word	0x20400058
  400768:	00401a99 	.word	0x00401a99
  40076c:	00405fd0 	.word	0x00405fd0
  400770:	004019ad 	.word	0x004019ad
  400774:	00405fe4 	.word	0x00405fe4
  400778:	00405ff0 	.word	0x00405ff0
  40077c:	00405ff8 	.word	0x00405ff8
  400780:	00406004 	.word	0x00406004
  400784:	00406010 	.word	0x00406010
  400788:	20400e44 	.word	0x20400e44
  40078c:	004010e1 	.word	0x004010e1
  400790:	4006c000 	.word	0x4006c000
  400794:	004011a5 	.word	0x004011a5
  400798:	004010f9 	.word	0x004010f9
  40079c:	004001ad 	.word	0x004001ad
  4007a0:	00401259 	.word	0x00401259
  4007a4:	00406028 	.word	0x00406028
  4007a8:	00406110 	.word	0x00406110
  4007ac:	004019d5 	.word	0x004019d5
  4007b0:	0040639c 	.word	0x0040639c
  4007b4:	00406114 	.word	0x00406114
  4007b8:	00406140 	.word	0x00406140
  4007bc:	00406168 	.word	0x00406168
  4007c0:	00406188 	.word	0x00406188
  4007c4:	0040619c 	.word	0x0040619c
  4007c8:	004061b0 	.word	0x004061b0
  4007cc:	004061cc 	.word	0x004061cc
  4007d0:	20400a34 	.word	0x20400a34
  4007d4:	00401151 	.word	0x00401151
  4007d8:	00405fc0 	.word	0x00405fc0
  4007dc:	004011d5 	.word	0x004011d5
  4007e0:	004061f4 	.word	0x004061f4
  4007e4:	00400381 	.word	0x00400381
  4007e8:	00406208 	.word	0x00406208
			printf("CBC mode encryption and decryption test.\r\n");
  4007ec:	4886      	ldr	r0, [pc, #536]	; (400a08 <main+0x4f4>)
  4007ee:	4f87      	ldr	r7, [pc, #540]	; (400a0c <main+0x4f8>)
  4007f0:	47b8      	blx	r7
	printf("\r\n-----------------------------------\r\n");
  4007f2:	4887      	ldr	r0, [pc, #540]	; (400a10 <main+0x4fc>)
  4007f4:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  4007f6:	4887      	ldr	r0, [pc, #540]	; (400a14 <main+0x500>)
  4007f8:	47b8      	blx	r7
	printf("- CBC cipher mode\r\n");
  4007fa:	4887      	ldr	r0, [pc, #540]	; (400a18 <main+0x504>)
  4007fc:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  4007fe:	4887      	ldr	r0, [pc, #540]	; (400a1c <main+0x508>)
  400800:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  400802:	4887      	ldr	r0, [pc, #540]	; (400a20 <main+0x50c>)
  400804:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  400806:	4887      	ldr	r0, [pc, #540]	; (400a24 <main+0x510>)
  400808:	47b8      	blx	r7
	state = false;
  40080a:	2300      	movs	r3, #0
  40080c:	4a86      	ldr	r2, [pc, #536]	; (400a28 <main+0x514>)
  40080e:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
  400810:	4986      	ldr	r1, [pc, #536]	; (400a2c <main+0x518>)
  400812:	2201      	movs	r2, #1
  400814:	700a      	strb	r2, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  400816:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  400818:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_CBC_MODE;
  40081a:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  40081c:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  40081e:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  400820:	4f83      	ldr	r7, [pc, #524]	; (400a30 <main+0x51c>)
  400822:	4638      	mov	r0, r7
  400824:	4b83      	ldr	r3, [pc, #524]	; (400a34 <main+0x520>)
  400826:	4798      	blx	r3
	aes_write_key(AES, key128);
  400828:	4983      	ldr	r1, [pc, #524]	; (400a38 <main+0x524>)
  40082a:	4638      	mov	r0, r7
  40082c:	4b83      	ldr	r3, [pc, #524]	; (400a3c <main+0x528>)
  40082e:	4798      	blx	r3
	aes_write_initvector(AES, init_vector);
  400830:	4983      	ldr	r1, [pc, #524]	; (400a40 <main+0x52c>)
  400832:	4638      	mov	r0, r7
  400834:	4b83      	ldr	r3, [pc, #524]	; (400a44 <main+0x530>)
  400836:	4798      	blx	r3
	aes_write_input_data(AES, ref_plain_text);
  400838:	4983      	ldr	r1, [pc, #524]	; (400a48 <main+0x534>)
  40083a:	4638      	mov	r0, r7
  40083c:	4b83      	ldr	r3, [pc, #524]	; (400a4c <main+0x538>)
  40083e:	4798      	blx	r3
	while (false == state) {
  400840:	4a79      	ldr	r2, [pc, #484]	; (400a28 <main+0x514>)
  400842:	7813      	ldrb	r3, [r2, #0]
  400844:	2b00      	cmp	r3, #0
  400846:	d0fc      	beq.n	400842 <main+0x32e>
	if ((ref_cipher_text_cbc[0] != output_data[0]) ||
  400848:	4b81      	ldr	r3, [pc, #516]	; (400a50 <main+0x53c>)
  40084a:	681a      	ldr	r2, [r3, #0]
  40084c:	4b81      	ldr	r3, [pc, #516]	; (400a54 <main+0x540>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	429a      	cmp	r2, r3
  400852:	d03e      	beq.n	4008d2 <main+0x3be>
		printf("\r\nKO!!!\r\n");
  400854:	4880      	ldr	r0, [pc, #512]	; (400a58 <main+0x544>)
  400856:	4b6d      	ldr	r3, [pc, #436]	; (400a0c <main+0x4f8>)
  400858:	4798      	blx	r3
	printf("\r\n-----------------------------------\r\n");
  40085a:	486d      	ldr	r0, [pc, #436]	; (400a10 <main+0x4fc>)
  40085c:	4f6b      	ldr	r7, [pc, #428]	; (400a0c <main+0x4f8>)
  40085e:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  400860:	486c      	ldr	r0, [pc, #432]	; (400a14 <main+0x500>)
  400862:	47b8      	blx	r7
	printf("- CBC decipher mode\r\n");
  400864:	487d      	ldr	r0, [pc, #500]	; (400a5c <main+0x548>)
  400866:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  400868:	486c      	ldr	r0, [pc, #432]	; (400a1c <main+0x508>)
  40086a:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  40086c:	486c      	ldr	r0, [pc, #432]	; (400a20 <main+0x50c>)
  40086e:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  400870:	486c      	ldr	r0, [pc, #432]	; (400a24 <main+0x510>)
  400872:	47b8      	blx	r7
	state = false;
  400874:	2300      	movs	r3, #0
  400876:	4a6c      	ldr	r2, [pc, #432]	; (400a28 <main+0x514>)
  400878:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_DECRYPTION;
  40087a:	496c      	ldr	r1, [pc, #432]	; (400a2c <main+0x518>)
  40087c:	700b      	strb	r3, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  40087e:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  400880:	2201      	movs	r2, #1
  400882:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_CBC_MODE;
  400884:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  400886:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  400888:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  40088a:	4f69      	ldr	r7, [pc, #420]	; (400a30 <main+0x51c>)
  40088c:	4638      	mov	r0, r7
  40088e:	4b69      	ldr	r3, [pc, #420]	; (400a34 <main+0x520>)
  400890:	4798      	blx	r3
	aes_write_key(AES, key128);
  400892:	4969      	ldr	r1, [pc, #420]	; (400a38 <main+0x524>)
  400894:	4638      	mov	r0, r7
  400896:	4b69      	ldr	r3, [pc, #420]	; (400a3c <main+0x528>)
  400898:	4798      	blx	r3
	aes_write_initvector(AES, init_vector);
  40089a:	4969      	ldr	r1, [pc, #420]	; (400a40 <main+0x52c>)
  40089c:	4638      	mov	r0, r7
  40089e:	4b69      	ldr	r3, [pc, #420]	; (400a44 <main+0x530>)
  4008a0:	4798      	blx	r3
	aes_write_input_data(AES, ref_cipher_text_cbc);
  4008a2:	496b      	ldr	r1, [pc, #428]	; (400a50 <main+0x53c>)
  4008a4:	4638      	mov	r0, r7
  4008a6:	4b69      	ldr	r3, [pc, #420]	; (400a4c <main+0x538>)
  4008a8:	4798      	blx	r3
	while (false == state) {
  4008aa:	4a5f      	ldr	r2, [pc, #380]	; (400a28 <main+0x514>)
  4008ac:	7813      	ldrb	r3, [r2, #0]
  4008ae:	2b00      	cmp	r3, #0
  4008b0:	d0fc      	beq.n	4008ac <main+0x398>
	if ((ref_plain_text[0] != output_data[0]) ||
  4008b2:	4b65      	ldr	r3, [pc, #404]	; (400a48 <main+0x534>)
  4008b4:	681a      	ldr	r2, [r3, #0]
  4008b6:	4b67      	ldr	r3, [pc, #412]	; (400a54 <main+0x540>)
  4008b8:	681b      	ldr	r3, [r3, #0]
  4008ba:	429a      	cmp	r2, r3
  4008bc:	d105      	bne.n	4008ca <main+0x3b6>
			(ref_plain_text[1] != output_data[1]) ||
  4008be:	4b62      	ldr	r3, [pc, #392]	; (400a48 <main+0x534>)
	if ((ref_plain_text[0] != output_data[0]) ||
  4008c0:	685a      	ldr	r2, [r3, #4]
  4008c2:	4b64      	ldr	r3, [pc, #400]	; (400a54 <main+0x540>)
  4008c4:	685b      	ldr	r3, [r3, #4]
  4008c6:	429a      	cmp	r2, r3
  4008c8:	d019      	beq.n	4008fe <main+0x3ea>
		printf("\r\nKO!!!\r\n");
  4008ca:	4863      	ldr	r0, [pc, #396]	; (400a58 <main+0x544>)
  4008cc:	4b4f      	ldr	r3, [pc, #316]	; (400a0c <main+0x4f8>)
  4008ce:	4798      	blx	r3
  4008d0:	e676      	b.n	4005c0 <main+0xac>
			(ref_cipher_text_cbc[1] != output_data[1]) ||
  4008d2:	4b5f      	ldr	r3, [pc, #380]	; (400a50 <main+0x53c>)
	if ((ref_cipher_text_cbc[0] != output_data[0]) ||
  4008d4:	685a      	ldr	r2, [r3, #4]
  4008d6:	4b5f      	ldr	r3, [pc, #380]	; (400a54 <main+0x540>)
  4008d8:	685b      	ldr	r3, [r3, #4]
  4008da:	429a      	cmp	r2, r3
  4008dc:	d1ba      	bne.n	400854 <main+0x340>
			(ref_cipher_text_cbc[2] != output_data[2]) ||
  4008de:	4b5c      	ldr	r3, [pc, #368]	; (400a50 <main+0x53c>)
			(ref_cipher_text_cbc[1] != output_data[1]) ||
  4008e0:	689a      	ldr	r2, [r3, #8]
  4008e2:	4b5c      	ldr	r3, [pc, #368]	; (400a54 <main+0x540>)
  4008e4:	689b      	ldr	r3, [r3, #8]
  4008e6:	429a      	cmp	r2, r3
  4008e8:	d1b4      	bne.n	400854 <main+0x340>
			(ref_cipher_text_cbc[3] != output_data[3])) {
  4008ea:	4b59      	ldr	r3, [pc, #356]	; (400a50 <main+0x53c>)
			(ref_cipher_text_cbc[2] != output_data[2]) ||
  4008ec:	68da      	ldr	r2, [r3, #12]
  4008ee:	4b59      	ldr	r3, [pc, #356]	; (400a54 <main+0x540>)
  4008f0:	68db      	ldr	r3, [r3, #12]
  4008f2:	429a      	cmp	r2, r3
  4008f4:	d1ae      	bne.n	400854 <main+0x340>
		printf("\r\nOK!!!\r\n");
  4008f6:	485a      	ldr	r0, [pc, #360]	; (400a60 <main+0x54c>)
  4008f8:	4b44      	ldr	r3, [pc, #272]	; (400a0c <main+0x4f8>)
  4008fa:	4798      	blx	r3
  4008fc:	e7ad      	b.n	40085a <main+0x346>
			(ref_plain_text[2] != output_data[2]) ||
  4008fe:	4b52      	ldr	r3, [pc, #328]	; (400a48 <main+0x534>)
			(ref_plain_text[1] != output_data[1]) ||
  400900:	689a      	ldr	r2, [r3, #8]
  400902:	4b54      	ldr	r3, [pc, #336]	; (400a54 <main+0x540>)
  400904:	689b      	ldr	r3, [r3, #8]
  400906:	429a      	cmp	r2, r3
  400908:	d1df      	bne.n	4008ca <main+0x3b6>
			(ref_plain_text[3] != output_data[3])) {
  40090a:	4b4f      	ldr	r3, [pc, #316]	; (400a48 <main+0x534>)
			(ref_plain_text[2] != output_data[2]) ||
  40090c:	68da      	ldr	r2, [r3, #12]
  40090e:	4b51      	ldr	r3, [pc, #324]	; (400a54 <main+0x540>)
  400910:	68db      	ldr	r3, [r3, #12]
  400912:	429a      	cmp	r2, r3
  400914:	d1d9      	bne.n	4008ca <main+0x3b6>
		printf("\r\nOK!!!\r\n");
  400916:	4852      	ldr	r0, [pc, #328]	; (400a60 <main+0x54c>)
  400918:	4b3c      	ldr	r3, [pc, #240]	; (400a0c <main+0x4f8>)
  40091a:	4798      	blx	r3
  40091c:	e650      	b.n	4005c0 <main+0xac>
			printf("CFB128 mode encryption and decryption test.\r\n");
  40091e:	4851      	ldr	r0, [pc, #324]	; (400a64 <main+0x550>)
  400920:	4f3a      	ldr	r7, [pc, #232]	; (400a0c <main+0x4f8>)
  400922:	47b8      	blx	r7
	printf("\r\n-----------------------------------\r\n");
  400924:	483a      	ldr	r0, [pc, #232]	; (400a10 <main+0x4fc>)
  400926:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  400928:	483a      	ldr	r0, [pc, #232]	; (400a14 <main+0x500>)
  40092a:	47b8      	blx	r7
	printf("- CFB128 cipher mode\r\n");
  40092c:	484e      	ldr	r0, [pc, #312]	; (400a68 <main+0x554>)
  40092e:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  400930:	483a      	ldr	r0, [pc, #232]	; (400a1c <main+0x508>)
  400932:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  400934:	483a      	ldr	r0, [pc, #232]	; (400a20 <main+0x50c>)
  400936:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  400938:	483a      	ldr	r0, [pc, #232]	; (400a24 <main+0x510>)
  40093a:	47b8      	blx	r7
	state = false;
  40093c:	2300      	movs	r3, #0
  40093e:	4a3a      	ldr	r2, [pc, #232]	; (400a28 <main+0x514>)
  400940:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
  400942:	493a      	ldr	r1, [pc, #232]	; (400a2c <main+0x518>)
  400944:	2201      	movs	r2, #1
  400946:	700a      	strb	r2, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  400948:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  40094a:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_CFB_MODE;
  40094c:	2203      	movs	r2, #3
  40094e:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  400950:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  400952:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  400954:	4f36      	ldr	r7, [pc, #216]	; (400a30 <main+0x51c>)
  400956:	4638      	mov	r0, r7
  400958:	4b36      	ldr	r3, [pc, #216]	; (400a34 <main+0x520>)
  40095a:	4798      	blx	r3
	aes_write_key(AES, key128);
  40095c:	4936      	ldr	r1, [pc, #216]	; (400a38 <main+0x524>)
  40095e:	4638      	mov	r0, r7
  400960:	4b36      	ldr	r3, [pc, #216]	; (400a3c <main+0x528>)
  400962:	4798      	blx	r3
	aes_write_initvector(AES, init_vector);
  400964:	4936      	ldr	r1, [pc, #216]	; (400a40 <main+0x52c>)
  400966:	4638      	mov	r0, r7
  400968:	4b36      	ldr	r3, [pc, #216]	; (400a44 <main+0x530>)
  40096a:	4798      	blx	r3
	aes_write_input_data(AES, ref_plain_text);
  40096c:	4936      	ldr	r1, [pc, #216]	; (400a48 <main+0x534>)
  40096e:	4638      	mov	r0, r7
  400970:	4b36      	ldr	r3, [pc, #216]	; (400a4c <main+0x538>)
  400972:	4798      	blx	r3
	while (false == state) {
  400974:	4a2c      	ldr	r2, [pc, #176]	; (400a28 <main+0x514>)
  400976:	7813      	ldrb	r3, [r2, #0]
  400978:	2b00      	cmp	r3, #0
  40097a:	d0fc      	beq.n	400976 <main+0x462>
	if ((ref_cipher_text_cfb128[0] != output_data[0]) ||
  40097c:	4b3b      	ldr	r3, [pc, #236]	; (400a6c <main+0x558>)
  40097e:	681a      	ldr	r2, [r3, #0]
  400980:	4b34      	ldr	r3, [pc, #208]	; (400a54 <main+0x540>)
  400982:	681b      	ldr	r3, [r3, #0]
  400984:	429a      	cmp	r2, r3
  400986:	d075      	beq.n	400a74 <main+0x560>
		printf("\r\nKO!!!\r\n");
  400988:	4833      	ldr	r0, [pc, #204]	; (400a58 <main+0x544>)
  40098a:	4b20      	ldr	r3, [pc, #128]	; (400a0c <main+0x4f8>)
  40098c:	4798      	blx	r3
	printf("\r\n-----------------------------------\r\n");
  40098e:	4820      	ldr	r0, [pc, #128]	; (400a10 <main+0x4fc>)
  400990:	4f1e      	ldr	r7, [pc, #120]	; (400a0c <main+0x4f8>)
  400992:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  400994:	481f      	ldr	r0, [pc, #124]	; (400a14 <main+0x500>)
  400996:	47b8      	blx	r7
	printf("- CFB128 decipher mode\r\n");
  400998:	4835      	ldr	r0, [pc, #212]	; (400a70 <main+0x55c>)
  40099a:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  40099c:	481f      	ldr	r0, [pc, #124]	; (400a1c <main+0x508>)
  40099e:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  4009a0:	481f      	ldr	r0, [pc, #124]	; (400a20 <main+0x50c>)
  4009a2:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  4009a4:	481f      	ldr	r0, [pc, #124]	; (400a24 <main+0x510>)
  4009a6:	47b8      	blx	r7
	state = false;
  4009a8:	2300      	movs	r3, #0
  4009aa:	4a1f      	ldr	r2, [pc, #124]	; (400a28 <main+0x514>)
  4009ac:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_DECRYPTION;
  4009ae:	491f      	ldr	r1, [pc, #124]	; (400a2c <main+0x518>)
  4009b0:	700b      	strb	r3, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  4009b2:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  4009b4:	2201      	movs	r2, #1
  4009b6:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_CFB_MODE;
  4009b8:	2203      	movs	r2, #3
  4009ba:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  4009bc:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  4009be:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  4009c0:	4f1b      	ldr	r7, [pc, #108]	; (400a30 <main+0x51c>)
  4009c2:	4638      	mov	r0, r7
  4009c4:	4b1b      	ldr	r3, [pc, #108]	; (400a34 <main+0x520>)
  4009c6:	4798      	blx	r3
	aes_write_key(AES, key128);
  4009c8:	491b      	ldr	r1, [pc, #108]	; (400a38 <main+0x524>)
  4009ca:	4638      	mov	r0, r7
  4009cc:	4b1b      	ldr	r3, [pc, #108]	; (400a3c <main+0x528>)
  4009ce:	4798      	blx	r3
	aes_write_initvector(AES, init_vector);
  4009d0:	491b      	ldr	r1, [pc, #108]	; (400a40 <main+0x52c>)
  4009d2:	4638      	mov	r0, r7
  4009d4:	4b1b      	ldr	r3, [pc, #108]	; (400a44 <main+0x530>)
  4009d6:	4798      	blx	r3
	aes_write_input_data(AES, ref_cipher_text_cfb128);
  4009d8:	4924      	ldr	r1, [pc, #144]	; (400a6c <main+0x558>)
  4009da:	4638      	mov	r0, r7
  4009dc:	4b1b      	ldr	r3, [pc, #108]	; (400a4c <main+0x538>)
  4009de:	4798      	blx	r3
	while (false == state) {
  4009e0:	4a11      	ldr	r2, [pc, #68]	; (400a28 <main+0x514>)
  4009e2:	7813      	ldrb	r3, [r2, #0]
  4009e4:	2b00      	cmp	r3, #0
  4009e6:	d0fc      	beq.n	4009e2 <main+0x4ce>
	if ((ref_plain_text[0] != output_data[0]) ||
  4009e8:	4b17      	ldr	r3, [pc, #92]	; (400a48 <main+0x534>)
  4009ea:	681a      	ldr	r2, [r3, #0]
  4009ec:	4b19      	ldr	r3, [pc, #100]	; (400a54 <main+0x540>)
  4009ee:	681b      	ldr	r3, [r3, #0]
  4009f0:	429a      	cmp	r2, r3
  4009f2:	d105      	bne.n	400a00 <main+0x4ec>
			(ref_plain_text[1] != output_data[1]) ||
  4009f4:	4b14      	ldr	r3, [pc, #80]	; (400a48 <main+0x534>)
	if ((ref_plain_text[0] != output_data[0]) ||
  4009f6:	685a      	ldr	r2, [r3, #4]
  4009f8:	4b16      	ldr	r3, [pc, #88]	; (400a54 <main+0x540>)
  4009fa:	685b      	ldr	r3, [r3, #4]
  4009fc:	429a      	cmp	r2, r3
  4009fe:	d051      	beq.n	400aa4 <main+0x590>
		printf("\r\nKO!!!\r\n");
  400a00:	4815      	ldr	r0, [pc, #84]	; (400a58 <main+0x544>)
  400a02:	4b02      	ldr	r3, [pc, #8]	; (400a0c <main+0x4f8>)
  400a04:	4798      	blx	r3
  400a06:	e5db      	b.n	4005c0 <main+0xac>
  400a08:	00406210 	.word	0x00406210
  400a0c:	004019ad 	.word	0x004019ad
  400a10:	00406140 	.word	0x00406140
  400a14:	00406168 	.word	0x00406168
  400a18:	0040623c 	.word	0x0040623c
  400a1c:	0040619c 	.word	0x0040619c
  400a20:	004061b0 	.word	0x004061b0
  400a24:	004061cc 	.word	0x004061cc
  400a28:	20400a34 	.word	0x20400a34
  400a2c:	20400e44 	.word	0x20400e44
  400a30:	4006c000 	.word	0x4006c000
  400a34:	00401151 	.word	0x00401151
  400a38:	00405fc0 	.word	0x00405fc0
  400a3c:	004011d5 	.word	0x004011d5
  400a40:	00405fa0 	.word	0x00405fa0
  400a44:	00401209 	.word	0x00401209
  400a48:	20400040 	.word	0x20400040
  400a4c:	00401225 	.word	0x00401225
  400a50:	20400000 	.word	0x20400000
  400a54:	20400a24 	.word	0x20400a24
  400a58:	00406250 	.word	0x00406250
  400a5c:	00406268 	.word	0x00406268
  400a60:	0040625c 	.word	0x0040625c
  400a64:	00406280 	.word	0x00406280
  400a68:	004062b0 	.word	0x004062b0
  400a6c:	20400010 	.word	0x20400010
  400a70:	004062c8 	.word	0x004062c8
			(ref_cipher_text_cfb128[1] != output_data[1]) ||
  400a74:	4b61      	ldr	r3, [pc, #388]	; (400bfc <main+0x6e8>)
	if ((ref_cipher_text_cfb128[0] != output_data[0]) ||
  400a76:	685a      	ldr	r2, [r3, #4]
  400a78:	4b61      	ldr	r3, [pc, #388]	; (400c00 <main+0x6ec>)
  400a7a:	685b      	ldr	r3, [r3, #4]
  400a7c:	429a      	cmp	r2, r3
  400a7e:	d183      	bne.n	400988 <main+0x474>
			(ref_cipher_text_cfb128[2] != output_data[2]) ||
  400a80:	4b5e      	ldr	r3, [pc, #376]	; (400bfc <main+0x6e8>)
			(ref_cipher_text_cfb128[1] != output_data[1]) ||
  400a82:	689a      	ldr	r2, [r3, #8]
  400a84:	4b5e      	ldr	r3, [pc, #376]	; (400c00 <main+0x6ec>)
  400a86:	689b      	ldr	r3, [r3, #8]
  400a88:	429a      	cmp	r2, r3
  400a8a:	f47f af7d 	bne.w	400988 <main+0x474>
			(ref_cipher_text_cfb128[3] != output_data[3])) {
  400a8e:	4b5b      	ldr	r3, [pc, #364]	; (400bfc <main+0x6e8>)
			(ref_cipher_text_cfb128[2] != output_data[2]) ||
  400a90:	68da      	ldr	r2, [r3, #12]
  400a92:	4b5b      	ldr	r3, [pc, #364]	; (400c00 <main+0x6ec>)
  400a94:	68db      	ldr	r3, [r3, #12]
  400a96:	429a      	cmp	r2, r3
  400a98:	f47f af76 	bne.w	400988 <main+0x474>
		printf("\r\nOK!!!\r\n");
  400a9c:	4859      	ldr	r0, [pc, #356]	; (400c04 <main+0x6f0>)
  400a9e:	4b5a      	ldr	r3, [pc, #360]	; (400c08 <main+0x6f4>)
  400aa0:	4798      	blx	r3
  400aa2:	e774      	b.n	40098e <main+0x47a>
			(ref_plain_text[2] != output_data[2]) ||
  400aa4:	4b59      	ldr	r3, [pc, #356]	; (400c0c <main+0x6f8>)
			(ref_plain_text[1] != output_data[1]) ||
  400aa6:	689a      	ldr	r2, [r3, #8]
  400aa8:	4b55      	ldr	r3, [pc, #340]	; (400c00 <main+0x6ec>)
  400aaa:	689b      	ldr	r3, [r3, #8]
  400aac:	429a      	cmp	r2, r3
  400aae:	d1a7      	bne.n	400a00 <main+0x4ec>
			(ref_plain_text[3] != output_data[3])) {
  400ab0:	4b56      	ldr	r3, [pc, #344]	; (400c0c <main+0x6f8>)
			(ref_plain_text[2] != output_data[2]) ||
  400ab2:	68da      	ldr	r2, [r3, #12]
  400ab4:	4b52      	ldr	r3, [pc, #328]	; (400c00 <main+0x6ec>)
  400ab6:	68db      	ldr	r3, [r3, #12]
  400ab8:	429a      	cmp	r2, r3
  400aba:	d1a1      	bne.n	400a00 <main+0x4ec>
		printf("\r\nOK!!!\r\n");
  400abc:	4851      	ldr	r0, [pc, #324]	; (400c04 <main+0x6f0>)
  400abe:	4b52      	ldr	r3, [pc, #328]	; (400c08 <main+0x6f4>)
  400ac0:	4798      	blx	r3
  400ac2:	e57d      	b.n	4005c0 <main+0xac>
			printf("OFB mode encryption and decryption test.\r\n");
  400ac4:	4852      	ldr	r0, [pc, #328]	; (400c10 <main+0x6fc>)
  400ac6:	4f50      	ldr	r7, [pc, #320]	; (400c08 <main+0x6f4>)
  400ac8:	47b8      	blx	r7
	printf("\r\n-----------------------------------\r\n");
  400aca:	4852      	ldr	r0, [pc, #328]	; (400c14 <main+0x700>)
  400acc:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  400ace:	4852      	ldr	r0, [pc, #328]	; (400c18 <main+0x704>)
  400ad0:	47b8      	blx	r7
	printf("- OFB cipher mode\r\n");
  400ad2:	4852      	ldr	r0, [pc, #328]	; (400c1c <main+0x708>)
  400ad4:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  400ad6:	4852      	ldr	r0, [pc, #328]	; (400c20 <main+0x70c>)
  400ad8:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  400ada:	4852      	ldr	r0, [pc, #328]	; (400c24 <main+0x710>)
  400adc:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  400ade:	4852      	ldr	r0, [pc, #328]	; (400c28 <main+0x714>)
  400ae0:	47b8      	blx	r7
	state = false;
  400ae2:	2300      	movs	r3, #0
  400ae4:	4a51      	ldr	r2, [pc, #324]	; (400c2c <main+0x718>)
  400ae6:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
  400ae8:	4951      	ldr	r1, [pc, #324]	; (400c30 <main+0x71c>)
  400aea:	2201      	movs	r2, #1
  400aec:	700a      	strb	r2, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  400aee:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  400af0:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_OFB_MODE;
  400af2:	2202      	movs	r2, #2
  400af4:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  400af6:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  400af8:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  400afa:	4f4e      	ldr	r7, [pc, #312]	; (400c34 <main+0x720>)
  400afc:	4638      	mov	r0, r7
  400afe:	4b4e      	ldr	r3, [pc, #312]	; (400c38 <main+0x724>)
  400b00:	4798      	blx	r3
	aes_write_key(AES, key128);
  400b02:	494e      	ldr	r1, [pc, #312]	; (400c3c <main+0x728>)
  400b04:	4638      	mov	r0, r7
  400b06:	4b4e      	ldr	r3, [pc, #312]	; (400c40 <main+0x72c>)
  400b08:	4798      	blx	r3
	aes_write_initvector(AES, init_vector);
  400b0a:	494e      	ldr	r1, [pc, #312]	; (400c44 <main+0x730>)
  400b0c:	4638      	mov	r0, r7
  400b0e:	4b4e      	ldr	r3, [pc, #312]	; (400c48 <main+0x734>)
  400b10:	4798      	blx	r3
	aes_write_input_data(AES, ref_plain_text);
  400b12:	493e      	ldr	r1, [pc, #248]	; (400c0c <main+0x6f8>)
  400b14:	4638      	mov	r0, r7
  400b16:	4b4d      	ldr	r3, [pc, #308]	; (400c4c <main+0x738>)
  400b18:	4798      	blx	r3
	while (false == state) {
  400b1a:	4a44      	ldr	r2, [pc, #272]	; (400c2c <main+0x718>)
  400b1c:	7813      	ldrb	r3, [r2, #0]
  400b1e:	2b00      	cmp	r3, #0
  400b20:	d0fc      	beq.n	400b1c <main+0x608>
	if ((ref_cipher_text_ofb[0] != output_data[0]) ||
  400b22:	4b4b      	ldr	r3, [pc, #300]	; (400c50 <main+0x73c>)
  400b24:	681a      	ldr	r2, [r3, #0]
  400b26:	4b36      	ldr	r3, [pc, #216]	; (400c00 <main+0x6ec>)
  400b28:	681b      	ldr	r3, [r3, #0]
  400b2a:	429a      	cmp	r2, r3
  400b2c:	d03f      	beq.n	400bae <main+0x69a>
		printf("\r\nKO!!!\r\n");
  400b2e:	4849      	ldr	r0, [pc, #292]	; (400c54 <main+0x740>)
  400b30:	4b35      	ldr	r3, [pc, #212]	; (400c08 <main+0x6f4>)
  400b32:	4798      	blx	r3
	printf("\r\n-----------------------------------\r\n");
  400b34:	4837      	ldr	r0, [pc, #220]	; (400c14 <main+0x700>)
  400b36:	4f34      	ldr	r7, [pc, #208]	; (400c08 <main+0x6f4>)
  400b38:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  400b3a:	4837      	ldr	r0, [pc, #220]	; (400c18 <main+0x704>)
  400b3c:	47b8      	blx	r7
	printf("- OFB decipher mode\r\n");
  400b3e:	4846      	ldr	r0, [pc, #280]	; (400c58 <main+0x744>)
  400b40:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  400b42:	4837      	ldr	r0, [pc, #220]	; (400c20 <main+0x70c>)
  400b44:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  400b46:	4837      	ldr	r0, [pc, #220]	; (400c24 <main+0x710>)
  400b48:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  400b4a:	4837      	ldr	r0, [pc, #220]	; (400c28 <main+0x714>)
  400b4c:	47b8      	blx	r7
	state = false;
  400b4e:	2300      	movs	r3, #0
  400b50:	4a36      	ldr	r2, [pc, #216]	; (400c2c <main+0x718>)
  400b52:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_DECRYPTION;
  400b54:	4936      	ldr	r1, [pc, #216]	; (400c30 <main+0x71c>)
  400b56:	700b      	strb	r3, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  400b58:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  400b5a:	2201      	movs	r2, #1
  400b5c:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_OFB_MODE;
  400b5e:	2202      	movs	r2, #2
  400b60:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  400b62:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  400b64:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  400b66:	4f33      	ldr	r7, [pc, #204]	; (400c34 <main+0x720>)
  400b68:	4638      	mov	r0, r7
  400b6a:	4b33      	ldr	r3, [pc, #204]	; (400c38 <main+0x724>)
  400b6c:	4798      	blx	r3
	aes_write_key(AES, key128);
  400b6e:	4933      	ldr	r1, [pc, #204]	; (400c3c <main+0x728>)
  400b70:	4638      	mov	r0, r7
  400b72:	4b33      	ldr	r3, [pc, #204]	; (400c40 <main+0x72c>)
  400b74:	4798      	blx	r3
	aes_write_initvector(AES, init_vector);
  400b76:	4933      	ldr	r1, [pc, #204]	; (400c44 <main+0x730>)
  400b78:	4638      	mov	r0, r7
  400b7a:	4b33      	ldr	r3, [pc, #204]	; (400c48 <main+0x734>)
  400b7c:	4798      	blx	r3
	aes_write_input_data(AES, ref_cipher_text_ofb);
  400b7e:	4934      	ldr	r1, [pc, #208]	; (400c50 <main+0x73c>)
  400b80:	4638      	mov	r0, r7
  400b82:	4b32      	ldr	r3, [pc, #200]	; (400c4c <main+0x738>)
  400b84:	4798      	blx	r3
	while (false == state) {
  400b86:	4a29      	ldr	r2, [pc, #164]	; (400c2c <main+0x718>)
  400b88:	7813      	ldrb	r3, [r2, #0]
  400b8a:	2b00      	cmp	r3, #0
  400b8c:	d0fc      	beq.n	400b88 <main+0x674>
	if ((ref_plain_text[0] != output_data[0]) ||
  400b8e:	4b1f      	ldr	r3, [pc, #124]	; (400c0c <main+0x6f8>)
  400b90:	681a      	ldr	r2, [r3, #0]
  400b92:	4b1b      	ldr	r3, [pc, #108]	; (400c00 <main+0x6ec>)
  400b94:	681b      	ldr	r3, [r3, #0]
  400b96:	429a      	cmp	r2, r3
  400b98:	d105      	bne.n	400ba6 <main+0x692>
			(ref_plain_text[1] != output_data[1]) ||
  400b9a:	4b1c      	ldr	r3, [pc, #112]	; (400c0c <main+0x6f8>)
	if ((ref_plain_text[0] != output_data[0]) ||
  400b9c:	685a      	ldr	r2, [r3, #4]
  400b9e:	4b18      	ldr	r3, [pc, #96]	; (400c00 <main+0x6ec>)
  400ba0:	685b      	ldr	r3, [r3, #4]
  400ba2:	429a      	cmp	r2, r3
  400ba4:	d019      	beq.n	400bda <main+0x6c6>
		printf("\r\nKO!!!\r\n");
  400ba6:	482b      	ldr	r0, [pc, #172]	; (400c54 <main+0x740>)
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <main+0x6f4>)
  400baa:	4798      	blx	r3
  400bac:	e508      	b.n	4005c0 <main+0xac>
			(ref_cipher_text_ofb[1] != output_data[1]) ||
  400bae:	4b28      	ldr	r3, [pc, #160]	; (400c50 <main+0x73c>)
	if ((ref_cipher_text_ofb[0] != output_data[0]) ||
  400bb0:	685a      	ldr	r2, [r3, #4]
  400bb2:	4b13      	ldr	r3, [pc, #76]	; (400c00 <main+0x6ec>)
  400bb4:	685b      	ldr	r3, [r3, #4]
  400bb6:	429a      	cmp	r2, r3
  400bb8:	d1b9      	bne.n	400b2e <main+0x61a>
			(ref_cipher_text_ofb[2] != output_data[2]) ||
  400bba:	4b25      	ldr	r3, [pc, #148]	; (400c50 <main+0x73c>)
			(ref_cipher_text_ofb[1] != output_data[1]) ||
  400bbc:	689a      	ldr	r2, [r3, #8]
  400bbe:	4b10      	ldr	r3, [pc, #64]	; (400c00 <main+0x6ec>)
  400bc0:	689b      	ldr	r3, [r3, #8]
  400bc2:	429a      	cmp	r2, r3
  400bc4:	d1b3      	bne.n	400b2e <main+0x61a>
			(ref_cipher_text_ofb[3] != output_data[3])) {
  400bc6:	4b22      	ldr	r3, [pc, #136]	; (400c50 <main+0x73c>)
			(ref_cipher_text_ofb[2] != output_data[2]) ||
  400bc8:	68da      	ldr	r2, [r3, #12]
  400bca:	4b0d      	ldr	r3, [pc, #52]	; (400c00 <main+0x6ec>)
  400bcc:	68db      	ldr	r3, [r3, #12]
  400bce:	429a      	cmp	r2, r3
  400bd0:	d1ad      	bne.n	400b2e <main+0x61a>
		printf("\r\nOK!!!\r\n");
  400bd2:	480c      	ldr	r0, [pc, #48]	; (400c04 <main+0x6f0>)
  400bd4:	4b0c      	ldr	r3, [pc, #48]	; (400c08 <main+0x6f4>)
  400bd6:	4798      	blx	r3
  400bd8:	e7ac      	b.n	400b34 <main+0x620>
			(ref_plain_text[2] != output_data[2]) ||
  400bda:	4b0c      	ldr	r3, [pc, #48]	; (400c0c <main+0x6f8>)
			(ref_plain_text[1] != output_data[1]) ||
  400bdc:	689a      	ldr	r2, [r3, #8]
  400bde:	4b08      	ldr	r3, [pc, #32]	; (400c00 <main+0x6ec>)
  400be0:	689b      	ldr	r3, [r3, #8]
  400be2:	429a      	cmp	r2, r3
  400be4:	d1df      	bne.n	400ba6 <main+0x692>
			(ref_plain_text[3] != output_data[3])) {
  400be6:	4b09      	ldr	r3, [pc, #36]	; (400c0c <main+0x6f8>)
			(ref_plain_text[2] != output_data[2]) ||
  400be8:	68da      	ldr	r2, [r3, #12]
  400bea:	4b05      	ldr	r3, [pc, #20]	; (400c00 <main+0x6ec>)
  400bec:	68db      	ldr	r3, [r3, #12]
  400bee:	429a      	cmp	r2, r3
  400bf0:	d1d9      	bne.n	400ba6 <main+0x692>
		printf("\r\nOK!!!\r\n");
  400bf2:	4804      	ldr	r0, [pc, #16]	; (400c04 <main+0x6f0>)
  400bf4:	4b04      	ldr	r3, [pc, #16]	; (400c08 <main+0x6f4>)
  400bf6:	4798      	blx	r3
  400bf8:	e4e2      	b.n	4005c0 <main+0xac>
  400bfa:	bf00      	nop
  400bfc:	20400010 	.word	0x20400010
  400c00:	20400a24 	.word	0x20400a24
  400c04:	0040625c 	.word	0x0040625c
  400c08:	004019ad 	.word	0x004019ad
  400c0c:	20400040 	.word	0x20400040
  400c10:	004062e4 	.word	0x004062e4
  400c14:	00406140 	.word	0x00406140
  400c18:	00406168 	.word	0x00406168
  400c1c:	00406310 	.word	0x00406310
  400c20:	0040619c 	.word	0x0040619c
  400c24:	004061b0 	.word	0x004061b0
  400c28:	004061cc 	.word	0x004061cc
  400c2c:	20400a34 	.word	0x20400a34
  400c30:	20400e44 	.word	0x20400e44
  400c34:	4006c000 	.word	0x4006c000
  400c38:	00401151 	.word	0x00401151
  400c3c:	00405fc0 	.word	0x00405fc0
  400c40:	004011d5 	.word	0x004011d5
  400c44:	00405fa0 	.word	0x00405fa0
  400c48:	00401209 	.word	0x00401209
  400c4c:	00401225 	.word	0x00401225
  400c50:	20400030 	.word	0x20400030
  400c54:	00406250 	.word	0x00406250
  400c58:	00406324 	.word	0x00406324
			printf("CTR mode encryption and decryption test.\r\n");
  400c5c:	4853      	ldr	r0, [pc, #332]	; (400dac <main+0x898>)
  400c5e:	4f54      	ldr	r7, [pc, #336]	; (400db0 <main+0x89c>)
  400c60:	47b8      	blx	r7
	printf("\r\n-----------------------------------\r\n");
  400c62:	4854      	ldr	r0, [pc, #336]	; (400db4 <main+0x8a0>)
  400c64:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  400c66:	4854      	ldr	r0, [pc, #336]	; (400db8 <main+0x8a4>)
  400c68:	47b8      	blx	r7
	printf("- CTR cipher mode\r\n");
  400c6a:	4854      	ldr	r0, [pc, #336]	; (400dbc <main+0x8a8>)
  400c6c:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  400c6e:	4854      	ldr	r0, [pc, #336]	; (400dc0 <main+0x8ac>)
  400c70:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  400c72:	4854      	ldr	r0, [pc, #336]	; (400dc4 <main+0x8b0>)
  400c74:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  400c76:	4854      	ldr	r0, [pc, #336]	; (400dc8 <main+0x8b4>)
  400c78:	47b8      	blx	r7
	state = false;
  400c7a:	2300      	movs	r3, #0
  400c7c:	4a53      	ldr	r2, [pc, #332]	; (400dcc <main+0x8b8>)
  400c7e:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
  400c80:	4953      	ldr	r1, [pc, #332]	; (400dd0 <main+0x8bc>)
  400c82:	2201      	movs	r2, #1
  400c84:	700a      	strb	r2, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  400c86:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  400c88:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_CTR_MODE;
  400c8a:	2204      	movs	r2, #4
  400c8c:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  400c8e:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  400c90:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  400c92:	4f50      	ldr	r7, [pc, #320]	; (400dd4 <main+0x8c0>)
  400c94:	4638      	mov	r0, r7
  400c96:	4b50      	ldr	r3, [pc, #320]	; (400dd8 <main+0x8c4>)
  400c98:	4798      	blx	r3
	aes_write_key(AES, key128);
  400c9a:	4950      	ldr	r1, [pc, #320]	; (400ddc <main+0x8c8>)
  400c9c:	4638      	mov	r0, r7
  400c9e:	4b50      	ldr	r3, [pc, #320]	; (400de0 <main+0x8cc>)
  400ca0:	4798      	blx	r3
	aes_write_initvector(AES, init_vector_ctr);
  400ca2:	4950      	ldr	r1, [pc, #320]	; (400de4 <main+0x8d0>)
  400ca4:	4638      	mov	r0, r7
  400ca6:	4b50      	ldr	r3, [pc, #320]	; (400de8 <main+0x8d4>)
  400ca8:	4798      	blx	r3
	aes_write_input_data(AES, ref_plain_text);
  400caa:	4950      	ldr	r1, [pc, #320]	; (400dec <main+0x8d8>)
  400cac:	4638      	mov	r0, r7
  400cae:	4b50      	ldr	r3, [pc, #320]	; (400df0 <main+0x8dc>)
  400cb0:	4798      	blx	r3
	while (false == state) {
  400cb2:	4a46      	ldr	r2, [pc, #280]	; (400dcc <main+0x8b8>)
  400cb4:	7813      	ldrb	r3, [r2, #0]
  400cb6:	2b00      	cmp	r3, #0
  400cb8:	d0fc      	beq.n	400cb4 <main+0x7a0>
	if ((ref_cipher_text_ctr[0] != output_data[0]) ||
  400cba:	4b4e      	ldr	r3, [pc, #312]	; (400df4 <main+0x8e0>)
  400cbc:	681a      	ldr	r2, [r3, #0]
  400cbe:	4b4e      	ldr	r3, [pc, #312]	; (400df8 <main+0x8e4>)
  400cc0:	681b      	ldr	r3, [r3, #0]
  400cc2:	429a      	cmp	r2, r3
  400cc4:	d03f      	beq.n	400d46 <main+0x832>
		printf("\r\nKO!!!\r\n");
  400cc6:	484d      	ldr	r0, [pc, #308]	; (400dfc <main+0x8e8>)
  400cc8:	4b39      	ldr	r3, [pc, #228]	; (400db0 <main+0x89c>)
  400cca:	4798      	blx	r3
	printf("\r\n-----------------------------------\r\n");
  400ccc:	4839      	ldr	r0, [pc, #228]	; (400db4 <main+0x8a0>)
  400cce:	4f38      	ldr	r7, [pc, #224]	; (400db0 <main+0x89c>)
  400cd0:	47b8      	blx	r7
	printf("- 128bit cryptographic key\r\n");
  400cd2:	4839      	ldr	r0, [pc, #228]	; (400db8 <main+0x8a4>)
  400cd4:	47b8      	blx	r7
	printf("- CTR decipher mode\r\n");
  400cd6:	484a      	ldr	r0, [pc, #296]	; (400e00 <main+0x8ec>)
  400cd8:	47b8      	blx	r7
	printf("- Auto start mode\r\n");
  400cda:	4839      	ldr	r0, [pc, #228]	; (400dc0 <main+0x8ac>)
  400cdc:	47b8      	blx	r7
	printf("- input of 4 32bit words\r\n");
  400cde:	4839      	ldr	r0, [pc, #228]	; (400dc4 <main+0x8b0>)
  400ce0:	47b8      	blx	r7
	printf("-----------------------------------\r\n");
  400ce2:	4839      	ldr	r0, [pc, #228]	; (400dc8 <main+0x8b4>)
  400ce4:	47b8      	blx	r7
	state = false;
  400ce6:	2300      	movs	r3, #0
  400ce8:	4a38      	ldr	r2, [pc, #224]	; (400dcc <main+0x8b8>)
  400cea:	7013      	strb	r3, [r2, #0]
	g_aes_cfg.encrypt_mode = AES_DECRYPTION;
  400cec:	4938      	ldr	r1, [pc, #224]	; (400dd0 <main+0x8bc>)
  400cee:	700b      	strb	r3, [r1, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
  400cf0:	704b      	strb	r3, [r1, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
  400cf2:	2201      	movs	r2, #1
  400cf4:	708a      	strb	r2, [r1, #2]
	g_aes_cfg.opmode = AES_CTR_MODE;
  400cf6:	2204      	movs	r2, #4
  400cf8:	70ca      	strb	r2, [r1, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
  400cfa:	710b      	strb	r3, [r1, #4]
	g_aes_cfg.lod = false;
  400cfc:	714b      	strb	r3, [r1, #5]
	aes_set_config(AES, &g_aes_cfg);
  400cfe:	4f35      	ldr	r7, [pc, #212]	; (400dd4 <main+0x8c0>)
  400d00:	4638      	mov	r0, r7
  400d02:	4b35      	ldr	r3, [pc, #212]	; (400dd8 <main+0x8c4>)
  400d04:	4798      	blx	r3
	aes_write_key(AES, key128);
  400d06:	4935      	ldr	r1, [pc, #212]	; (400ddc <main+0x8c8>)
  400d08:	4638      	mov	r0, r7
  400d0a:	4b35      	ldr	r3, [pc, #212]	; (400de0 <main+0x8cc>)
  400d0c:	4798      	blx	r3
	aes_write_initvector(AES, init_vector_ctr);
  400d0e:	4935      	ldr	r1, [pc, #212]	; (400de4 <main+0x8d0>)
  400d10:	4638      	mov	r0, r7
  400d12:	4b35      	ldr	r3, [pc, #212]	; (400de8 <main+0x8d4>)
  400d14:	4798      	blx	r3
	aes_write_input_data(AES, ref_cipher_text_ctr);
  400d16:	4937      	ldr	r1, [pc, #220]	; (400df4 <main+0x8e0>)
  400d18:	4638      	mov	r0, r7
  400d1a:	4b35      	ldr	r3, [pc, #212]	; (400df0 <main+0x8dc>)
  400d1c:	4798      	blx	r3
	while (false == state) {
  400d1e:	4a2b      	ldr	r2, [pc, #172]	; (400dcc <main+0x8b8>)
  400d20:	7813      	ldrb	r3, [r2, #0]
  400d22:	2b00      	cmp	r3, #0
  400d24:	d0fc      	beq.n	400d20 <main+0x80c>
	if ((ref_plain_text[0] != output_data[0]) ||
  400d26:	4b31      	ldr	r3, [pc, #196]	; (400dec <main+0x8d8>)
  400d28:	681a      	ldr	r2, [r3, #0]
  400d2a:	4b33      	ldr	r3, [pc, #204]	; (400df8 <main+0x8e4>)
  400d2c:	681b      	ldr	r3, [r3, #0]
  400d2e:	429a      	cmp	r2, r3
  400d30:	d105      	bne.n	400d3e <main+0x82a>
			(ref_plain_text[1] != output_data[1]) ||
  400d32:	4b2e      	ldr	r3, [pc, #184]	; (400dec <main+0x8d8>)
	if ((ref_plain_text[0] != output_data[0]) ||
  400d34:	685a      	ldr	r2, [r3, #4]
  400d36:	4b30      	ldr	r3, [pc, #192]	; (400df8 <main+0x8e4>)
  400d38:	685b      	ldr	r3, [r3, #4]
  400d3a:	429a      	cmp	r2, r3
  400d3c:	d019      	beq.n	400d72 <main+0x85e>
		printf("\r\nKO!!!\r\n");
  400d3e:	482f      	ldr	r0, [pc, #188]	; (400dfc <main+0x8e8>)
  400d40:	4b1b      	ldr	r3, [pc, #108]	; (400db0 <main+0x89c>)
  400d42:	4798      	blx	r3
  400d44:	e43c      	b.n	4005c0 <main+0xac>
			(ref_cipher_text_ctr[1] != output_data[1]) ||
  400d46:	4b2b      	ldr	r3, [pc, #172]	; (400df4 <main+0x8e0>)
	if ((ref_cipher_text_ctr[0] != output_data[0]) ||
  400d48:	685a      	ldr	r2, [r3, #4]
  400d4a:	4b2b      	ldr	r3, [pc, #172]	; (400df8 <main+0x8e4>)
  400d4c:	685b      	ldr	r3, [r3, #4]
  400d4e:	429a      	cmp	r2, r3
  400d50:	d1b9      	bne.n	400cc6 <main+0x7b2>
			(ref_cipher_text_ctr[2] != output_data[2]) ||
  400d52:	4b28      	ldr	r3, [pc, #160]	; (400df4 <main+0x8e0>)
			(ref_cipher_text_ctr[1] != output_data[1]) ||
  400d54:	689a      	ldr	r2, [r3, #8]
  400d56:	4b28      	ldr	r3, [pc, #160]	; (400df8 <main+0x8e4>)
  400d58:	689b      	ldr	r3, [r3, #8]
  400d5a:	429a      	cmp	r2, r3
  400d5c:	d1b3      	bne.n	400cc6 <main+0x7b2>
			(ref_cipher_text_ctr[3] != output_data[3])) {
  400d5e:	4b25      	ldr	r3, [pc, #148]	; (400df4 <main+0x8e0>)
			(ref_cipher_text_ctr[2] != output_data[2]) ||
  400d60:	68da      	ldr	r2, [r3, #12]
  400d62:	4b25      	ldr	r3, [pc, #148]	; (400df8 <main+0x8e4>)
  400d64:	68db      	ldr	r3, [r3, #12]
  400d66:	429a      	cmp	r2, r3
  400d68:	d1ad      	bne.n	400cc6 <main+0x7b2>
		printf("\r\nOK!!!\r\n");
  400d6a:	4826      	ldr	r0, [pc, #152]	; (400e04 <main+0x8f0>)
  400d6c:	4b10      	ldr	r3, [pc, #64]	; (400db0 <main+0x89c>)
  400d6e:	4798      	blx	r3
  400d70:	e7ac      	b.n	400ccc <main+0x7b8>
			(ref_plain_text[2] != output_data[2]) ||
  400d72:	4b1e      	ldr	r3, [pc, #120]	; (400dec <main+0x8d8>)
			(ref_plain_text[1] != output_data[1]) ||
  400d74:	689a      	ldr	r2, [r3, #8]
  400d76:	4b20      	ldr	r3, [pc, #128]	; (400df8 <main+0x8e4>)
  400d78:	689b      	ldr	r3, [r3, #8]
  400d7a:	429a      	cmp	r2, r3
  400d7c:	d1df      	bne.n	400d3e <main+0x82a>
			(ref_plain_text[3] != output_data[3])) {
  400d7e:	4b1b      	ldr	r3, [pc, #108]	; (400dec <main+0x8d8>)
			(ref_plain_text[2] != output_data[2]) ||
  400d80:	68da      	ldr	r2, [r3, #12]
  400d82:	4b1d      	ldr	r3, [pc, #116]	; (400df8 <main+0x8e4>)
  400d84:	68db      	ldr	r3, [r3, #12]
  400d86:	429a      	cmp	r2, r3
  400d88:	d1d9      	bne.n	400d3e <main+0x82a>
		printf("\r\nOK!!!\r\n");
  400d8a:	481e      	ldr	r0, [pc, #120]	; (400e04 <main+0x8f0>)
  400d8c:	4b08      	ldr	r3, [pc, #32]	; (400db0 <main+0x89c>)
  400d8e:	4798      	blx	r3
  400d90:	e416      	b.n	4005c0 <main+0xac>
			ase_xdmac_configure();
  400d92:	4b1d      	ldr	r3, [pc, #116]	; (400e08 <main+0x8f4>)
  400d94:	4798      	blx	r3
			printf("dma\n");
  400d96:	481d      	ldr	r0, [pc, #116]	; (400e0c <main+0x8f8>)
  400d98:	4f05      	ldr	r7, [pc, #20]	; (400db0 <main+0x89c>)
  400d9a:	47b8      	blx	r7
			printf("This mode is not supported by device.\r\n");
  400d9c:	4630      	mov	r0, r6
  400d9e:	47b8      	blx	r7
			break;
  400da0:	e40e      	b.n	4005c0 <main+0xac>
			printf("This mode is not supported by device.\r\n");
  400da2:	4630      	mov	r0, r6
  400da4:	4b02      	ldr	r3, [pc, #8]	; (400db0 <main+0x89c>)
  400da6:	4798      	blx	r3
			#endif
			break;
  400da8:	e40a      	b.n	4005c0 <main+0xac>
  400daa:	bf00      	nop
  400dac:	0040633c 	.word	0x0040633c
  400db0:	004019ad 	.word	0x004019ad
  400db4:	00406140 	.word	0x00406140
  400db8:	00406168 	.word	0x00406168
  400dbc:	00406368 	.word	0x00406368
  400dc0:	0040619c 	.word	0x0040619c
  400dc4:	004061b0 	.word	0x004061b0
  400dc8:	004061cc 	.word	0x004061cc
  400dcc:	20400a34 	.word	0x20400a34
  400dd0:	20400e44 	.word	0x20400e44
  400dd4:	4006c000 	.word	0x4006c000
  400dd8:	00401151 	.word	0x00401151
  400ddc:	00405fc0 	.word	0x00405fc0
  400de0:	004011d5 	.word	0x004011d5
  400de4:	00405fb0 	.word	0x00405fb0
  400de8:	00401209 	.word	0x00401209
  400dec:	20400040 	.word	0x20400040
  400df0:	00401225 	.word	0x00401225
  400df4:	20400020 	.word	0x20400020
  400df8:	20400a24 	.word	0x20400a24
  400dfc:	00406250 	.word	0x00406250
  400e00:	0040637c 	.word	0x0040637c
  400e04:	0040625c 	.word	0x0040625c
  400e08:	00400381 	.word	0x00400381
  400e0c:	00406394 	.word	0x00406394

00400e10 <xdmac_configure_transfer>:
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400e10:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400e14:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  400e16:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  400e18:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  400e1a:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  400e1c:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  400e1e:	6813      	ldr	r3, [r2, #0]
  400e20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400e24:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  400e26:	6913      	ldr	r3, [r2, #16]
  400e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400e2c:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  400e2e:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  400e30:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  400e32:	6993      	ldr	r3, [r2, #24]
  400e34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400e38:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  400e3c:	69d3      	ldr	r3, [r2, #28]
  400e3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400e42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  400e46:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  400e48:	678b      	str	r3, [r1, #120]	; 0x78
  400e4a:	4770      	bx	lr

00400e4c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400e4c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400e4e:	4810      	ldr	r0, [pc, #64]	; (400e90 <sysclk_init+0x44>)
  400e50:	4b10      	ldr	r3, [pc, #64]	; (400e94 <sysclk_init+0x48>)
  400e52:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400e54:	213e      	movs	r1, #62	; 0x3e
  400e56:	2000      	movs	r0, #0
  400e58:	4b0f      	ldr	r3, [pc, #60]	; (400e98 <sysclk_init+0x4c>)
  400e5a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400e5c:	4c0f      	ldr	r4, [pc, #60]	; (400e9c <sysclk_init+0x50>)
  400e5e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400e60:	2800      	cmp	r0, #0
  400e62:	d0fc      	beq.n	400e5e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400e64:	4b0e      	ldr	r3, [pc, #56]	; (400ea0 <sysclk_init+0x54>)
  400e66:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400e68:	4a0e      	ldr	r2, [pc, #56]	; (400ea4 <sysclk_init+0x58>)
  400e6a:	4b0f      	ldr	r3, [pc, #60]	; (400ea8 <sysclk_init+0x5c>)
  400e6c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400e6e:	4c0f      	ldr	r4, [pc, #60]	; (400eac <sysclk_init+0x60>)
  400e70:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400e72:	2800      	cmp	r0, #0
  400e74:	d0fc      	beq.n	400e70 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400e76:	2002      	movs	r0, #2
  400e78:	4b0d      	ldr	r3, [pc, #52]	; (400eb0 <sysclk_init+0x64>)
  400e7a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400e7c:	2000      	movs	r0, #0
  400e7e:	4b0d      	ldr	r3, [pc, #52]	; (400eb4 <sysclk_init+0x68>)
  400e80:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400e82:	4b0d      	ldr	r3, [pc, #52]	; (400eb8 <sysclk_init+0x6c>)
  400e84:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400e86:	4802      	ldr	r0, [pc, #8]	; (400e90 <sysclk_init+0x44>)
  400e88:	4b02      	ldr	r3, [pc, #8]	; (400e94 <sysclk_init+0x48>)
  400e8a:	4798      	blx	r3
  400e8c:	bd10      	pop	{r4, pc}
  400e8e:	bf00      	nop
  400e90:	11e1a300 	.word	0x11e1a300
  400e94:	00401881 	.word	0x00401881
  400e98:	00401449 	.word	0x00401449
  400e9c:	0040149d 	.word	0x0040149d
  400ea0:	004014ad 	.word	0x004014ad
  400ea4:	20183f01 	.word	0x20183f01
  400ea8:	400e0600 	.word	0x400e0600
  400eac:	004014bd 	.word	0x004014bd
  400eb0:	004013ad 	.word	0x004013ad
  400eb4:	004013e5 	.word	0x004013e5
  400eb8:	00401775 	.word	0x00401775

00400ebc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400ec0:	b980      	cbnz	r0, 400ee4 <_read+0x28>
  400ec2:	460c      	mov	r4, r1
  400ec4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400ec6:	2a00      	cmp	r2, #0
  400ec8:	dd0f      	ble.n	400eea <_read+0x2e>
  400eca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400ecc:	4e08      	ldr	r6, [pc, #32]	; (400ef0 <_read+0x34>)
  400ece:	4d09      	ldr	r5, [pc, #36]	; (400ef4 <_read+0x38>)
  400ed0:	6830      	ldr	r0, [r6, #0]
  400ed2:	4621      	mov	r1, r4
  400ed4:	682b      	ldr	r3, [r5, #0]
  400ed6:	4798      	blx	r3
		ptr++;
  400ed8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400eda:	42bc      	cmp	r4, r7
  400edc:	d1f8      	bne.n	400ed0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400ede:	4640      	mov	r0, r8
  400ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400ee4:	f04f 38ff 	mov.w	r8, #4294967295
  400ee8:	e7f9      	b.n	400ede <_read+0x22>
	for (; len > 0; --len) {
  400eea:	4680      	mov	r8, r0
  400eec:	e7f7      	b.n	400ede <_read+0x22>
  400eee:	bf00      	nop
  400ef0:	20400e60 	.word	0x20400e60
  400ef4:	20400e58 	.word	0x20400e58

00400ef8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400ef8:	3801      	subs	r0, #1
  400efa:	2802      	cmp	r0, #2
  400efc:	d815      	bhi.n	400f2a <_write+0x32>
{
  400efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f02:	460e      	mov	r6, r1
  400f04:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400f06:	b19a      	cbz	r2, 400f30 <_write+0x38>
  400f08:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400f0a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400f44 <_write+0x4c>
  400f0e:	4f0c      	ldr	r7, [pc, #48]	; (400f40 <_write+0x48>)
  400f10:	f8d8 0000 	ldr.w	r0, [r8]
  400f14:	f815 1b01 	ldrb.w	r1, [r5], #1
  400f18:	683b      	ldr	r3, [r7, #0]
  400f1a:	4798      	blx	r3
  400f1c:	2800      	cmp	r0, #0
  400f1e:	db0a      	blt.n	400f36 <_write+0x3e>
  400f20:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400f22:	3c01      	subs	r4, #1
  400f24:	d1f4      	bne.n	400f10 <_write+0x18>
  400f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400f2a:	f04f 30ff 	mov.w	r0, #4294967295
  400f2e:	4770      	bx	lr
	for (; len != 0; --len) {
  400f30:	4610      	mov	r0, r2
  400f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400f36:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f3e:	bf00      	nop
  400f40:	20400e5c 	.word	0x20400e5c
  400f44:	20400e60 	.word	0x20400e60

00400f48 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400f4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f4e:	4b5c      	ldr	r3, [pc, #368]	; (4010c0 <board_init+0x178>)
  400f50:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400f52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f56:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400f5a:	4b5a      	ldr	r3, [pc, #360]	; (4010c4 <board_init+0x17c>)
  400f5c:	2200      	movs	r2, #0
  400f5e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400f62:	695a      	ldr	r2, [r3, #20]
  400f64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400f68:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400f6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f6e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400f72:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400f76:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400f7a:	f007 0007 	and.w	r0, r7, #7
  400f7e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400f80:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400f84:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400f88:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400f8c:	f3bf 8f4f 	dsb	sy
  400f90:	f04f 34ff 	mov.w	r4, #4294967295
  400f94:	fa04 fc00 	lsl.w	ip, r4, r0
  400f98:	fa06 f000 	lsl.w	r0, r6, r0
  400f9c:	fa04 f40e 	lsl.w	r4, r4, lr
  400fa0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400fa4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400fa6:	463a      	mov	r2, r7
  400fa8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400faa:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400fae:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400fb2:	3a01      	subs	r2, #1
  400fb4:	4423      	add	r3, r4
  400fb6:	f1b2 3fff 	cmp.w	r2, #4294967295
  400fba:	d1f6      	bne.n	400faa <board_init+0x62>
        } while(sets--);
  400fbc:	3e01      	subs	r6, #1
  400fbe:	4460      	add	r0, ip
  400fc0:	f1b6 3fff 	cmp.w	r6, #4294967295
  400fc4:	d1ef      	bne.n	400fa6 <board_init+0x5e>
  400fc6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400fca:	4b3e      	ldr	r3, [pc, #248]	; (4010c4 <board_init+0x17c>)
  400fcc:	695a      	ldr	r2, [r3, #20]
  400fce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400fd2:	615a      	str	r2, [r3, #20]
  400fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400fd8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400fdc:	4a3a      	ldr	r2, [pc, #232]	; (4010c8 <board_init+0x180>)
  400fde:	493b      	ldr	r1, [pc, #236]	; (4010cc <board_init+0x184>)
  400fe0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400fe2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400fe6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400fe8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400fec:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400ff0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400ff4:	f022 0201 	bic.w	r2, r2, #1
  400ff8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400ffc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  401000:	f022 0201 	bic.w	r2, r2, #1
  401004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40100c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401010:	200a      	movs	r0, #10
  401012:	4c2f      	ldr	r4, [pc, #188]	; (4010d0 <board_init+0x188>)
  401014:	47a0      	blx	r4
  401016:	200b      	movs	r0, #11
  401018:	47a0      	blx	r4
  40101a:	200c      	movs	r0, #12
  40101c:	47a0      	blx	r4
  40101e:	2010      	movs	r0, #16
  401020:	47a0      	blx	r4
  401022:	2011      	movs	r0, #17
  401024:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401026:	4b2b      	ldr	r3, [pc, #172]	; (4010d4 <board_init+0x18c>)
  401028:	f44f 7280 	mov.w	r2, #256	; 0x100
  40102c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40102e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401032:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401034:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401038:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40103c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40103e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401042:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401048:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40104a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40104c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401050:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401052:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401056:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401058:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40105a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40105e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401060:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401064:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401068:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40106c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401070:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401076:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401078:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40107a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40107e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401080:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401084:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401086:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401088:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40108c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40108e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401090:	4a11      	ldr	r2, [pc, #68]	; (4010d8 <board_init+0x190>)
  401092:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401096:	f043 0310 	orr.w	r3, r3, #16
  40109a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  40109e:	4b0f      	ldr	r3, [pc, #60]	; (4010dc <board_init+0x194>)
  4010a0:	2210      	movs	r2, #16
  4010a2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4010a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4010a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4010aa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4010ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4010b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4010b2:	4311      	orrs	r1, r2
  4010b4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4010b6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4010b8:	4311      	orrs	r1, r2
  4010ba:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4010bc:	605a      	str	r2, [r3, #4]
  4010be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010c0:	400e1850 	.word	0x400e1850
  4010c4:	e000ed00 	.word	0xe000ed00
  4010c8:	400e0c00 	.word	0x400e0c00
  4010cc:	5a00080c 	.word	0x5a00080c
  4010d0:	004014cd 	.word	0x004014cd
  4010d4:	400e1200 	.word	0x400e1200
  4010d8:	40088000 	.word	0x40088000
  4010dc:	400e1000 	.word	0x400e1000

004010e0 <aes_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(p_cfg);

	/* Default configuration values */
	p_cfg->encrypt_mode = AES_ENCRYPTION;
  4010e0:	2301      	movs	r3, #1
  4010e2:	7003      	strb	r3, [r0, #0]
	p_cfg->key_size = AES_KEY_SIZE_128;
  4010e4:	2300      	movs	r3, #0
  4010e6:	7043      	strb	r3, [r0, #1]
	p_cfg->start_mode = AES_MANUAL_START;
  4010e8:	7083      	strb	r3, [r0, #2]
	p_cfg->opmode = AES_ECB_MODE;
  4010ea:	70c3      	strb	r3, [r0, #3]
	p_cfg->cfb_size = AES_CFB_SIZE_128;
  4010ec:	7103      	strb	r3, [r0, #4]
	p_cfg->lod = false;
  4010ee:	7143      	strb	r3, [r0, #5]
	p_cfg->gtag_en = false;
  4010f0:	7183      	strb	r3, [r0, #6]
	p_cfg->processing_delay = 0;
  4010f2:	6083      	str	r3, [r0, #8]
  4010f4:	4770      	bx	lr
	...

004010f8 <aes_enable>:

/**
 * \brief Enable the AES module.
 */
void aes_enable(void)
{
  4010f8:	b500      	push	{lr}
  4010fa:	b083      	sub	sp, #12
  4010fc:	2038      	movs	r0, #56	; 0x38
  4010fe:	4b11      	ldr	r3, [pc, #68]	; (401144 <aes_enable+0x4c>)
  401100:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  401102:	4b11      	ldr	r3, [pc, #68]	; (401148 <aes_enable+0x50>)
  401104:	789b      	ldrb	r3, [r3, #2]
  401106:	2bff      	cmp	r3, #255	; 0xff
  401108:	d01a      	beq.n	401140 <aes_enable+0x48>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40110a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40110e:	fab3 f383 	clz	r3, r3
  401112:	095b      	lsrs	r3, r3, #5
  401114:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401116:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401118:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40111c:	2200      	movs	r2, #0
  40111e:	4b0b      	ldr	r3, [pc, #44]	; (40114c <aes_enable+0x54>)
  401120:	701a      	strb	r2, [r3, #0]
	return flags;
  401122:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401124:	4a08      	ldr	r2, [pc, #32]	; (401148 <aes_enable+0x50>)
  401126:	7893      	ldrb	r3, [r2, #2]
  401128:	3301      	adds	r3, #1
  40112a:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40112c:	b129      	cbz	r1, 40113a <aes_enable+0x42>
		cpu_irq_enable();
  40112e:	2201      	movs	r2, #1
  401130:	4b06      	ldr	r3, [pc, #24]	; (40114c <aes_enable+0x54>)
  401132:	701a      	strb	r2, [r3, #0]
  401134:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401138:	b662      	cpsie	i
	sysclk_enable_peripheral_clock(ID_AES);
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40113a:	b003      	add	sp, #12
  40113c:	f85d fb04 	ldr.w	pc, [sp], #4
  401140:	e7fe      	b.n	401140 <aes_enable+0x48>
  401142:	bf00      	nop
  401144:	004014cd 	.word	0x004014cd
  401148:	20400e50 	.word	0x20400e50
  40114c:	20400050 	.word	0x20400050

00401150 <aes_set_config>:
 * \param[in] p_cfg  Pointer to an AES configuration structure
 */
void aes_set_config(
		Aes *const p_aes,
		struct aes_config *const p_cfg)
{
  401150:	b470      	push	{r4, r5, r6}
	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_cfg);
	
	/* Set processing mode */
	if (p_cfg->encrypt_mode) {
  401152:	780b      	ldrb	r3, [r1, #0]
  401154:	1c1c      	adds	r4, r3, #0
  401156:	bf18      	it	ne
  401158:	2401      	movne	r4, #1
		ul_mode |= AES_MR_CIPHER;
	}

	/* Active dual buffer in DMA mode */
	if (p_cfg->start_mode == AES_IDATAR0_START) {
  40115a:	788a      	ldrb	r2, [r1, #2]
  40115c:	2a02      	cmp	r2, #2
		ul_mode |= AES_MR_DUALBUFF_ACTIVE;
  40115e:	bf08      	it	eq
  401160:	f044 0408 	orreq.w	r4, r4, #8

	/* Set key size */
	ul_mode |= (p_cfg->key_size << AES_MR_KEYSIZE_Pos);

	/* Set Confidentiality mode */
	ul_mode |= (p_cfg->opmode << AES_MR_OPMOD_Pos);
  401164:	78cd      	ldrb	r5, [r1, #3]
	ul_mode |= (p_cfg->key_size << AES_MR_KEYSIZE_Pos);
  401166:	784e      	ldrb	r6, [r1, #1]
	ul_mode |= (p_cfg->start_mode << AES_MR_SMOD_Pos);
  401168:	0213      	lsls	r3, r2, #8

	/* Set CFB size */
	ul_mode |= (p_cfg->cfb_size << AES_MR_CFBS_Pos);
  40116a:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
  40116e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  401172:	790a      	ldrb	r2, [r1, #4]
  401174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401178:	4323      	orrs	r3, r4

	if (p_cfg->lod) {
  40117a:	794a      	ldrb	r2, [r1, #5]
  40117c:	b10a      	cbz	r2, 401182 <aes_set_config+0x32>
		ul_mode |= AES_MR_LOD;
  40117e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	}

	#if (SAM4C || SAM4CP || SAM4CM || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if ((p_cfg->opmode == AES_GCM_MODE) && (p_cfg->gtag_en == true)) {
  401182:	2d05      	cmp	r5, #5
  401184:	d008      	beq.n	401198 <aes_set_config+0x48>
		ul_mode |= AES_MR_GTAGEN;
	}
	#endif /* SAM4C || SAM4CP || SAM4CM */

	ul_mode |= AES_MR_PROCDLY(p_cfg->processing_delay);
  401186:	688a      	ldr	r2, [r1, #8]
  401188:	0112      	lsls	r2, r2, #4
  40118a:	b2d2      	uxtb	r2, r2

	ul_mode |= AES_MR_CKEY_PASSWD;
  40118c:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401190:	4313      	orrs	r3, r2

	p_aes->AES_MR = ul_mode;
  401192:	6043      	str	r3, [r0, #4]
}
  401194:	bc70      	pop	{r4, r5, r6}
  401196:	4770      	bx	lr
	if ((p_cfg->opmode == AES_GCM_MODE) && (p_cfg->gtag_en == true)) {
  401198:	798a      	ldrb	r2, [r1, #6]
  40119a:	2a00      	cmp	r2, #0
  40119c:	d0f3      	beq.n	401186 <aes_set_config+0x36>
		ul_mode |= AES_MR_GTAGEN;
  40119e:	f043 0302 	orr.w	r3, r3, #2
  4011a2:	e7f0      	b.n	401186 <aes_set_config+0x36>

004011a4 <aes_init>:
{
  4011a4:	b538      	push	{r3, r4, r5, lr}
  4011a6:	4604      	mov	r4, r0
  4011a8:	460d      	mov	r5, r1
  4011aa:	2038      	movs	r0, #56	; 0x38
  4011ac:	4b06      	ldr	r3, [pc, #24]	; (4011c8 <aes_init+0x24>)
  4011ae:	4798      	blx	r3
 *
 * \param[out] p_aes Module hardware register base address pointer
 */
static inline void aes_reset(Aes *const p_aes)
{
	p_aes->AES_CR = AES_CR_SWRST;
  4011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
  4011b4:	6023      	str	r3, [r4, #0]
	aes_set_config(p_aes, p_cfg);
  4011b6:	4629      	mov	r1, r5
  4011b8:	4620      	mov	r0, r4
  4011ba:	4b04      	ldr	r3, [pc, #16]	; (4011cc <aes_init+0x28>)
  4011bc:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
  4011be:	2038      	movs	r0, #56	; 0x38
  4011c0:	4b03      	ldr	r3, [pc, #12]	; (4011d0 <aes_init+0x2c>)
  4011c2:	4798      	blx	r3
  4011c4:	bd38      	pop	{r3, r4, r5, pc}
  4011c6:	bf00      	nop
  4011c8:	004014cd 	.word	0x004014cd
  4011cc:	00401151 	.word	0x00401151
  4011d0:	00401521 	.word	0x00401521

004011d4 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		Aes *const p_aes,
		const uint32_t *p_key)
{
  4011d4:	b430      	push	{r4, r5}

	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_key);
	
	switch ((p_aes->AES_MR & AES_MR_KEYSIZE_Msk) >>
  4011d6:	6843      	ldr	r3, [r0, #4]
  4011d8:	f3c3 2381 	ubfx	r3, r3, #10, #2
  4011dc:	2b01      	cmp	r3, #1
  4011de:	d004      	beq.n	4011ea <aes_write_key+0x16>
  4011e0:	b183      	cbz	r3, 401204 <aes_write_key+0x30>
  4011e2:	2b02      	cmp	r3, #2
  4011e4:	d10c      	bne.n	401200 <aes_write_key+0x2c>
	case 1: /* 192bit cryptographic key */
		key_length = 6;
		break;

	case 2: /* 256bit cryptographic key */
		key_length = 8;
  4011e6:	2508      	movs	r5, #8
  4011e8:	e000      	b.n	4011ec <aes_write_key+0x18>
		key_length = 6;
  4011ea:	2506      	movs	r5, #6
{
  4011ec:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		p_aes->AES_KEYWR[i] = *p_key;
  4011ee:	f851 4b04 	ldr.w	r4, [r1], #4
  4011f2:	f103 0208 	add.w	r2, r3, #8
  4011f6:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = 0; i < key_length; i++) {
  4011fa:	3301      	adds	r3, #1
  4011fc:	42ab      	cmp	r3, r5
  4011fe:	d3f6      	bcc.n	4011ee <aes_write_key+0x1a>
		p_key++;
	}
}
  401200:	bc30      	pop	{r4, r5}
  401202:	4770      	bx	lr
		key_length = 4;
  401204:	2504      	movs	r5, #4
  401206:	e7f1      	b.n	4011ec <aes_write_key+0x18>

00401208 <aes_write_initvector>:
 * \param[in] p_vector Pointer to four contiguous 32-bit words
 */
void aes_write_initvector(
		Aes *const p_aes,
		const uint32_t *p_vector)
{
  401208:	b410      	push	{r4}
	uint32_t i;

	/* Validate arguments. */
	Assert(p_aes);
	
	for (i = 0; i < 4; i++) {
  40120a:	2300      	movs	r3, #0
		p_aes->AES_IVR[i] = *p_vector;
  40120c:	f851 4b04 	ldr.w	r4, [r1], #4
  401210:	f103 0218 	add.w	r2, r3, #24
  401214:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = 0; i < 4; i++) {
  401218:	3301      	adds	r3, #1
  40121a:	2b04      	cmp	r3, #4
  40121c:	d1f6      	bne.n	40120c <aes_write_initvector+0x4>
		p_vector++;
	}
}
  40121e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401222:	4770      	bx	lr

00401224 <aes_write_input_data>:
 * \param[in] p_input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		Aes *const p_aes,
		const uint32_t *p_input_data_buffer)
{
  401224:	b410      	push	{r4}

	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_input_data_buffer);
	
	for (i = 0; i < 4; i++) {
  401226:	2300      	movs	r3, #0
		p_aes->AES_IDATAR[i] = *p_input_data_buffer;
  401228:	f851 4b04 	ldr.w	r4, [r1], #4
  40122c:	f103 0210 	add.w	r2, r3, #16
  401230:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = 0; i < 4; i++) {
  401234:	3301      	adds	r3, #1
  401236:	2b04      	cmp	r3, #4
  401238:	d1f6      	bne.n	401228 <aes_write_input_data+0x4>
		p_input_data_buffer++;
	}
}
  40123a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40123e:	4770      	bx	lr

00401240 <aes_read_output_data>:

	/* Validate arguments. */
	Assert(p_aes);
	Assert(p_output_data_buffer);
	
	for (i = 0; i < 4; i++) {
  401240:	2300      	movs	r3, #0
		*p_output_data_buffer = p_aes->AES_ODATAR[i];
  401242:	f103 0214 	add.w	r2, r3, #20
  401246:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  40124a:	f841 2b04 	str.w	r2, [r1], #4
	for (i = 0; i < 4; i++) {
  40124e:	3301      	adds	r3, #1
  401250:	2b04      	cmp	r3, #4
  401252:	d1f6      	bne.n	401242 <aes_read_output_data+0x2>
		p_output_data_buffer++;
	}
}
  401254:	4770      	bx	lr
	...

00401258 <aes_set_callback>:
void aes_set_callback(
		Aes *const p_aes,
		aes_interrupt_source_t source,
		aes_callback_t callback,
		uint8_t irq_level)
{
  401258:	b410      	push	{r4}
	/* Validate arguments. */
	Assert(p_aes);
	
	if (source == AES_INTERRUPT_DATA_READY) {
  40125a:	2901      	cmp	r1, #1
  40125c:	d013      	beq.n	401286 <aes_set_callback+0x2e>
		aes_callback_pointer[0] = callback;
	} else if (source == AES_INTERRUPT_UNSPECIFIED_REGISTER_ACCESS) {
  40125e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  401262:	d013      	beq.n	40128c <aes_set_callback+0x34>
		aes_callback_pointer[4] = callback;
	} else if (source == AES_INTERRUPT_TRANSMIT_BUFFER_FULL) {
		aes_callback_pointer[5] = callback;
	}
#elif SAMV70 || SAMV71 || SAME70 || SAMS70
	else if ((source == AES_INTERRUPT_TAG_READY)) {
  401264:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  401268:	d013      	beq.n	401292 <aes_set_callback+0x3a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40126a:	4a0b      	ldr	r2, [pc, #44]	; (401298 <aes_set_callback+0x40>)
  40126c:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
  401270:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401274:	015b      	lsls	r3, r3, #5
  401276:	b2db      	uxtb	r3, r3
  401278:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40127c:	6054      	str	r4, [r2, #4]
 * \param[in] source \ref aes_interrupt_source "Interrupt source"
 */
static inline void aes_enable_interrupt(Aes *const p_aes,
		aes_interrupt_source_t source)
{
	p_aes->AES_IER = (uint32_t)source;
  40127e:	6101      	str	r1, [r0, #16]
		aes_callback_pointer[2] = callback;
	}
#endif /* SAM4C || SAM4CP || SAM4CM */
	irq_register_handler((IRQn_Type)AES_IRQn, irq_level);
	aes_enable_interrupt(p_aes, source);
}
  401280:	f85d 4b04 	ldr.w	r4, [sp], #4
  401284:	4770      	bx	lr
		aes_callback_pointer[0] = callback;
  401286:	4c05      	ldr	r4, [pc, #20]	; (40129c <aes_set_callback+0x44>)
  401288:	6022      	str	r2, [r4, #0]
  40128a:	e7ee      	b.n	40126a <aes_set_callback+0x12>
		aes_callback_pointer[1] = callback;
  40128c:	4c03      	ldr	r4, [pc, #12]	; (40129c <aes_set_callback+0x44>)
  40128e:	6062      	str	r2, [r4, #4]
  401290:	e7eb      	b.n	40126a <aes_set_callback+0x12>
		aes_callback_pointer[2] = callback;
  401292:	4c02      	ldr	r4, [pc, #8]	; (40129c <aes_set_callback+0x44>)
  401294:	60a2      	str	r2, [r4, #8]
  401296:	e7e8      	b.n	40126a <aes_set_callback+0x12>
  401298:	e000e100 	.word	0xe000e100
  40129c:	20400e64 	.word	0x20400e64

004012a0 <AES_Handler>:

/**
 * \internal The AES interrupt handler.
 */
void AES_Handler(void)
{
  4012a0:	b538      	push	{r3, r4, r5, lr}
	return p_aes->AES_ISR;
  4012a2:	4b11      	ldr	r3, [pc, #68]	; (4012e8 <AES_Handler+0x48>)
  4012a4:	69dc      	ldr	r4, [r3, #28]
 *
 * \return The AES interrupt mask contents.
 */
static inline uint32_t aes_read_interrupt_mask(Aes *const p_aes)
{
	return p_aes->AES_IMR;
  4012a6:	699d      	ldr	r5, [r3, #24]
	uint32_t status = aes_read_interrupt_status(AES);
	uint32_t mask = aes_read_interrupt_mask(AES);

	if ((status & AES_ISR_DATRDY) && (mask & AES_IMR_DATRDY)) {
  4012a8:	f014 0f01 	tst.w	r4, #1
  4012ac:	d006      	beq.n	4012bc <AES_Handler+0x1c>
  4012ae:	f015 0f01 	tst.w	r5, #1
  4012b2:	d003      	beq.n	4012bc <AES_Handler+0x1c>
		if (aes_callback_pointer[0]) {
  4012b4:	4b0d      	ldr	r3, [pc, #52]	; (4012ec <AES_Handler+0x4c>)
  4012b6:	681b      	ldr	r3, [r3, #0]
  4012b8:	b103      	cbz	r3, 4012bc <AES_Handler+0x1c>
			aes_callback_pointer[0]();
  4012ba:	4798      	blx	r3
		}
	}

	if ((status & AES_ISR_URAD) && (mask & AES_IMR_URAD)) {
  4012bc:	f414 7f80 	tst.w	r4, #256	; 0x100
  4012c0:	d006      	beq.n	4012d0 <AES_Handler+0x30>
  4012c2:	f415 7f80 	tst.w	r5, #256	; 0x100
  4012c6:	d003      	beq.n	4012d0 <AES_Handler+0x30>
		if (aes_callback_pointer[1]) {
  4012c8:	4b08      	ldr	r3, [pc, #32]	; (4012ec <AES_Handler+0x4c>)
  4012ca:	685b      	ldr	r3, [r3, #4]
  4012cc:	b103      	cbz	r3, 4012d0 <AES_Handler+0x30>
			aes_callback_pointer[1]();
  4012ce:	4798      	blx	r3
		if (aes_callback_pointer[5]) {
			aes_callback_pointer[5]();
		}
	}
#elif SAMV70 || SAMV71 || SAME70 || SAMS70
	if ((status & AES_IER_TAGRDY) && (mask & AES_IER_TAGRDY)) {
  4012d0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
  4012d4:	d006      	beq.n	4012e4 <AES_Handler+0x44>
  4012d6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
  4012da:	d003      	beq.n	4012e4 <AES_Handler+0x44>
		if (aes_callback_pointer[2]) {
  4012dc:	4b03      	ldr	r3, [pc, #12]	; (4012ec <AES_Handler+0x4c>)
  4012de:	689b      	ldr	r3, [r3, #8]
  4012e0:	b103      	cbz	r3, 4012e4 <AES_Handler+0x44>
			aes_callback_pointer[2]();
  4012e2:	4798      	blx	r3
  4012e4:	bd38      	pop	{r3, r4, r5, pc}
  4012e6:	bf00      	nop
  4012e8:	4006c000 	.word	0x4006c000
  4012ec:	20400e64 	.word	0x20400e64

004012f0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4012f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4012f2:	4770      	bx	lr

004012f4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4012f4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4012f6:	4770      	bx	lr

004012f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012fc:	4604      	mov	r4, r0
  4012fe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401300:	4b0e      	ldr	r3, [pc, #56]	; (40133c <pio_handler_process+0x44>)
  401302:	4798      	blx	r3
  401304:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401306:	4620      	mov	r0, r4
  401308:	4b0d      	ldr	r3, [pc, #52]	; (401340 <pio_handler_process+0x48>)
  40130a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40130c:	4005      	ands	r5, r0
  40130e:	d013      	beq.n	401338 <pio_handler_process+0x40>
  401310:	4c0c      	ldr	r4, [pc, #48]	; (401344 <pio_handler_process+0x4c>)
  401312:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401316:	e003      	b.n	401320 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401318:	42b4      	cmp	r4, r6
  40131a:	d00d      	beq.n	401338 <pio_handler_process+0x40>
  40131c:	3410      	adds	r4, #16
		while (status != 0) {
  40131e:	b15d      	cbz	r5, 401338 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401320:	6820      	ldr	r0, [r4, #0]
  401322:	4540      	cmp	r0, r8
  401324:	d1f8      	bne.n	401318 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401326:	6861      	ldr	r1, [r4, #4]
  401328:	4229      	tst	r1, r5
  40132a:	d0f5      	beq.n	401318 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40132c:	68e3      	ldr	r3, [r4, #12]
  40132e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401330:	6863      	ldr	r3, [r4, #4]
  401332:	ea25 0503 	bic.w	r5, r5, r3
  401336:	e7ef      	b.n	401318 <pio_handler_process+0x20>
  401338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40133c:	004012f1 	.word	0x004012f1
  401340:	004012f5 	.word	0x004012f5
  401344:	20400a78 	.word	0x20400a78

00401348 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401348:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40134a:	210a      	movs	r1, #10
  40134c:	4801      	ldr	r0, [pc, #4]	; (401354 <PIOA_Handler+0xc>)
  40134e:	4b02      	ldr	r3, [pc, #8]	; (401358 <PIOA_Handler+0x10>)
  401350:	4798      	blx	r3
  401352:	bd08      	pop	{r3, pc}
  401354:	400e0e00 	.word	0x400e0e00
  401358:	004012f9 	.word	0x004012f9

0040135c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40135c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40135e:	210b      	movs	r1, #11
  401360:	4801      	ldr	r0, [pc, #4]	; (401368 <PIOB_Handler+0xc>)
  401362:	4b02      	ldr	r3, [pc, #8]	; (40136c <PIOB_Handler+0x10>)
  401364:	4798      	blx	r3
  401366:	bd08      	pop	{r3, pc}
  401368:	400e1000 	.word	0x400e1000
  40136c:	004012f9 	.word	0x004012f9

00401370 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401370:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401372:	210c      	movs	r1, #12
  401374:	4801      	ldr	r0, [pc, #4]	; (40137c <PIOC_Handler+0xc>)
  401376:	4b02      	ldr	r3, [pc, #8]	; (401380 <PIOC_Handler+0x10>)
  401378:	4798      	blx	r3
  40137a:	bd08      	pop	{r3, pc}
  40137c:	400e1200 	.word	0x400e1200
  401380:	004012f9 	.word	0x004012f9

00401384 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401384:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401386:	2110      	movs	r1, #16
  401388:	4801      	ldr	r0, [pc, #4]	; (401390 <PIOD_Handler+0xc>)
  40138a:	4b02      	ldr	r3, [pc, #8]	; (401394 <PIOD_Handler+0x10>)
  40138c:	4798      	blx	r3
  40138e:	bd08      	pop	{r3, pc}
  401390:	400e1400 	.word	0x400e1400
  401394:	004012f9 	.word	0x004012f9

00401398 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401398:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40139a:	2111      	movs	r1, #17
  40139c:	4801      	ldr	r0, [pc, #4]	; (4013a4 <PIOE_Handler+0xc>)
  40139e:	4b02      	ldr	r3, [pc, #8]	; (4013a8 <PIOE_Handler+0x10>)
  4013a0:	4798      	blx	r3
  4013a2:	bd08      	pop	{r3, pc}
  4013a4:	400e1600 	.word	0x400e1600
  4013a8:	004012f9 	.word	0x004012f9

004013ac <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4013ac:	2803      	cmp	r0, #3
  4013ae:	d011      	beq.n	4013d4 <pmc_mck_set_division+0x28>
  4013b0:	2804      	cmp	r0, #4
  4013b2:	d012      	beq.n	4013da <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4013b4:	2802      	cmp	r0, #2
  4013b6:	bf0c      	ite	eq
  4013b8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4013bc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4013be:	4a08      	ldr	r2, [pc, #32]	; (4013e0 <pmc_mck_set_division+0x34>)
  4013c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4013c6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4013c8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013cc:	f013 0f08 	tst.w	r3, #8
  4013d0:	d0fb      	beq.n	4013ca <pmc_mck_set_division+0x1e>
}
  4013d2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4013d4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4013d8:	e7f1      	b.n	4013be <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4013da:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4013de:	e7ee      	b.n	4013be <pmc_mck_set_division+0x12>
  4013e0:	400e0600 	.word	0x400e0600

004013e4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013e4:	4a17      	ldr	r2, [pc, #92]	; (401444 <pmc_switch_mck_to_pllack+0x60>)
  4013e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4013ec:	4318      	orrs	r0, r3
  4013ee:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013f2:	f013 0f08 	tst.w	r3, #8
  4013f6:	d10a      	bne.n	40140e <pmc_switch_mck_to_pllack+0x2a>
  4013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013fc:	4911      	ldr	r1, [pc, #68]	; (401444 <pmc_switch_mck_to_pllack+0x60>)
  4013fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401400:	f012 0f08 	tst.w	r2, #8
  401404:	d103      	bne.n	40140e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401406:	3b01      	subs	r3, #1
  401408:	d1f9      	bne.n	4013fe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40140a:	2001      	movs	r0, #1
  40140c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40140e:	4a0d      	ldr	r2, [pc, #52]	; (401444 <pmc_switch_mck_to_pllack+0x60>)
  401410:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401412:	f023 0303 	bic.w	r3, r3, #3
  401416:	f043 0302 	orr.w	r3, r3, #2
  40141a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40141c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40141e:	f013 0f08 	tst.w	r3, #8
  401422:	d10a      	bne.n	40143a <pmc_switch_mck_to_pllack+0x56>
  401424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401428:	4906      	ldr	r1, [pc, #24]	; (401444 <pmc_switch_mck_to_pllack+0x60>)
  40142a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40142c:	f012 0f08 	tst.w	r2, #8
  401430:	d105      	bne.n	40143e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401432:	3b01      	subs	r3, #1
  401434:	d1f9      	bne.n	40142a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401436:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401438:	4770      	bx	lr
	return 0;
  40143a:	2000      	movs	r0, #0
  40143c:	4770      	bx	lr
  40143e:	2000      	movs	r0, #0
  401440:	4770      	bx	lr
  401442:	bf00      	nop
  401444:	400e0600 	.word	0x400e0600

00401448 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401448:	b9a0      	cbnz	r0, 401474 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40144a:	480e      	ldr	r0, [pc, #56]	; (401484 <pmc_switch_mainck_to_xtal+0x3c>)
  40144c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40144e:	0209      	lsls	r1, r1, #8
  401450:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401452:	4a0d      	ldr	r2, [pc, #52]	; (401488 <pmc_switch_mainck_to_xtal+0x40>)
  401454:	401a      	ands	r2, r3
  401456:	4b0d      	ldr	r3, [pc, #52]	; (40148c <pmc_switch_mainck_to_xtal+0x44>)
  401458:	4313      	orrs	r3, r2
  40145a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40145c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40145e:	4602      	mov	r2, r0
  401460:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401462:	f013 0f01 	tst.w	r3, #1
  401466:	d0fb      	beq.n	401460 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401468:	4a06      	ldr	r2, [pc, #24]	; (401484 <pmc_switch_mainck_to_xtal+0x3c>)
  40146a:	6a11      	ldr	r1, [r2, #32]
  40146c:	4b08      	ldr	r3, [pc, #32]	; (401490 <pmc_switch_mainck_to_xtal+0x48>)
  40146e:	430b      	orrs	r3, r1
  401470:	6213      	str	r3, [r2, #32]
  401472:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401474:	4903      	ldr	r1, [pc, #12]	; (401484 <pmc_switch_mainck_to_xtal+0x3c>)
  401476:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401478:	4a06      	ldr	r2, [pc, #24]	; (401494 <pmc_switch_mainck_to_xtal+0x4c>)
  40147a:	401a      	ands	r2, r3
  40147c:	4b06      	ldr	r3, [pc, #24]	; (401498 <pmc_switch_mainck_to_xtal+0x50>)
  40147e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401480:	620b      	str	r3, [r1, #32]
  401482:	4770      	bx	lr
  401484:	400e0600 	.word	0x400e0600
  401488:	ffc8fffc 	.word	0xffc8fffc
  40148c:	00370001 	.word	0x00370001
  401490:	01370000 	.word	0x01370000
  401494:	fec8fffc 	.word	0xfec8fffc
  401498:	01370002 	.word	0x01370002

0040149c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40149c:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <pmc_osc_is_ready_mainck+0xc>)
  40149e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014a0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4014a4:	4770      	bx	lr
  4014a6:	bf00      	nop
  4014a8:	400e0600 	.word	0x400e0600

004014ac <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4014ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4014b0:	4b01      	ldr	r3, [pc, #4]	; (4014b8 <pmc_disable_pllack+0xc>)
  4014b2:	629a      	str	r2, [r3, #40]	; 0x28
  4014b4:	4770      	bx	lr
  4014b6:	bf00      	nop
  4014b8:	400e0600 	.word	0x400e0600

004014bc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4014bc:	4b02      	ldr	r3, [pc, #8]	; (4014c8 <pmc_is_locked_pllack+0xc>)
  4014be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014c0:	f000 0002 	and.w	r0, r0, #2
  4014c4:	4770      	bx	lr
  4014c6:	bf00      	nop
  4014c8:	400e0600 	.word	0x400e0600

004014cc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4014cc:	283f      	cmp	r0, #63	; 0x3f
  4014ce:	d81e      	bhi.n	40150e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4014d0:	281f      	cmp	r0, #31
  4014d2:	d80c      	bhi.n	4014ee <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4014d4:	4b11      	ldr	r3, [pc, #68]	; (40151c <pmc_enable_periph_clk+0x50>)
  4014d6:	699a      	ldr	r2, [r3, #24]
  4014d8:	2301      	movs	r3, #1
  4014da:	4083      	lsls	r3, r0
  4014dc:	4393      	bics	r3, r2
  4014de:	d018      	beq.n	401512 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4014e0:	2301      	movs	r3, #1
  4014e2:	fa03 f000 	lsl.w	r0, r3, r0
  4014e6:	4b0d      	ldr	r3, [pc, #52]	; (40151c <pmc_enable_periph_clk+0x50>)
  4014e8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4014ea:	2000      	movs	r0, #0
  4014ec:	4770      	bx	lr
		ul_id -= 32;
  4014ee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4014f0:	4b0a      	ldr	r3, [pc, #40]	; (40151c <pmc_enable_periph_clk+0x50>)
  4014f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4014f6:	2301      	movs	r3, #1
  4014f8:	4083      	lsls	r3, r0
  4014fa:	4393      	bics	r3, r2
  4014fc:	d00b      	beq.n	401516 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4014fe:	2301      	movs	r3, #1
  401500:	fa03 f000 	lsl.w	r0, r3, r0
  401504:	4b05      	ldr	r3, [pc, #20]	; (40151c <pmc_enable_periph_clk+0x50>)
  401506:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40150a:	2000      	movs	r0, #0
  40150c:	4770      	bx	lr
		return 1;
  40150e:	2001      	movs	r0, #1
  401510:	4770      	bx	lr
	return 0;
  401512:	2000      	movs	r0, #0
  401514:	4770      	bx	lr
  401516:	2000      	movs	r0, #0
}
  401518:	4770      	bx	lr
  40151a:	bf00      	nop
  40151c:	400e0600 	.word	0x400e0600

00401520 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401520:	283f      	cmp	r0, #63	; 0x3f
  401522:	d822      	bhi.n	40156a <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  401524:	281f      	cmp	r0, #31
  401526:	d80e      	bhi.n	401546 <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  401528:	4b11      	ldr	r3, [pc, #68]	; (401570 <pmc_disable_periph_clk+0x50>)
  40152a:	699a      	ldr	r2, [r3, #24]
  40152c:	2301      	movs	r3, #1
  40152e:	4083      	lsls	r3, r0
  401530:	4393      	bics	r3, r2
  401532:	d001      	beq.n	401538 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401534:	2000      	movs	r0, #0
  401536:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  401538:	2301      	movs	r3, #1
  40153a:	fa03 f000 	lsl.w	r0, r3, r0
  40153e:	4b0c      	ldr	r3, [pc, #48]	; (401570 <pmc_disable_periph_clk+0x50>)
  401540:	6158      	str	r0, [r3, #20]
	return 0;
  401542:	2000      	movs	r0, #0
  401544:	4770      	bx	lr
		ul_id -= 32;
  401546:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  401548:	4b09      	ldr	r3, [pc, #36]	; (401570 <pmc_disable_periph_clk+0x50>)
  40154a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40154e:	2301      	movs	r3, #1
  401550:	4083      	lsls	r3, r0
  401552:	4393      	bics	r3, r2
  401554:	d001      	beq.n	40155a <pmc_disable_periph_clk+0x3a>
	return 0;
  401556:	2000      	movs	r0, #0
}
  401558:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  40155a:	2301      	movs	r3, #1
  40155c:	fa03 f000 	lsl.w	r0, r3, r0
  401560:	4b03      	ldr	r3, [pc, #12]	; (401570 <pmc_disable_periph_clk+0x50>)
  401562:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  401566:	2000      	movs	r0, #0
  401568:	4770      	bx	lr
		return 1;
  40156a:	2001      	movs	r0, #1
  40156c:	4770      	bx	lr
  40156e:	bf00      	nop
  401570:	400e0600 	.word	0x400e0600

00401574 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401574:	6943      	ldr	r3, [r0, #20]
  401576:	f013 0f02 	tst.w	r3, #2
  40157a:	d002      	beq.n	401582 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40157c:	61c1      	str	r1, [r0, #28]
	return 0;
  40157e:	2000      	movs	r0, #0
  401580:	4770      	bx	lr
		return 1;
  401582:	2001      	movs	r0, #1
}
  401584:	4770      	bx	lr

00401586 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401586:	6943      	ldr	r3, [r0, #20]
  401588:	f013 0f01 	tst.w	r3, #1
  40158c:	d003      	beq.n	401596 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40158e:	6983      	ldr	r3, [r0, #24]
  401590:	700b      	strb	r3, [r1, #0]
	return 0;
  401592:	2000      	movs	r0, #0
  401594:	4770      	bx	lr
		return 1;
  401596:	2001      	movs	r0, #1
}
  401598:	4770      	bx	lr

0040159a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40159a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40159c:	010b      	lsls	r3, r1, #4
  40159e:	4293      	cmp	r3, r2
  4015a0:	d914      	bls.n	4015cc <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015a2:	00c9      	lsls	r1, r1, #3
  4015a4:	084b      	lsrs	r3, r1, #1
  4015a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4015aa:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4015ae:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4015b0:	1e5c      	subs	r4, r3, #1
  4015b2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4015b6:	428c      	cmp	r4, r1
  4015b8:	d901      	bls.n	4015be <usart_set_async_baudrate+0x24>
		return 1;
  4015ba:	2001      	movs	r0, #1
  4015bc:	e017      	b.n	4015ee <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4015be:	6841      	ldr	r1, [r0, #4]
  4015c0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4015c4:	6041      	str	r1, [r0, #4]
  4015c6:	e00c      	b.n	4015e2 <usart_set_async_baudrate+0x48>
		return 1;
  4015c8:	2001      	movs	r0, #1
  4015ca:	e010      	b.n	4015ee <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4015cc:	0859      	lsrs	r1, r3, #1
  4015ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4015d2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4015d6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4015d8:	1e5c      	subs	r4, r3, #1
  4015da:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4015de:	428c      	cmp	r4, r1
  4015e0:	d8f2      	bhi.n	4015c8 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4015e2:	0412      	lsls	r2, r2, #16
  4015e4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4015e8:	431a      	orrs	r2, r3
  4015ea:	6202      	str	r2, [r0, #32]

	return 0;
  4015ec:	2000      	movs	r0, #0
}
  4015ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4015f2:	4770      	bx	lr

004015f4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4015f4:	4b08      	ldr	r3, [pc, #32]	; (401618 <usart_reset+0x24>)
  4015f6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4015fa:	2300      	movs	r3, #0
  4015fc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4015fe:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401600:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401602:	2388      	movs	r3, #136	; 0x88
  401604:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401606:	2324      	movs	r3, #36	; 0x24
  401608:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40160a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40160e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401614:	6003      	str	r3, [r0, #0]
  401616:	4770      	bx	lr
  401618:	55534100 	.word	0x55534100

0040161c <usart_init_rs232>:
{
  40161c:	b570      	push	{r4, r5, r6, lr}
  40161e:	4605      	mov	r5, r0
  401620:	460c      	mov	r4, r1
  401622:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401624:	4b0f      	ldr	r3, [pc, #60]	; (401664 <usart_init_rs232+0x48>)
  401626:	4798      	blx	r3
	ul_reg_val = 0;
  401628:	2200      	movs	r2, #0
  40162a:	4b0f      	ldr	r3, [pc, #60]	; (401668 <usart_init_rs232+0x4c>)
  40162c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40162e:	b1a4      	cbz	r4, 40165a <usart_init_rs232+0x3e>
  401630:	4632      	mov	r2, r6
  401632:	6821      	ldr	r1, [r4, #0]
  401634:	4628      	mov	r0, r5
  401636:	4b0d      	ldr	r3, [pc, #52]	; (40166c <usart_init_rs232+0x50>)
  401638:	4798      	blx	r3
  40163a:	4602      	mov	r2, r0
  40163c:	b978      	cbnz	r0, 40165e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40163e:	6863      	ldr	r3, [r4, #4]
  401640:	68a1      	ldr	r1, [r4, #8]
  401642:	430b      	orrs	r3, r1
  401644:	6921      	ldr	r1, [r4, #16]
  401646:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401648:	68e1      	ldr	r1, [r4, #12]
  40164a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40164c:	4906      	ldr	r1, [pc, #24]	; (401668 <usart_init_rs232+0x4c>)
  40164e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401650:	6869      	ldr	r1, [r5, #4]
  401652:	430b      	orrs	r3, r1
  401654:	606b      	str	r3, [r5, #4]
}
  401656:	4610      	mov	r0, r2
  401658:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40165a:	2201      	movs	r2, #1
  40165c:	e7fb      	b.n	401656 <usart_init_rs232+0x3a>
  40165e:	2201      	movs	r2, #1
  401660:	e7f9      	b.n	401656 <usart_init_rs232+0x3a>
  401662:	bf00      	nop
  401664:	004015f5 	.word	0x004015f5
  401668:	20400ae8 	.word	0x20400ae8
  40166c:	0040159b 	.word	0x0040159b

00401670 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401670:	2340      	movs	r3, #64	; 0x40
  401672:	6003      	str	r3, [r0, #0]
  401674:	4770      	bx	lr

00401676 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401676:	2310      	movs	r3, #16
  401678:	6003      	str	r3, [r0, #0]
  40167a:	4770      	bx	lr

0040167c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40167c:	6943      	ldr	r3, [r0, #20]
  40167e:	f013 0f02 	tst.w	r3, #2
  401682:	d004      	beq.n	40168e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401684:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401688:	61c1      	str	r1, [r0, #28]
	return 0;
  40168a:	2000      	movs	r0, #0
  40168c:	4770      	bx	lr
		return 1;
  40168e:	2001      	movs	r0, #1
}
  401690:	4770      	bx	lr

00401692 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401692:	6943      	ldr	r3, [r0, #20]
  401694:	f013 0f01 	tst.w	r3, #1
  401698:	d005      	beq.n	4016a6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40169a:	6983      	ldr	r3, [r0, #24]
  40169c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4016a0:	600b      	str	r3, [r1, #0]
	return 0;
  4016a2:	2000      	movs	r0, #0
  4016a4:	4770      	bx	lr
		return 1;
  4016a6:	2001      	movs	r0, #1
}
  4016a8:	4770      	bx	lr

004016aa <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4016aa:	e7fe      	b.n	4016aa <Dummy_Handler>

004016ac <Reset_Handler>:
{
  4016ac:	b500      	push	{lr}
  4016ae:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4016b0:	4b25      	ldr	r3, [pc, #148]	; (401748 <Reset_Handler+0x9c>)
  4016b2:	4a26      	ldr	r2, [pc, #152]	; (40174c <Reset_Handler+0xa0>)
  4016b4:	429a      	cmp	r2, r3
  4016b6:	d010      	beq.n	4016da <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4016b8:	4b25      	ldr	r3, [pc, #148]	; (401750 <Reset_Handler+0xa4>)
  4016ba:	4a23      	ldr	r2, [pc, #140]	; (401748 <Reset_Handler+0x9c>)
  4016bc:	429a      	cmp	r2, r3
  4016be:	d20c      	bcs.n	4016da <Reset_Handler+0x2e>
  4016c0:	3b01      	subs	r3, #1
  4016c2:	1a9b      	subs	r3, r3, r2
  4016c4:	f023 0303 	bic.w	r3, r3, #3
  4016c8:	3304      	adds	r3, #4
  4016ca:	4413      	add	r3, r2
  4016cc:	491f      	ldr	r1, [pc, #124]	; (40174c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4016ce:	f851 0b04 	ldr.w	r0, [r1], #4
  4016d2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4016d6:	429a      	cmp	r2, r3
  4016d8:	d1f9      	bne.n	4016ce <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4016da:	4b1e      	ldr	r3, [pc, #120]	; (401754 <Reset_Handler+0xa8>)
  4016dc:	4a1e      	ldr	r2, [pc, #120]	; (401758 <Reset_Handler+0xac>)
  4016de:	429a      	cmp	r2, r3
  4016e0:	d20a      	bcs.n	4016f8 <Reset_Handler+0x4c>
  4016e2:	3b01      	subs	r3, #1
  4016e4:	1a9b      	subs	r3, r3, r2
  4016e6:	f023 0303 	bic.w	r3, r3, #3
  4016ea:	3304      	adds	r3, #4
  4016ec:	4413      	add	r3, r2
                *pDest++ = 0;
  4016ee:	2100      	movs	r1, #0
  4016f0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4016f4:	4293      	cmp	r3, r2
  4016f6:	d1fb      	bne.n	4016f0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4016f8:	4a18      	ldr	r2, [pc, #96]	; (40175c <Reset_Handler+0xb0>)
  4016fa:	4b19      	ldr	r3, [pc, #100]	; (401760 <Reset_Handler+0xb4>)
  4016fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401700:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401702:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401706:	fab3 f383 	clz	r3, r3
  40170a:	095b      	lsrs	r3, r3, #5
  40170c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40170e:	b672      	cpsid	i
  401710:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401714:	2200      	movs	r2, #0
  401716:	4b13      	ldr	r3, [pc, #76]	; (401764 <Reset_Handler+0xb8>)
  401718:	701a      	strb	r2, [r3, #0]
	return flags;
  40171a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40171c:	4a12      	ldr	r2, [pc, #72]	; (401768 <Reset_Handler+0xbc>)
  40171e:	6813      	ldr	r3, [r2, #0]
  401720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401724:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401726:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40172a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40172e:	b129      	cbz	r1, 40173c <Reset_Handler+0x90>
		cpu_irq_enable();
  401730:	2201      	movs	r2, #1
  401732:	4b0c      	ldr	r3, [pc, #48]	; (401764 <Reset_Handler+0xb8>)
  401734:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401736:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40173a:	b662      	cpsie	i
        __libc_init_array();
  40173c:	4b0b      	ldr	r3, [pc, #44]	; (40176c <Reset_Handler+0xc0>)
  40173e:	4798      	blx	r3
        main();
  401740:	4b0b      	ldr	r3, [pc, #44]	; (401770 <Reset_Handler+0xc4>)
  401742:	4798      	blx	r3
  401744:	e7fe      	b.n	401744 <Reset_Handler+0x98>
  401746:	bf00      	nop
  401748:	20400000 	.word	0x20400000
  40174c:	0040657c 	.word	0x0040657c
  401750:	20400a08 	.word	0x20400a08
  401754:	20400e98 	.word	0x20400e98
  401758:	20400a08 	.word	0x20400a08
  40175c:	e000ed00 	.word	0xe000ed00
  401760:	00400000 	.word	0x00400000
  401764:	20400050 	.word	0x20400050
  401768:	e000ed88 	.word	0xe000ed88
  40176c:	0040195d 	.word	0x0040195d
  401770:	00400515 	.word	0x00400515

00401774 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401774:	4b3b      	ldr	r3, [pc, #236]	; (401864 <SystemCoreClockUpdate+0xf0>)
  401776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401778:	f003 0303 	and.w	r3, r3, #3
  40177c:	2b01      	cmp	r3, #1
  40177e:	d01d      	beq.n	4017bc <SystemCoreClockUpdate+0x48>
  401780:	b183      	cbz	r3, 4017a4 <SystemCoreClockUpdate+0x30>
  401782:	2b02      	cmp	r3, #2
  401784:	d036      	beq.n	4017f4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401786:	4b37      	ldr	r3, [pc, #220]	; (401864 <SystemCoreClockUpdate+0xf0>)
  401788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40178a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40178e:	2b70      	cmp	r3, #112	; 0x70
  401790:	d05f      	beq.n	401852 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401792:	4b34      	ldr	r3, [pc, #208]	; (401864 <SystemCoreClockUpdate+0xf0>)
  401794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401796:	4934      	ldr	r1, [pc, #208]	; (401868 <SystemCoreClockUpdate+0xf4>)
  401798:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40179c:	680b      	ldr	r3, [r1, #0]
  40179e:	40d3      	lsrs	r3, r2
  4017a0:	600b      	str	r3, [r1, #0]
  4017a2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4017a4:	4b31      	ldr	r3, [pc, #196]	; (40186c <SystemCoreClockUpdate+0xf8>)
  4017a6:	695b      	ldr	r3, [r3, #20]
  4017a8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4017ac:	bf14      	ite	ne
  4017ae:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4017b2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4017b6:	4b2c      	ldr	r3, [pc, #176]	; (401868 <SystemCoreClockUpdate+0xf4>)
  4017b8:	601a      	str	r2, [r3, #0]
  4017ba:	e7e4      	b.n	401786 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017bc:	4b29      	ldr	r3, [pc, #164]	; (401864 <SystemCoreClockUpdate+0xf0>)
  4017be:	6a1b      	ldr	r3, [r3, #32]
  4017c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4017c4:	d003      	beq.n	4017ce <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4017c6:	4a2a      	ldr	r2, [pc, #168]	; (401870 <SystemCoreClockUpdate+0xfc>)
  4017c8:	4b27      	ldr	r3, [pc, #156]	; (401868 <SystemCoreClockUpdate+0xf4>)
  4017ca:	601a      	str	r2, [r3, #0]
  4017cc:	e7db      	b.n	401786 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4017ce:	4a29      	ldr	r2, [pc, #164]	; (401874 <SystemCoreClockUpdate+0x100>)
  4017d0:	4b25      	ldr	r3, [pc, #148]	; (401868 <SystemCoreClockUpdate+0xf4>)
  4017d2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4017d4:	4b23      	ldr	r3, [pc, #140]	; (401864 <SystemCoreClockUpdate+0xf0>)
  4017d6:	6a1b      	ldr	r3, [r3, #32]
  4017d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017dc:	2b10      	cmp	r3, #16
  4017de:	d005      	beq.n	4017ec <SystemCoreClockUpdate+0x78>
  4017e0:	2b20      	cmp	r3, #32
  4017e2:	d1d0      	bne.n	401786 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4017e4:	4a22      	ldr	r2, [pc, #136]	; (401870 <SystemCoreClockUpdate+0xfc>)
  4017e6:	4b20      	ldr	r3, [pc, #128]	; (401868 <SystemCoreClockUpdate+0xf4>)
  4017e8:	601a      	str	r2, [r3, #0]
          break;
  4017ea:	e7cc      	b.n	401786 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4017ec:	4a22      	ldr	r2, [pc, #136]	; (401878 <SystemCoreClockUpdate+0x104>)
  4017ee:	4b1e      	ldr	r3, [pc, #120]	; (401868 <SystemCoreClockUpdate+0xf4>)
  4017f0:	601a      	str	r2, [r3, #0]
          break;
  4017f2:	e7c8      	b.n	401786 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4017f4:	4b1b      	ldr	r3, [pc, #108]	; (401864 <SystemCoreClockUpdate+0xf0>)
  4017f6:	6a1b      	ldr	r3, [r3, #32]
  4017f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4017fc:	d016      	beq.n	40182c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4017fe:	4a1c      	ldr	r2, [pc, #112]	; (401870 <SystemCoreClockUpdate+0xfc>)
  401800:	4b19      	ldr	r3, [pc, #100]	; (401868 <SystemCoreClockUpdate+0xf4>)
  401802:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401804:	4b17      	ldr	r3, [pc, #92]	; (401864 <SystemCoreClockUpdate+0xf0>)
  401806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401808:	f003 0303 	and.w	r3, r3, #3
  40180c:	2b02      	cmp	r3, #2
  40180e:	d1ba      	bne.n	401786 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401810:	4a14      	ldr	r2, [pc, #80]	; (401864 <SystemCoreClockUpdate+0xf0>)
  401812:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401814:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401816:	4814      	ldr	r0, [pc, #80]	; (401868 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401818:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40181c:	6803      	ldr	r3, [r0, #0]
  40181e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401822:	b2d2      	uxtb	r2, r2
  401824:	fbb3 f3f2 	udiv	r3, r3, r2
  401828:	6003      	str	r3, [r0, #0]
  40182a:	e7ac      	b.n	401786 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40182c:	4a11      	ldr	r2, [pc, #68]	; (401874 <SystemCoreClockUpdate+0x100>)
  40182e:	4b0e      	ldr	r3, [pc, #56]	; (401868 <SystemCoreClockUpdate+0xf4>)
  401830:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401832:	4b0c      	ldr	r3, [pc, #48]	; (401864 <SystemCoreClockUpdate+0xf0>)
  401834:	6a1b      	ldr	r3, [r3, #32]
  401836:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40183a:	2b10      	cmp	r3, #16
  40183c:	d005      	beq.n	40184a <SystemCoreClockUpdate+0xd6>
  40183e:	2b20      	cmp	r3, #32
  401840:	d1e0      	bne.n	401804 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401842:	4a0b      	ldr	r2, [pc, #44]	; (401870 <SystemCoreClockUpdate+0xfc>)
  401844:	4b08      	ldr	r3, [pc, #32]	; (401868 <SystemCoreClockUpdate+0xf4>)
  401846:	601a      	str	r2, [r3, #0]
          break;
  401848:	e7dc      	b.n	401804 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40184a:	4a0b      	ldr	r2, [pc, #44]	; (401878 <SystemCoreClockUpdate+0x104>)
  40184c:	4b06      	ldr	r3, [pc, #24]	; (401868 <SystemCoreClockUpdate+0xf4>)
  40184e:	601a      	str	r2, [r3, #0]
          break;
  401850:	e7d8      	b.n	401804 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401852:	4a05      	ldr	r2, [pc, #20]	; (401868 <SystemCoreClockUpdate+0xf4>)
  401854:	6813      	ldr	r3, [r2, #0]
  401856:	4909      	ldr	r1, [pc, #36]	; (40187c <SystemCoreClockUpdate+0x108>)
  401858:	fba1 1303 	umull	r1, r3, r1, r3
  40185c:	085b      	lsrs	r3, r3, #1
  40185e:	6013      	str	r3, [r2, #0]
  401860:	4770      	bx	lr
  401862:	bf00      	nop
  401864:	400e0600 	.word	0x400e0600
  401868:	20400054 	.word	0x20400054
  40186c:	400e1810 	.word	0x400e1810
  401870:	00b71b00 	.word	0x00b71b00
  401874:	003d0900 	.word	0x003d0900
  401878:	007a1200 	.word	0x007a1200
  40187c:	aaaaaaab 	.word	0xaaaaaaab

00401880 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401880:	4b16      	ldr	r3, [pc, #88]	; (4018dc <system_init_flash+0x5c>)
  401882:	4298      	cmp	r0, r3
  401884:	d913      	bls.n	4018ae <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401886:	4b16      	ldr	r3, [pc, #88]	; (4018e0 <system_init_flash+0x60>)
  401888:	4298      	cmp	r0, r3
  40188a:	d915      	bls.n	4018b8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40188c:	4b15      	ldr	r3, [pc, #84]	; (4018e4 <system_init_flash+0x64>)
  40188e:	4298      	cmp	r0, r3
  401890:	d916      	bls.n	4018c0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401892:	4b15      	ldr	r3, [pc, #84]	; (4018e8 <system_init_flash+0x68>)
  401894:	4298      	cmp	r0, r3
  401896:	d917      	bls.n	4018c8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401898:	4b14      	ldr	r3, [pc, #80]	; (4018ec <system_init_flash+0x6c>)
  40189a:	4298      	cmp	r0, r3
  40189c:	d918      	bls.n	4018d0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40189e:	4b14      	ldr	r3, [pc, #80]	; (4018f0 <system_init_flash+0x70>)
  4018a0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4018a2:	bf94      	ite	ls
  4018a4:	4a13      	ldrls	r2, [pc, #76]	; (4018f4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4018a6:	4a14      	ldrhi	r2, [pc, #80]	; (4018f8 <system_init_flash+0x78>)
  4018a8:	4b14      	ldr	r3, [pc, #80]	; (4018fc <system_init_flash+0x7c>)
  4018aa:	601a      	str	r2, [r3, #0]
  4018ac:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018b2:	4b12      	ldr	r3, [pc, #72]	; (4018fc <system_init_flash+0x7c>)
  4018b4:	601a      	str	r2, [r3, #0]
  4018b6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018b8:	4a11      	ldr	r2, [pc, #68]	; (401900 <system_init_flash+0x80>)
  4018ba:	4b10      	ldr	r3, [pc, #64]	; (4018fc <system_init_flash+0x7c>)
  4018bc:	601a      	str	r2, [r3, #0]
  4018be:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4018c0:	4a10      	ldr	r2, [pc, #64]	; (401904 <system_init_flash+0x84>)
  4018c2:	4b0e      	ldr	r3, [pc, #56]	; (4018fc <system_init_flash+0x7c>)
  4018c4:	601a      	str	r2, [r3, #0]
  4018c6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4018c8:	4a0f      	ldr	r2, [pc, #60]	; (401908 <system_init_flash+0x88>)
  4018ca:	4b0c      	ldr	r3, [pc, #48]	; (4018fc <system_init_flash+0x7c>)
  4018cc:	601a      	str	r2, [r3, #0]
  4018ce:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4018d0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4018d4:	4b09      	ldr	r3, [pc, #36]	; (4018fc <system_init_flash+0x7c>)
  4018d6:	601a      	str	r2, [r3, #0]
  4018d8:	4770      	bx	lr
  4018da:	bf00      	nop
  4018dc:	015ef3bf 	.word	0x015ef3bf
  4018e0:	02bde77f 	.word	0x02bde77f
  4018e4:	041cdb3f 	.word	0x041cdb3f
  4018e8:	057bceff 	.word	0x057bceff
  4018ec:	06dac2bf 	.word	0x06dac2bf
  4018f0:	0839b67f 	.word	0x0839b67f
  4018f4:	04000500 	.word	0x04000500
  4018f8:	04000600 	.word	0x04000600
  4018fc:	400e0c00 	.word	0x400e0c00
  401900:	04000100 	.word	0x04000100
  401904:	04000200 	.word	0x04000200
  401908:	04000300 	.word	0x04000300

0040190c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40190c:	4b0a      	ldr	r3, [pc, #40]	; (401938 <_sbrk+0x2c>)
  40190e:	681b      	ldr	r3, [r3, #0]
  401910:	b153      	cbz	r3, 401928 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401912:	4b09      	ldr	r3, [pc, #36]	; (401938 <_sbrk+0x2c>)
  401914:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401916:	181a      	adds	r2, r3, r0
  401918:	4908      	ldr	r1, [pc, #32]	; (40193c <_sbrk+0x30>)
  40191a:	4291      	cmp	r1, r2
  40191c:	db08      	blt.n	401930 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40191e:	4610      	mov	r0, r2
  401920:	4a05      	ldr	r2, [pc, #20]	; (401938 <_sbrk+0x2c>)
  401922:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401924:	4618      	mov	r0, r3
  401926:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401928:	4a05      	ldr	r2, [pc, #20]	; (401940 <_sbrk+0x34>)
  40192a:	4b03      	ldr	r3, [pc, #12]	; (401938 <_sbrk+0x2c>)
  40192c:	601a      	str	r2, [r3, #0]
  40192e:	e7f0      	b.n	401912 <_sbrk+0x6>
		return (caddr_t) -1;	
  401930:	f04f 30ff 	mov.w	r0, #4294967295
}
  401934:	4770      	bx	lr
  401936:	bf00      	nop
  401938:	20400aec 	.word	0x20400aec
  40193c:	2045fffc 	.word	0x2045fffc
  401940:	20403098 	.word	0x20403098

00401944 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401944:	f04f 30ff 	mov.w	r0, #4294967295
  401948:	4770      	bx	lr

0040194a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40194e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401950:	2000      	movs	r0, #0
  401952:	4770      	bx	lr

00401954 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401954:	2001      	movs	r0, #1
  401956:	4770      	bx	lr

00401958 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401958:	2000      	movs	r0, #0
  40195a:	4770      	bx	lr

0040195c <__libc_init_array>:
  40195c:	b570      	push	{r4, r5, r6, lr}
  40195e:	4e0f      	ldr	r6, [pc, #60]	; (40199c <__libc_init_array+0x40>)
  401960:	4d0f      	ldr	r5, [pc, #60]	; (4019a0 <__libc_init_array+0x44>)
  401962:	1b76      	subs	r6, r6, r5
  401964:	10b6      	asrs	r6, r6, #2
  401966:	bf18      	it	ne
  401968:	2400      	movne	r4, #0
  40196a:	d005      	beq.n	401978 <__libc_init_array+0x1c>
  40196c:	3401      	adds	r4, #1
  40196e:	f855 3b04 	ldr.w	r3, [r5], #4
  401972:	4798      	blx	r3
  401974:	42a6      	cmp	r6, r4
  401976:	d1f9      	bne.n	40196c <__libc_init_array+0x10>
  401978:	4e0a      	ldr	r6, [pc, #40]	; (4019a4 <__libc_init_array+0x48>)
  40197a:	4d0b      	ldr	r5, [pc, #44]	; (4019a8 <__libc_init_array+0x4c>)
  40197c:	1b76      	subs	r6, r6, r5
  40197e:	f004 fde7 	bl	406550 <_init>
  401982:	10b6      	asrs	r6, r6, #2
  401984:	bf18      	it	ne
  401986:	2400      	movne	r4, #0
  401988:	d006      	beq.n	401998 <__libc_init_array+0x3c>
  40198a:	3401      	adds	r4, #1
  40198c:	f855 3b04 	ldr.w	r3, [r5], #4
  401990:	4798      	blx	r3
  401992:	42a6      	cmp	r6, r4
  401994:	d1f9      	bne.n	40198a <__libc_init_array+0x2e>
  401996:	bd70      	pop	{r4, r5, r6, pc}
  401998:	bd70      	pop	{r4, r5, r6, pc}
  40199a:	bf00      	nop
  40199c:	0040655c 	.word	0x0040655c
  4019a0:	0040655c 	.word	0x0040655c
  4019a4:	00406564 	.word	0x00406564
  4019a8:	0040655c 	.word	0x0040655c

004019ac <iprintf>:
  4019ac:	b40f      	push	{r0, r1, r2, r3}
  4019ae:	b500      	push	{lr}
  4019b0:	4907      	ldr	r1, [pc, #28]	; (4019d0 <iprintf+0x24>)
  4019b2:	b083      	sub	sp, #12
  4019b4:	ab04      	add	r3, sp, #16
  4019b6:	6808      	ldr	r0, [r1, #0]
  4019b8:	f853 2b04 	ldr.w	r2, [r3], #4
  4019bc:	6881      	ldr	r1, [r0, #8]
  4019be:	9301      	str	r3, [sp, #4]
  4019c0:	f000 f97a 	bl	401cb8 <_vfiprintf_r>
  4019c4:	b003      	add	sp, #12
  4019c6:	f85d eb04 	ldr.w	lr, [sp], #4
  4019ca:	b004      	add	sp, #16
  4019cc:	4770      	bx	lr
  4019ce:	bf00      	nop
  4019d0:	20400058 	.word	0x20400058

004019d4 <iscanf>:
  4019d4:	b40f      	push	{r0, r1, r2, r3}
  4019d6:	b500      	push	{lr}
  4019d8:	4907      	ldr	r1, [pc, #28]	; (4019f8 <iscanf+0x24>)
  4019da:	b083      	sub	sp, #12
  4019dc:	ab04      	add	r3, sp, #16
  4019de:	6808      	ldr	r0, [r1, #0]
  4019e0:	f853 2b04 	ldr.w	r2, [r3], #4
  4019e4:	6841      	ldr	r1, [r0, #4]
  4019e6:	9301      	str	r3, [sp, #4]
  4019e8:	f000 fff0 	bl	4029cc <__svfiscanf_r>
  4019ec:	b003      	add	sp, #12
  4019ee:	f85d eb04 	ldr.w	lr, [sp], #4
  4019f2:	b004      	add	sp, #16
  4019f4:	4770      	bx	lr
  4019f6:	bf00      	nop
  4019f8:	20400058 	.word	0x20400058

004019fc <memset>:
  4019fc:	b470      	push	{r4, r5, r6}
  4019fe:	0786      	lsls	r6, r0, #30
  401a00:	d046      	beq.n	401a90 <memset+0x94>
  401a02:	1e54      	subs	r4, r2, #1
  401a04:	2a00      	cmp	r2, #0
  401a06:	d041      	beq.n	401a8c <memset+0x90>
  401a08:	b2ca      	uxtb	r2, r1
  401a0a:	4603      	mov	r3, r0
  401a0c:	e002      	b.n	401a14 <memset+0x18>
  401a0e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401a12:	d33b      	bcc.n	401a8c <memset+0x90>
  401a14:	f803 2b01 	strb.w	r2, [r3], #1
  401a18:	079d      	lsls	r5, r3, #30
  401a1a:	d1f8      	bne.n	401a0e <memset+0x12>
  401a1c:	2c03      	cmp	r4, #3
  401a1e:	d92e      	bls.n	401a7e <memset+0x82>
  401a20:	b2cd      	uxtb	r5, r1
  401a22:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401a26:	2c0f      	cmp	r4, #15
  401a28:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401a2c:	d919      	bls.n	401a62 <memset+0x66>
  401a2e:	f103 0210 	add.w	r2, r3, #16
  401a32:	4626      	mov	r6, r4
  401a34:	3e10      	subs	r6, #16
  401a36:	2e0f      	cmp	r6, #15
  401a38:	f842 5c10 	str.w	r5, [r2, #-16]
  401a3c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401a40:	f842 5c08 	str.w	r5, [r2, #-8]
  401a44:	f842 5c04 	str.w	r5, [r2, #-4]
  401a48:	f102 0210 	add.w	r2, r2, #16
  401a4c:	d8f2      	bhi.n	401a34 <memset+0x38>
  401a4e:	f1a4 0210 	sub.w	r2, r4, #16
  401a52:	f022 020f 	bic.w	r2, r2, #15
  401a56:	f004 040f 	and.w	r4, r4, #15
  401a5a:	3210      	adds	r2, #16
  401a5c:	2c03      	cmp	r4, #3
  401a5e:	4413      	add	r3, r2
  401a60:	d90d      	bls.n	401a7e <memset+0x82>
  401a62:	461e      	mov	r6, r3
  401a64:	4622      	mov	r2, r4
  401a66:	3a04      	subs	r2, #4
  401a68:	2a03      	cmp	r2, #3
  401a6a:	f846 5b04 	str.w	r5, [r6], #4
  401a6e:	d8fa      	bhi.n	401a66 <memset+0x6a>
  401a70:	1f22      	subs	r2, r4, #4
  401a72:	f022 0203 	bic.w	r2, r2, #3
  401a76:	3204      	adds	r2, #4
  401a78:	4413      	add	r3, r2
  401a7a:	f004 0403 	and.w	r4, r4, #3
  401a7e:	b12c      	cbz	r4, 401a8c <memset+0x90>
  401a80:	b2c9      	uxtb	r1, r1
  401a82:	441c      	add	r4, r3
  401a84:	f803 1b01 	strb.w	r1, [r3], #1
  401a88:	429c      	cmp	r4, r3
  401a8a:	d1fb      	bne.n	401a84 <memset+0x88>
  401a8c:	bc70      	pop	{r4, r5, r6}
  401a8e:	4770      	bx	lr
  401a90:	4614      	mov	r4, r2
  401a92:	4603      	mov	r3, r0
  401a94:	e7c2      	b.n	401a1c <memset+0x20>
  401a96:	bf00      	nop

00401a98 <setbuf>:
  401a98:	2900      	cmp	r1, #0
  401a9a:	bf0c      	ite	eq
  401a9c:	2202      	moveq	r2, #2
  401a9e:	2200      	movne	r2, #0
  401aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401aa4:	f000 b800 	b.w	401aa8 <setvbuf>

00401aa8 <setvbuf>:
  401aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401aac:	4c61      	ldr	r4, [pc, #388]	; (401c34 <setvbuf+0x18c>)
  401aae:	6825      	ldr	r5, [r4, #0]
  401ab0:	b083      	sub	sp, #12
  401ab2:	4604      	mov	r4, r0
  401ab4:	460f      	mov	r7, r1
  401ab6:	4690      	mov	r8, r2
  401ab8:	461e      	mov	r6, r3
  401aba:	b115      	cbz	r5, 401ac2 <setvbuf+0x1a>
  401abc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401abe:	2b00      	cmp	r3, #0
  401ac0:	d064      	beq.n	401b8c <setvbuf+0xe4>
  401ac2:	f1b8 0f02 	cmp.w	r8, #2
  401ac6:	d006      	beq.n	401ad6 <setvbuf+0x2e>
  401ac8:	f1b8 0f01 	cmp.w	r8, #1
  401acc:	f200 809f 	bhi.w	401c0e <setvbuf+0x166>
  401ad0:	2e00      	cmp	r6, #0
  401ad2:	f2c0 809c 	blt.w	401c0e <setvbuf+0x166>
  401ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401ad8:	07d8      	lsls	r0, r3, #31
  401ada:	d534      	bpl.n	401b46 <setvbuf+0x9e>
  401adc:	4621      	mov	r1, r4
  401ade:	4628      	mov	r0, r5
  401ae0:	f001 fd92 	bl	403608 <_fflush_r>
  401ae4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401ae6:	b141      	cbz	r1, 401afa <setvbuf+0x52>
  401ae8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401aec:	4299      	cmp	r1, r3
  401aee:	d002      	beq.n	401af6 <setvbuf+0x4e>
  401af0:	4628      	mov	r0, r5
  401af2:	f001 fffb 	bl	403aec <_free_r>
  401af6:	2300      	movs	r3, #0
  401af8:	6323      	str	r3, [r4, #48]	; 0x30
  401afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401afe:	2200      	movs	r2, #0
  401b00:	61a2      	str	r2, [r4, #24]
  401b02:	6062      	str	r2, [r4, #4]
  401b04:	061a      	lsls	r2, r3, #24
  401b06:	d43a      	bmi.n	401b7e <setvbuf+0xd6>
  401b08:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401b0c:	f023 0303 	bic.w	r3, r3, #3
  401b10:	f1b8 0f02 	cmp.w	r8, #2
  401b14:	81a3      	strh	r3, [r4, #12]
  401b16:	d01d      	beq.n	401b54 <setvbuf+0xac>
  401b18:	ab01      	add	r3, sp, #4
  401b1a:	466a      	mov	r2, sp
  401b1c:	4621      	mov	r1, r4
  401b1e:	4628      	mov	r0, r5
  401b20:	f002 fac8 	bl	4040b4 <__swhatbuf_r>
  401b24:	89a3      	ldrh	r3, [r4, #12]
  401b26:	4318      	orrs	r0, r3
  401b28:	81a0      	strh	r0, [r4, #12]
  401b2a:	2e00      	cmp	r6, #0
  401b2c:	d132      	bne.n	401b94 <setvbuf+0xec>
  401b2e:	9e00      	ldr	r6, [sp, #0]
  401b30:	4630      	mov	r0, r6
  401b32:	f002 fb37 	bl	4041a4 <malloc>
  401b36:	4607      	mov	r7, r0
  401b38:	2800      	cmp	r0, #0
  401b3a:	d06b      	beq.n	401c14 <setvbuf+0x16c>
  401b3c:	89a3      	ldrh	r3, [r4, #12]
  401b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401b42:	81a3      	strh	r3, [r4, #12]
  401b44:	e028      	b.n	401b98 <setvbuf+0xf0>
  401b46:	89a3      	ldrh	r3, [r4, #12]
  401b48:	0599      	lsls	r1, r3, #22
  401b4a:	d4c7      	bmi.n	401adc <setvbuf+0x34>
  401b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401b4e:	f002 faad 	bl	4040ac <__retarget_lock_acquire_recursive>
  401b52:	e7c3      	b.n	401adc <setvbuf+0x34>
  401b54:	2500      	movs	r5, #0
  401b56:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401b58:	2600      	movs	r6, #0
  401b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401b5e:	f043 0302 	orr.w	r3, r3, #2
  401b62:	2001      	movs	r0, #1
  401b64:	60a6      	str	r6, [r4, #8]
  401b66:	07ce      	lsls	r6, r1, #31
  401b68:	81a3      	strh	r3, [r4, #12]
  401b6a:	6022      	str	r2, [r4, #0]
  401b6c:	6122      	str	r2, [r4, #16]
  401b6e:	6160      	str	r0, [r4, #20]
  401b70:	d401      	bmi.n	401b76 <setvbuf+0xce>
  401b72:	0598      	lsls	r0, r3, #22
  401b74:	d53e      	bpl.n	401bf4 <setvbuf+0x14c>
  401b76:	4628      	mov	r0, r5
  401b78:	b003      	add	sp, #12
  401b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401b7e:	6921      	ldr	r1, [r4, #16]
  401b80:	4628      	mov	r0, r5
  401b82:	f001 ffb3 	bl	403aec <_free_r>
  401b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b8a:	e7bd      	b.n	401b08 <setvbuf+0x60>
  401b8c:	4628      	mov	r0, r5
  401b8e:	f001 fda5 	bl	4036dc <__sinit>
  401b92:	e796      	b.n	401ac2 <setvbuf+0x1a>
  401b94:	2f00      	cmp	r7, #0
  401b96:	d0cb      	beq.n	401b30 <setvbuf+0x88>
  401b98:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401b9a:	2b00      	cmp	r3, #0
  401b9c:	d033      	beq.n	401c06 <setvbuf+0x15e>
  401b9e:	9b00      	ldr	r3, [sp, #0]
  401ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401ba4:	6027      	str	r7, [r4, #0]
  401ba6:	429e      	cmp	r6, r3
  401ba8:	bf1c      	itt	ne
  401baa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401bae:	81a2      	strhne	r2, [r4, #12]
  401bb0:	f1b8 0f01 	cmp.w	r8, #1
  401bb4:	bf04      	itt	eq
  401bb6:	f042 0201 	orreq.w	r2, r2, #1
  401bba:	81a2      	strheq	r2, [r4, #12]
  401bbc:	b292      	uxth	r2, r2
  401bbe:	f012 0308 	ands.w	r3, r2, #8
  401bc2:	6127      	str	r7, [r4, #16]
  401bc4:	6166      	str	r6, [r4, #20]
  401bc6:	d00e      	beq.n	401be6 <setvbuf+0x13e>
  401bc8:	07d1      	lsls	r1, r2, #31
  401bca:	d51a      	bpl.n	401c02 <setvbuf+0x15a>
  401bcc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401bce:	4276      	negs	r6, r6
  401bd0:	2300      	movs	r3, #0
  401bd2:	f015 0501 	ands.w	r5, r5, #1
  401bd6:	61a6      	str	r6, [r4, #24]
  401bd8:	60a3      	str	r3, [r4, #8]
  401bda:	d009      	beq.n	401bf0 <setvbuf+0x148>
  401bdc:	2500      	movs	r5, #0
  401bde:	4628      	mov	r0, r5
  401be0:	b003      	add	sp, #12
  401be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401be6:	60a3      	str	r3, [r4, #8]
  401be8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401bea:	f015 0501 	ands.w	r5, r5, #1
  401bee:	d1f5      	bne.n	401bdc <setvbuf+0x134>
  401bf0:	0593      	lsls	r3, r2, #22
  401bf2:	d4c0      	bmi.n	401b76 <setvbuf+0xce>
  401bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401bf6:	f002 fa5b 	bl	4040b0 <__retarget_lock_release_recursive>
  401bfa:	4628      	mov	r0, r5
  401bfc:	b003      	add	sp, #12
  401bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401c02:	60a6      	str	r6, [r4, #8]
  401c04:	e7f0      	b.n	401be8 <setvbuf+0x140>
  401c06:	4628      	mov	r0, r5
  401c08:	f001 fd68 	bl	4036dc <__sinit>
  401c0c:	e7c7      	b.n	401b9e <setvbuf+0xf6>
  401c0e:	f04f 35ff 	mov.w	r5, #4294967295
  401c12:	e7b0      	b.n	401b76 <setvbuf+0xce>
  401c14:	f8dd 9000 	ldr.w	r9, [sp]
  401c18:	45b1      	cmp	r9, r6
  401c1a:	d004      	beq.n	401c26 <setvbuf+0x17e>
  401c1c:	4648      	mov	r0, r9
  401c1e:	f002 fac1 	bl	4041a4 <malloc>
  401c22:	4607      	mov	r7, r0
  401c24:	b920      	cbnz	r0, 401c30 <setvbuf+0x188>
  401c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c2a:	f04f 35ff 	mov.w	r5, #4294967295
  401c2e:	e792      	b.n	401b56 <setvbuf+0xae>
  401c30:	464e      	mov	r6, r9
  401c32:	e783      	b.n	401b3c <setvbuf+0x94>
  401c34:	20400058 	.word	0x20400058

00401c38 <__sprint_r.part.0>:
  401c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c3c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401c3e:	049c      	lsls	r4, r3, #18
  401c40:	4693      	mov	fp, r2
  401c42:	d52f      	bpl.n	401ca4 <__sprint_r.part.0+0x6c>
  401c44:	6893      	ldr	r3, [r2, #8]
  401c46:	6812      	ldr	r2, [r2, #0]
  401c48:	b353      	cbz	r3, 401ca0 <__sprint_r.part.0+0x68>
  401c4a:	460e      	mov	r6, r1
  401c4c:	4607      	mov	r7, r0
  401c4e:	f102 0908 	add.w	r9, r2, #8
  401c52:	e919 0420 	ldmdb	r9, {r5, sl}
  401c56:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401c5a:	d017      	beq.n	401c8c <__sprint_r.part.0+0x54>
  401c5c:	3d04      	subs	r5, #4
  401c5e:	2400      	movs	r4, #0
  401c60:	e001      	b.n	401c66 <__sprint_r.part.0+0x2e>
  401c62:	45a0      	cmp	r8, r4
  401c64:	d010      	beq.n	401c88 <__sprint_r.part.0+0x50>
  401c66:	4632      	mov	r2, r6
  401c68:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401c6c:	4638      	mov	r0, r7
  401c6e:	f001 fdd7 	bl	403820 <_fputwc_r>
  401c72:	1c43      	adds	r3, r0, #1
  401c74:	f104 0401 	add.w	r4, r4, #1
  401c78:	d1f3      	bne.n	401c62 <__sprint_r.part.0+0x2a>
  401c7a:	2300      	movs	r3, #0
  401c7c:	f8cb 3008 	str.w	r3, [fp, #8]
  401c80:	f8cb 3004 	str.w	r3, [fp, #4]
  401c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c88:	f8db 3008 	ldr.w	r3, [fp, #8]
  401c8c:	f02a 0a03 	bic.w	sl, sl, #3
  401c90:	eba3 030a 	sub.w	r3, r3, sl
  401c94:	f8cb 3008 	str.w	r3, [fp, #8]
  401c98:	f109 0908 	add.w	r9, r9, #8
  401c9c:	2b00      	cmp	r3, #0
  401c9e:	d1d8      	bne.n	401c52 <__sprint_r.part.0+0x1a>
  401ca0:	2000      	movs	r0, #0
  401ca2:	e7ea      	b.n	401c7a <__sprint_r.part.0+0x42>
  401ca4:	f002 f808 	bl	403cb8 <__sfvwrite_r>
  401ca8:	2300      	movs	r3, #0
  401caa:	f8cb 3008 	str.w	r3, [fp, #8]
  401cae:	f8cb 3004 	str.w	r3, [fp, #4]
  401cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cb6:	bf00      	nop

00401cb8 <_vfiprintf_r>:
  401cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cbc:	b0ad      	sub	sp, #180	; 0xb4
  401cbe:	461d      	mov	r5, r3
  401cc0:	468b      	mov	fp, r1
  401cc2:	4690      	mov	r8, r2
  401cc4:	9307      	str	r3, [sp, #28]
  401cc6:	9006      	str	r0, [sp, #24]
  401cc8:	b118      	cbz	r0, 401cd2 <_vfiprintf_r+0x1a>
  401cca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401ccc:	2b00      	cmp	r3, #0
  401cce:	f000 80f3 	beq.w	401eb8 <_vfiprintf_r+0x200>
  401cd2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401cd6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401cda:	07df      	lsls	r7, r3, #31
  401cdc:	b281      	uxth	r1, r0
  401cde:	d402      	bmi.n	401ce6 <_vfiprintf_r+0x2e>
  401ce0:	058e      	lsls	r6, r1, #22
  401ce2:	f140 80fc 	bpl.w	401ede <_vfiprintf_r+0x226>
  401ce6:	048c      	lsls	r4, r1, #18
  401ce8:	d40a      	bmi.n	401d00 <_vfiprintf_r+0x48>
  401cea:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401cee:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401cf6:	f8ab 100c 	strh.w	r1, [fp, #12]
  401cfa:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401cfe:	b289      	uxth	r1, r1
  401d00:	0708      	lsls	r0, r1, #28
  401d02:	f140 80b3 	bpl.w	401e6c <_vfiprintf_r+0x1b4>
  401d06:	f8db 3010 	ldr.w	r3, [fp, #16]
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	f000 80ae 	beq.w	401e6c <_vfiprintf_r+0x1b4>
  401d10:	f001 031a 	and.w	r3, r1, #26
  401d14:	2b0a      	cmp	r3, #10
  401d16:	f000 80b5 	beq.w	401e84 <_vfiprintf_r+0x1cc>
  401d1a:	2300      	movs	r3, #0
  401d1c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401d20:	930b      	str	r3, [sp, #44]	; 0x2c
  401d22:	9311      	str	r3, [sp, #68]	; 0x44
  401d24:	9310      	str	r3, [sp, #64]	; 0x40
  401d26:	9303      	str	r3, [sp, #12]
  401d28:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401d2c:	46ca      	mov	sl, r9
  401d2e:	f8cd b010 	str.w	fp, [sp, #16]
  401d32:	f898 3000 	ldrb.w	r3, [r8]
  401d36:	4644      	mov	r4, r8
  401d38:	b1fb      	cbz	r3, 401d7a <_vfiprintf_r+0xc2>
  401d3a:	2b25      	cmp	r3, #37	; 0x25
  401d3c:	d102      	bne.n	401d44 <_vfiprintf_r+0x8c>
  401d3e:	e01c      	b.n	401d7a <_vfiprintf_r+0xc2>
  401d40:	2b25      	cmp	r3, #37	; 0x25
  401d42:	d003      	beq.n	401d4c <_vfiprintf_r+0x94>
  401d44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401d48:	2b00      	cmp	r3, #0
  401d4a:	d1f9      	bne.n	401d40 <_vfiprintf_r+0x88>
  401d4c:	eba4 0508 	sub.w	r5, r4, r8
  401d50:	b19d      	cbz	r5, 401d7a <_vfiprintf_r+0xc2>
  401d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d56:	f8ca 8000 	str.w	r8, [sl]
  401d5a:	3301      	adds	r3, #1
  401d5c:	442a      	add	r2, r5
  401d5e:	2b07      	cmp	r3, #7
  401d60:	f8ca 5004 	str.w	r5, [sl, #4]
  401d64:	9211      	str	r2, [sp, #68]	; 0x44
  401d66:	9310      	str	r3, [sp, #64]	; 0x40
  401d68:	dd7a      	ble.n	401e60 <_vfiprintf_r+0x1a8>
  401d6a:	2a00      	cmp	r2, #0
  401d6c:	f040 84b0 	bne.w	4026d0 <_vfiprintf_r+0xa18>
  401d70:	9b03      	ldr	r3, [sp, #12]
  401d72:	9210      	str	r2, [sp, #64]	; 0x40
  401d74:	442b      	add	r3, r5
  401d76:	46ca      	mov	sl, r9
  401d78:	9303      	str	r3, [sp, #12]
  401d7a:	7823      	ldrb	r3, [r4, #0]
  401d7c:	2b00      	cmp	r3, #0
  401d7e:	f000 83e0 	beq.w	402542 <_vfiprintf_r+0x88a>
  401d82:	2000      	movs	r0, #0
  401d84:	f04f 0300 	mov.w	r3, #0
  401d88:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401d8c:	f104 0801 	add.w	r8, r4, #1
  401d90:	7862      	ldrb	r2, [r4, #1]
  401d92:	4605      	mov	r5, r0
  401d94:	4606      	mov	r6, r0
  401d96:	4603      	mov	r3, r0
  401d98:	f04f 34ff 	mov.w	r4, #4294967295
  401d9c:	f108 0801 	add.w	r8, r8, #1
  401da0:	f1a2 0120 	sub.w	r1, r2, #32
  401da4:	2958      	cmp	r1, #88	; 0x58
  401da6:	f200 82de 	bhi.w	402366 <_vfiprintf_r+0x6ae>
  401daa:	e8df f011 	tbh	[pc, r1, lsl #1]
  401dae:	0221      	.short	0x0221
  401db0:	02dc02dc 	.word	0x02dc02dc
  401db4:	02dc0229 	.word	0x02dc0229
  401db8:	02dc02dc 	.word	0x02dc02dc
  401dbc:	02dc02dc 	.word	0x02dc02dc
  401dc0:	028902dc 	.word	0x028902dc
  401dc4:	02dc0295 	.word	0x02dc0295
  401dc8:	02bd00a2 	.word	0x02bd00a2
  401dcc:	019f02dc 	.word	0x019f02dc
  401dd0:	01a401a4 	.word	0x01a401a4
  401dd4:	01a401a4 	.word	0x01a401a4
  401dd8:	01a401a4 	.word	0x01a401a4
  401ddc:	01a401a4 	.word	0x01a401a4
  401de0:	02dc01a4 	.word	0x02dc01a4
  401de4:	02dc02dc 	.word	0x02dc02dc
  401de8:	02dc02dc 	.word	0x02dc02dc
  401dec:	02dc02dc 	.word	0x02dc02dc
  401df0:	02dc02dc 	.word	0x02dc02dc
  401df4:	01b202dc 	.word	0x01b202dc
  401df8:	02dc02dc 	.word	0x02dc02dc
  401dfc:	02dc02dc 	.word	0x02dc02dc
  401e00:	02dc02dc 	.word	0x02dc02dc
  401e04:	02dc02dc 	.word	0x02dc02dc
  401e08:	02dc02dc 	.word	0x02dc02dc
  401e0c:	02dc0197 	.word	0x02dc0197
  401e10:	02dc02dc 	.word	0x02dc02dc
  401e14:	02dc02dc 	.word	0x02dc02dc
  401e18:	02dc019b 	.word	0x02dc019b
  401e1c:	025302dc 	.word	0x025302dc
  401e20:	02dc02dc 	.word	0x02dc02dc
  401e24:	02dc02dc 	.word	0x02dc02dc
  401e28:	02dc02dc 	.word	0x02dc02dc
  401e2c:	02dc02dc 	.word	0x02dc02dc
  401e30:	02dc02dc 	.word	0x02dc02dc
  401e34:	021b025a 	.word	0x021b025a
  401e38:	02dc02dc 	.word	0x02dc02dc
  401e3c:	026e02dc 	.word	0x026e02dc
  401e40:	02dc021b 	.word	0x02dc021b
  401e44:	027302dc 	.word	0x027302dc
  401e48:	01f502dc 	.word	0x01f502dc
  401e4c:	02090182 	.word	0x02090182
  401e50:	02dc02d7 	.word	0x02dc02d7
  401e54:	02dc029a 	.word	0x02dc029a
  401e58:	02dc00a7 	.word	0x02dc00a7
  401e5c:	022e02dc 	.word	0x022e02dc
  401e60:	f10a 0a08 	add.w	sl, sl, #8
  401e64:	9b03      	ldr	r3, [sp, #12]
  401e66:	442b      	add	r3, r5
  401e68:	9303      	str	r3, [sp, #12]
  401e6a:	e786      	b.n	401d7a <_vfiprintf_r+0xc2>
  401e6c:	4659      	mov	r1, fp
  401e6e:	9806      	ldr	r0, [sp, #24]
  401e70:	f001 fab6 	bl	4033e0 <__swsetup_r>
  401e74:	bb18      	cbnz	r0, 401ebe <_vfiprintf_r+0x206>
  401e76:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  401e7a:	f001 031a 	and.w	r3, r1, #26
  401e7e:	2b0a      	cmp	r3, #10
  401e80:	f47f af4b 	bne.w	401d1a <_vfiprintf_r+0x62>
  401e84:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  401e88:	2b00      	cmp	r3, #0
  401e8a:	f6ff af46 	blt.w	401d1a <_vfiprintf_r+0x62>
  401e8e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401e92:	07db      	lsls	r3, r3, #31
  401e94:	d405      	bmi.n	401ea2 <_vfiprintf_r+0x1ea>
  401e96:	058f      	lsls	r7, r1, #22
  401e98:	d403      	bmi.n	401ea2 <_vfiprintf_r+0x1ea>
  401e9a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e9e:	f002 f907 	bl	4040b0 <__retarget_lock_release_recursive>
  401ea2:	462b      	mov	r3, r5
  401ea4:	4642      	mov	r2, r8
  401ea6:	4659      	mov	r1, fp
  401ea8:	9806      	ldr	r0, [sp, #24]
  401eaa:	f000 fd4d 	bl	402948 <__sbprintf>
  401eae:	9003      	str	r0, [sp, #12]
  401eb0:	9803      	ldr	r0, [sp, #12]
  401eb2:	b02d      	add	sp, #180	; 0xb4
  401eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401eb8:	f001 fc10 	bl	4036dc <__sinit>
  401ebc:	e709      	b.n	401cd2 <_vfiprintf_r+0x1a>
  401ebe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401ec2:	07d9      	lsls	r1, r3, #31
  401ec4:	d404      	bmi.n	401ed0 <_vfiprintf_r+0x218>
  401ec6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401eca:	059a      	lsls	r2, r3, #22
  401ecc:	f140 84aa 	bpl.w	402824 <_vfiprintf_r+0xb6c>
  401ed0:	f04f 33ff 	mov.w	r3, #4294967295
  401ed4:	9303      	str	r3, [sp, #12]
  401ed6:	9803      	ldr	r0, [sp, #12]
  401ed8:	b02d      	add	sp, #180	; 0xb4
  401eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ede:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401ee2:	f002 f8e3 	bl	4040ac <__retarget_lock_acquire_recursive>
  401ee6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  401eea:	b281      	uxth	r1, r0
  401eec:	e6fb      	b.n	401ce6 <_vfiprintf_r+0x2e>
  401eee:	4276      	negs	r6, r6
  401ef0:	9207      	str	r2, [sp, #28]
  401ef2:	f043 0304 	orr.w	r3, r3, #4
  401ef6:	f898 2000 	ldrb.w	r2, [r8]
  401efa:	e74f      	b.n	401d9c <_vfiprintf_r+0xe4>
  401efc:	9608      	str	r6, [sp, #32]
  401efe:	069e      	lsls	r6, r3, #26
  401f00:	f100 8450 	bmi.w	4027a4 <_vfiprintf_r+0xaec>
  401f04:	9907      	ldr	r1, [sp, #28]
  401f06:	06dd      	lsls	r5, r3, #27
  401f08:	460a      	mov	r2, r1
  401f0a:	f100 83ef 	bmi.w	4026ec <_vfiprintf_r+0xa34>
  401f0e:	0658      	lsls	r0, r3, #25
  401f10:	f140 83ec 	bpl.w	4026ec <_vfiprintf_r+0xa34>
  401f14:	880e      	ldrh	r6, [r1, #0]
  401f16:	3104      	adds	r1, #4
  401f18:	2700      	movs	r7, #0
  401f1a:	2201      	movs	r2, #1
  401f1c:	9107      	str	r1, [sp, #28]
  401f1e:	f04f 0100 	mov.w	r1, #0
  401f22:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401f26:	2500      	movs	r5, #0
  401f28:	1c61      	adds	r1, r4, #1
  401f2a:	f000 8116 	beq.w	40215a <_vfiprintf_r+0x4a2>
  401f2e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401f32:	9102      	str	r1, [sp, #8]
  401f34:	ea56 0107 	orrs.w	r1, r6, r7
  401f38:	f040 8114 	bne.w	402164 <_vfiprintf_r+0x4ac>
  401f3c:	2c00      	cmp	r4, #0
  401f3e:	f040 835c 	bne.w	4025fa <_vfiprintf_r+0x942>
  401f42:	2a00      	cmp	r2, #0
  401f44:	f040 83b7 	bne.w	4026b6 <_vfiprintf_r+0x9fe>
  401f48:	f013 0301 	ands.w	r3, r3, #1
  401f4c:	9305      	str	r3, [sp, #20]
  401f4e:	f000 8457 	beq.w	402800 <_vfiprintf_r+0xb48>
  401f52:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401f56:	2330      	movs	r3, #48	; 0x30
  401f58:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  401f5c:	9b05      	ldr	r3, [sp, #20]
  401f5e:	42a3      	cmp	r3, r4
  401f60:	bfb8      	it	lt
  401f62:	4623      	movlt	r3, r4
  401f64:	9301      	str	r3, [sp, #4]
  401f66:	b10d      	cbz	r5, 401f6c <_vfiprintf_r+0x2b4>
  401f68:	3301      	adds	r3, #1
  401f6a:	9301      	str	r3, [sp, #4]
  401f6c:	9b02      	ldr	r3, [sp, #8]
  401f6e:	f013 0302 	ands.w	r3, r3, #2
  401f72:	9309      	str	r3, [sp, #36]	; 0x24
  401f74:	d002      	beq.n	401f7c <_vfiprintf_r+0x2c4>
  401f76:	9b01      	ldr	r3, [sp, #4]
  401f78:	3302      	adds	r3, #2
  401f7a:	9301      	str	r3, [sp, #4]
  401f7c:	9b02      	ldr	r3, [sp, #8]
  401f7e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401f82:	930a      	str	r3, [sp, #40]	; 0x28
  401f84:	f040 8217 	bne.w	4023b6 <_vfiprintf_r+0x6fe>
  401f88:	9b08      	ldr	r3, [sp, #32]
  401f8a:	9a01      	ldr	r2, [sp, #4]
  401f8c:	1a9d      	subs	r5, r3, r2
  401f8e:	2d00      	cmp	r5, #0
  401f90:	f340 8211 	ble.w	4023b6 <_vfiprintf_r+0x6fe>
  401f94:	2d10      	cmp	r5, #16
  401f96:	f340 8490 	ble.w	4028ba <_vfiprintf_r+0xc02>
  401f9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f9e:	4ec4      	ldr	r6, [pc, #784]	; (4022b0 <_vfiprintf_r+0x5f8>)
  401fa0:	46d6      	mov	lr, sl
  401fa2:	2710      	movs	r7, #16
  401fa4:	46a2      	mov	sl, r4
  401fa6:	4619      	mov	r1, r3
  401fa8:	9c06      	ldr	r4, [sp, #24]
  401faa:	e007      	b.n	401fbc <_vfiprintf_r+0x304>
  401fac:	f101 0c02 	add.w	ip, r1, #2
  401fb0:	f10e 0e08 	add.w	lr, lr, #8
  401fb4:	4601      	mov	r1, r0
  401fb6:	3d10      	subs	r5, #16
  401fb8:	2d10      	cmp	r5, #16
  401fba:	dd11      	ble.n	401fe0 <_vfiprintf_r+0x328>
  401fbc:	1c48      	adds	r0, r1, #1
  401fbe:	3210      	adds	r2, #16
  401fc0:	2807      	cmp	r0, #7
  401fc2:	9211      	str	r2, [sp, #68]	; 0x44
  401fc4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401fc8:	9010      	str	r0, [sp, #64]	; 0x40
  401fca:	ddef      	ble.n	401fac <_vfiprintf_r+0x2f4>
  401fcc:	2a00      	cmp	r2, #0
  401fce:	f040 81e4 	bne.w	40239a <_vfiprintf_r+0x6e2>
  401fd2:	3d10      	subs	r5, #16
  401fd4:	2d10      	cmp	r5, #16
  401fd6:	4611      	mov	r1, r2
  401fd8:	f04f 0c01 	mov.w	ip, #1
  401fdc:	46ce      	mov	lr, r9
  401fde:	dced      	bgt.n	401fbc <_vfiprintf_r+0x304>
  401fe0:	4654      	mov	r4, sl
  401fe2:	4661      	mov	r1, ip
  401fe4:	46f2      	mov	sl, lr
  401fe6:	442a      	add	r2, r5
  401fe8:	2907      	cmp	r1, #7
  401fea:	9211      	str	r2, [sp, #68]	; 0x44
  401fec:	f8ca 6000 	str.w	r6, [sl]
  401ff0:	f8ca 5004 	str.w	r5, [sl, #4]
  401ff4:	9110      	str	r1, [sp, #64]	; 0x40
  401ff6:	f300 82ec 	bgt.w	4025d2 <_vfiprintf_r+0x91a>
  401ffa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401ffe:	f10a 0a08 	add.w	sl, sl, #8
  402002:	1c48      	adds	r0, r1, #1
  402004:	2d00      	cmp	r5, #0
  402006:	f040 81de 	bne.w	4023c6 <_vfiprintf_r+0x70e>
  40200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40200c:	2b00      	cmp	r3, #0
  40200e:	f000 81f8 	beq.w	402402 <_vfiprintf_r+0x74a>
  402012:	3202      	adds	r2, #2
  402014:	a90e      	add	r1, sp, #56	; 0x38
  402016:	2302      	movs	r3, #2
  402018:	2807      	cmp	r0, #7
  40201a:	9211      	str	r2, [sp, #68]	; 0x44
  40201c:	9010      	str	r0, [sp, #64]	; 0x40
  40201e:	e88a 000a 	stmia.w	sl, {r1, r3}
  402022:	f340 81ea 	ble.w	4023fa <_vfiprintf_r+0x742>
  402026:	2a00      	cmp	r2, #0
  402028:	f040 838c 	bne.w	402744 <_vfiprintf_r+0xa8c>
  40202c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40202e:	2b80      	cmp	r3, #128	; 0x80
  402030:	f04f 0001 	mov.w	r0, #1
  402034:	4611      	mov	r1, r2
  402036:	46ca      	mov	sl, r9
  402038:	f040 81e7 	bne.w	40240a <_vfiprintf_r+0x752>
  40203c:	9b08      	ldr	r3, [sp, #32]
  40203e:	9d01      	ldr	r5, [sp, #4]
  402040:	1b5e      	subs	r6, r3, r5
  402042:	2e00      	cmp	r6, #0
  402044:	f340 81e1 	ble.w	40240a <_vfiprintf_r+0x752>
  402048:	2e10      	cmp	r6, #16
  40204a:	4d9a      	ldr	r5, [pc, #616]	; (4022b4 <_vfiprintf_r+0x5fc>)
  40204c:	f340 8450 	ble.w	4028f0 <_vfiprintf_r+0xc38>
  402050:	46d4      	mov	ip, sl
  402052:	2710      	movs	r7, #16
  402054:	46a2      	mov	sl, r4
  402056:	9c06      	ldr	r4, [sp, #24]
  402058:	e007      	b.n	40206a <_vfiprintf_r+0x3b2>
  40205a:	f101 0e02 	add.w	lr, r1, #2
  40205e:	f10c 0c08 	add.w	ip, ip, #8
  402062:	4601      	mov	r1, r0
  402064:	3e10      	subs	r6, #16
  402066:	2e10      	cmp	r6, #16
  402068:	dd11      	ble.n	40208e <_vfiprintf_r+0x3d6>
  40206a:	1c48      	adds	r0, r1, #1
  40206c:	3210      	adds	r2, #16
  40206e:	2807      	cmp	r0, #7
  402070:	9211      	str	r2, [sp, #68]	; 0x44
  402072:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402076:	9010      	str	r0, [sp, #64]	; 0x40
  402078:	ddef      	ble.n	40205a <_vfiprintf_r+0x3a2>
  40207a:	2a00      	cmp	r2, #0
  40207c:	f040 829d 	bne.w	4025ba <_vfiprintf_r+0x902>
  402080:	3e10      	subs	r6, #16
  402082:	2e10      	cmp	r6, #16
  402084:	f04f 0e01 	mov.w	lr, #1
  402088:	4611      	mov	r1, r2
  40208a:	46cc      	mov	ip, r9
  40208c:	dced      	bgt.n	40206a <_vfiprintf_r+0x3b2>
  40208e:	4654      	mov	r4, sl
  402090:	46e2      	mov	sl, ip
  402092:	4432      	add	r2, r6
  402094:	f1be 0f07 	cmp.w	lr, #7
  402098:	9211      	str	r2, [sp, #68]	; 0x44
  40209a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40209e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4020a2:	f300 8369 	bgt.w	402778 <_vfiprintf_r+0xac0>
  4020a6:	f10a 0a08 	add.w	sl, sl, #8
  4020aa:	f10e 0001 	add.w	r0, lr, #1
  4020ae:	4671      	mov	r1, lr
  4020b0:	e1ab      	b.n	40240a <_vfiprintf_r+0x752>
  4020b2:	9608      	str	r6, [sp, #32]
  4020b4:	f013 0220 	ands.w	r2, r3, #32
  4020b8:	f040 838c 	bne.w	4027d4 <_vfiprintf_r+0xb1c>
  4020bc:	f013 0110 	ands.w	r1, r3, #16
  4020c0:	f040 831a 	bne.w	4026f8 <_vfiprintf_r+0xa40>
  4020c4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4020c8:	f000 8316 	beq.w	4026f8 <_vfiprintf_r+0xa40>
  4020cc:	9807      	ldr	r0, [sp, #28]
  4020ce:	460a      	mov	r2, r1
  4020d0:	4601      	mov	r1, r0
  4020d2:	3104      	adds	r1, #4
  4020d4:	8806      	ldrh	r6, [r0, #0]
  4020d6:	9107      	str	r1, [sp, #28]
  4020d8:	2700      	movs	r7, #0
  4020da:	e720      	b.n	401f1e <_vfiprintf_r+0x266>
  4020dc:	9608      	str	r6, [sp, #32]
  4020de:	f043 0310 	orr.w	r3, r3, #16
  4020e2:	e7e7      	b.n	4020b4 <_vfiprintf_r+0x3fc>
  4020e4:	9608      	str	r6, [sp, #32]
  4020e6:	f043 0310 	orr.w	r3, r3, #16
  4020ea:	e708      	b.n	401efe <_vfiprintf_r+0x246>
  4020ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4020f0:	f898 2000 	ldrb.w	r2, [r8]
  4020f4:	e652      	b.n	401d9c <_vfiprintf_r+0xe4>
  4020f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4020fa:	2600      	movs	r6, #0
  4020fc:	f818 2b01 	ldrb.w	r2, [r8], #1
  402100:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402104:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402108:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40210c:	2909      	cmp	r1, #9
  40210e:	d9f5      	bls.n	4020fc <_vfiprintf_r+0x444>
  402110:	e646      	b.n	401da0 <_vfiprintf_r+0xe8>
  402112:	9608      	str	r6, [sp, #32]
  402114:	2800      	cmp	r0, #0
  402116:	f040 8408 	bne.w	40292a <_vfiprintf_r+0xc72>
  40211a:	f043 0310 	orr.w	r3, r3, #16
  40211e:	069e      	lsls	r6, r3, #26
  402120:	f100 834c 	bmi.w	4027bc <_vfiprintf_r+0xb04>
  402124:	06dd      	lsls	r5, r3, #27
  402126:	f100 82f3 	bmi.w	402710 <_vfiprintf_r+0xa58>
  40212a:	0658      	lsls	r0, r3, #25
  40212c:	f140 82f0 	bpl.w	402710 <_vfiprintf_r+0xa58>
  402130:	9d07      	ldr	r5, [sp, #28]
  402132:	f9b5 6000 	ldrsh.w	r6, [r5]
  402136:	462a      	mov	r2, r5
  402138:	17f7      	asrs	r7, r6, #31
  40213a:	3204      	adds	r2, #4
  40213c:	4630      	mov	r0, r6
  40213e:	4639      	mov	r1, r7
  402140:	9207      	str	r2, [sp, #28]
  402142:	2800      	cmp	r0, #0
  402144:	f171 0200 	sbcs.w	r2, r1, #0
  402148:	f2c0 835d 	blt.w	402806 <_vfiprintf_r+0xb4e>
  40214c:	1c61      	adds	r1, r4, #1
  40214e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402152:	f04f 0201 	mov.w	r2, #1
  402156:	f47f aeea 	bne.w	401f2e <_vfiprintf_r+0x276>
  40215a:	ea56 0107 	orrs.w	r1, r6, r7
  40215e:	f000 824d 	beq.w	4025fc <_vfiprintf_r+0x944>
  402162:	9302      	str	r3, [sp, #8]
  402164:	2a01      	cmp	r2, #1
  402166:	f000 828c 	beq.w	402682 <_vfiprintf_r+0x9ca>
  40216a:	2a02      	cmp	r2, #2
  40216c:	f040 825c 	bne.w	402628 <_vfiprintf_r+0x970>
  402170:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402172:	46cb      	mov	fp, r9
  402174:	0933      	lsrs	r3, r6, #4
  402176:	f006 010f 	and.w	r1, r6, #15
  40217a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40217e:	093a      	lsrs	r2, r7, #4
  402180:	461e      	mov	r6, r3
  402182:	4617      	mov	r7, r2
  402184:	5c43      	ldrb	r3, [r0, r1]
  402186:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40218a:	ea56 0307 	orrs.w	r3, r6, r7
  40218e:	d1f1      	bne.n	402174 <_vfiprintf_r+0x4bc>
  402190:	eba9 030b 	sub.w	r3, r9, fp
  402194:	9305      	str	r3, [sp, #20]
  402196:	e6e1      	b.n	401f5c <_vfiprintf_r+0x2a4>
  402198:	2800      	cmp	r0, #0
  40219a:	f040 83c0 	bne.w	40291e <_vfiprintf_r+0xc66>
  40219e:	0699      	lsls	r1, r3, #26
  4021a0:	f100 8367 	bmi.w	402872 <_vfiprintf_r+0xbba>
  4021a4:	06da      	lsls	r2, r3, #27
  4021a6:	f100 80f1 	bmi.w	40238c <_vfiprintf_r+0x6d4>
  4021aa:	065b      	lsls	r3, r3, #25
  4021ac:	f140 80ee 	bpl.w	40238c <_vfiprintf_r+0x6d4>
  4021b0:	9a07      	ldr	r2, [sp, #28]
  4021b2:	6813      	ldr	r3, [r2, #0]
  4021b4:	3204      	adds	r2, #4
  4021b6:	9207      	str	r2, [sp, #28]
  4021b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4021bc:	801a      	strh	r2, [r3, #0]
  4021be:	e5b8      	b.n	401d32 <_vfiprintf_r+0x7a>
  4021c0:	9807      	ldr	r0, [sp, #28]
  4021c2:	4a3d      	ldr	r2, [pc, #244]	; (4022b8 <_vfiprintf_r+0x600>)
  4021c4:	9608      	str	r6, [sp, #32]
  4021c6:	920b      	str	r2, [sp, #44]	; 0x2c
  4021c8:	6806      	ldr	r6, [r0, #0]
  4021ca:	2278      	movs	r2, #120	; 0x78
  4021cc:	2130      	movs	r1, #48	; 0x30
  4021ce:	3004      	adds	r0, #4
  4021d0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4021d4:	f043 0302 	orr.w	r3, r3, #2
  4021d8:	9007      	str	r0, [sp, #28]
  4021da:	2700      	movs	r7, #0
  4021dc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4021e0:	2202      	movs	r2, #2
  4021e2:	e69c      	b.n	401f1e <_vfiprintf_r+0x266>
  4021e4:	9608      	str	r6, [sp, #32]
  4021e6:	2800      	cmp	r0, #0
  4021e8:	d099      	beq.n	40211e <_vfiprintf_r+0x466>
  4021ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4021ee:	e796      	b.n	40211e <_vfiprintf_r+0x466>
  4021f0:	f898 2000 	ldrb.w	r2, [r8]
  4021f4:	2d00      	cmp	r5, #0
  4021f6:	f47f add1 	bne.w	401d9c <_vfiprintf_r+0xe4>
  4021fa:	2001      	movs	r0, #1
  4021fc:	2520      	movs	r5, #32
  4021fe:	e5cd      	b.n	401d9c <_vfiprintf_r+0xe4>
  402200:	f043 0301 	orr.w	r3, r3, #1
  402204:	f898 2000 	ldrb.w	r2, [r8]
  402208:	e5c8      	b.n	401d9c <_vfiprintf_r+0xe4>
  40220a:	9608      	str	r6, [sp, #32]
  40220c:	2800      	cmp	r0, #0
  40220e:	f040 8393 	bne.w	402938 <_vfiprintf_r+0xc80>
  402212:	4929      	ldr	r1, [pc, #164]	; (4022b8 <_vfiprintf_r+0x600>)
  402214:	910b      	str	r1, [sp, #44]	; 0x2c
  402216:	069f      	lsls	r7, r3, #26
  402218:	f100 82e8 	bmi.w	4027ec <_vfiprintf_r+0xb34>
  40221c:	9807      	ldr	r0, [sp, #28]
  40221e:	06de      	lsls	r6, r3, #27
  402220:	4601      	mov	r1, r0
  402222:	f100 8270 	bmi.w	402706 <_vfiprintf_r+0xa4e>
  402226:	065d      	lsls	r5, r3, #25
  402228:	f140 826d 	bpl.w	402706 <_vfiprintf_r+0xa4e>
  40222c:	3104      	adds	r1, #4
  40222e:	8806      	ldrh	r6, [r0, #0]
  402230:	9107      	str	r1, [sp, #28]
  402232:	2700      	movs	r7, #0
  402234:	07d8      	lsls	r0, r3, #31
  402236:	f140 8222 	bpl.w	40267e <_vfiprintf_r+0x9c6>
  40223a:	ea56 0107 	orrs.w	r1, r6, r7
  40223e:	f000 821e 	beq.w	40267e <_vfiprintf_r+0x9c6>
  402242:	2130      	movs	r1, #48	; 0x30
  402244:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402248:	f043 0302 	orr.w	r3, r3, #2
  40224c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402250:	2202      	movs	r2, #2
  402252:	e664      	b.n	401f1e <_vfiprintf_r+0x266>
  402254:	9608      	str	r6, [sp, #32]
  402256:	2800      	cmp	r0, #0
  402258:	f040 836b 	bne.w	402932 <_vfiprintf_r+0xc7a>
  40225c:	4917      	ldr	r1, [pc, #92]	; (4022bc <_vfiprintf_r+0x604>)
  40225e:	910b      	str	r1, [sp, #44]	; 0x2c
  402260:	e7d9      	b.n	402216 <_vfiprintf_r+0x55e>
  402262:	9907      	ldr	r1, [sp, #28]
  402264:	9608      	str	r6, [sp, #32]
  402266:	680a      	ldr	r2, [r1, #0]
  402268:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40226c:	f04f 0000 	mov.w	r0, #0
  402270:	460a      	mov	r2, r1
  402272:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  402276:	3204      	adds	r2, #4
  402278:	2001      	movs	r0, #1
  40227a:	9001      	str	r0, [sp, #4]
  40227c:	9207      	str	r2, [sp, #28]
  40227e:	9005      	str	r0, [sp, #20]
  402280:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402284:	9302      	str	r3, [sp, #8]
  402286:	2400      	movs	r4, #0
  402288:	e670      	b.n	401f6c <_vfiprintf_r+0x2b4>
  40228a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40228e:	f898 2000 	ldrb.w	r2, [r8]
  402292:	e583      	b.n	401d9c <_vfiprintf_r+0xe4>
  402294:	f898 2000 	ldrb.w	r2, [r8]
  402298:	2a6c      	cmp	r2, #108	; 0x6c
  40229a:	bf03      	ittte	eq
  40229c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4022a0:	f043 0320 	orreq.w	r3, r3, #32
  4022a4:	f108 0801 	addeq.w	r8, r8, #1
  4022a8:	f043 0310 	orrne.w	r3, r3, #16
  4022ac:	e576      	b.n	401d9c <_vfiprintf_r+0xe4>
  4022ae:	bf00      	nop
  4022b0:	004063f8 	.word	0x004063f8
  4022b4:	00406408 	.word	0x00406408
  4022b8:	004063dc 	.word	0x004063dc
  4022bc:	004063c8 	.word	0x004063c8
  4022c0:	9907      	ldr	r1, [sp, #28]
  4022c2:	680e      	ldr	r6, [r1, #0]
  4022c4:	460a      	mov	r2, r1
  4022c6:	2e00      	cmp	r6, #0
  4022c8:	f102 0204 	add.w	r2, r2, #4
  4022cc:	f6ff ae0f 	blt.w	401eee <_vfiprintf_r+0x236>
  4022d0:	9207      	str	r2, [sp, #28]
  4022d2:	f898 2000 	ldrb.w	r2, [r8]
  4022d6:	e561      	b.n	401d9c <_vfiprintf_r+0xe4>
  4022d8:	f898 2000 	ldrb.w	r2, [r8]
  4022dc:	2001      	movs	r0, #1
  4022de:	252b      	movs	r5, #43	; 0x2b
  4022e0:	e55c      	b.n	401d9c <_vfiprintf_r+0xe4>
  4022e2:	9907      	ldr	r1, [sp, #28]
  4022e4:	9608      	str	r6, [sp, #32]
  4022e6:	f8d1 b000 	ldr.w	fp, [r1]
  4022ea:	f04f 0200 	mov.w	r2, #0
  4022ee:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4022f2:	1d0e      	adds	r6, r1, #4
  4022f4:	f1bb 0f00 	cmp.w	fp, #0
  4022f8:	f000 82e5 	beq.w	4028c6 <_vfiprintf_r+0xc0e>
  4022fc:	1c67      	adds	r7, r4, #1
  4022fe:	f000 82c4 	beq.w	40288a <_vfiprintf_r+0xbd2>
  402302:	4622      	mov	r2, r4
  402304:	2100      	movs	r1, #0
  402306:	4658      	mov	r0, fp
  402308:	9301      	str	r3, [sp, #4]
  40230a:	f002 fa49 	bl	4047a0 <memchr>
  40230e:	9b01      	ldr	r3, [sp, #4]
  402310:	2800      	cmp	r0, #0
  402312:	f000 82e5 	beq.w	4028e0 <_vfiprintf_r+0xc28>
  402316:	eba0 020b 	sub.w	r2, r0, fp
  40231a:	9205      	str	r2, [sp, #20]
  40231c:	9607      	str	r6, [sp, #28]
  40231e:	9302      	str	r3, [sp, #8]
  402320:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402324:	2400      	movs	r4, #0
  402326:	e619      	b.n	401f5c <_vfiprintf_r+0x2a4>
  402328:	f898 2000 	ldrb.w	r2, [r8]
  40232c:	2a2a      	cmp	r2, #42	; 0x2a
  40232e:	f108 0701 	add.w	r7, r8, #1
  402332:	f000 82e9 	beq.w	402908 <_vfiprintf_r+0xc50>
  402336:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40233a:	2909      	cmp	r1, #9
  40233c:	46b8      	mov	r8, r7
  40233e:	f04f 0400 	mov.w	r4, #0
  402342:	f63f ad2d 	bhi.w	401da0 <_vfiprintf_r+0xe8>
  402346:	f818 2b01 	ldrb.w	r2, [r8], #1
  40234a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40234e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  402352:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402356:	2909      	cmp	r1, #9
  402358:	d9f5      	bls.n	402346 <_vfiprintf_r+0x68e>
  40235a:	e521      	b.n	401da0 <_vfiprintf_r+0xe8>
  40235c:	f043 0320 	orr.w	r3, r3, #32
  402360:	f898 2000 	ldrb.w	r2, [r8]
  402364:	e51a      	b.n	401d9c <_vfiprintf_r+0xe4>
  402366:	9608      	str	r6, [sp, #32]
  402368:	2800      	cmp	r0, #0
  40236a:	f040 82db 	bne.w	402924 <_vfiprintf_r+0xc6c>
  40236e:	2a00      	cmp	r2, #0
  402370:	f000 80e7 	beq.w	402542 <_vfiprintf_r+0x88a>
  402374:	2101      	movs	r1, #1
  402376:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40237a:	f04f 0200 	mov.w	r2, #0
  40237e:	9101      	str	r1, [sp, #4]
  402380:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402384:	9105      	str	r1, [sp, #20]
  402386:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40238a:	e77b      	b.n	402284 <_vfiprintf_r+0x5cc>
  40238c:	9a07      	ldr	r2, [sp, #28]
  40238e:	6813      	ldr	r3, [r2, #0]
  402390:	3204      	adds	r2, #4
  402392:	9207      	str	r2, [sp, #28]
  402394:	9a03      	ldr	r2, [sp, #12]
  402396:	601a      	str	r2, [r3, #0]
  402398:	e4cb      	b.n	401d32 <_vfiprintf_r+0x7a>
  40239a:	aa0f      	add	r2, sp, #60	; 0x3c
  40239c:	9904      	ldr	r1, [sp, #16]
  40239e:	4620      	mov	r0, r4
  4023a0:	f7ff fc4a 	bl	401c38 <__sprint_r.part.0>
  4023a4:	2800      	cmp	r0, #0
  4023a6:	f040 8139 	bne.w	40261c <_vfiprintf_r+0x964>
  4023aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023ae:	f101 0c01 	add.w	ip, r1, #1
  4023b2:	46ce      	mov	lr, r9
  4023b4:	e5ff      	b.n	401fb6 <_vfiprintf_r+0x2fe>
  4023b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4023b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4023ba:	1c48      	adds	r0, r1, #1
  4023bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4023c0:	2d00      	cmp	r5, #0
  4023c2:	f43f ae22 	beq.w	40200a <_vfiprintf_r+0x352>
  4023c6:	3201      	adds	r2, #1
  4023c8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4023cc:	2101      	movs	r1, #1
  4023ce:	2807      	cmp	r0, #7
  4023d0:	9211      	str	r2, [sp, #68]	; 0x44
  4023d2:	9010      	str	r0, [sp, #64]	; 0x40
  4023d4:	f8ca 5000 	str.w	r5, [sl]
  4023d8:	f8ca 1004 	str.w	r1, [sl, #4]
  4023dc:	f340 8108 	ble.w	4025f0 <_vfiprintf_r+0x938>
  4023e0:	2a00      	cmp	r2, #0
  4023e2:	f040 81bc 	bne.w	40275e <_vfiprintf_r+0xaa6>
  4023e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023e8:	2b00      	cmp	r3, #0
  4023ea:	f43f ae1f 	beq.w	40202c <_vfiprintf_r+0x374>
  4023ee:	ab0e      	add	r3, sp, #56	; 0x38
  4023f0:	2202      	movs	r2, #2
  4023f2:	4608      	mov	r0, r1
  4023f4:	931c      	str	r3, [sp, #112]	; 0x70
  4023f6:	921d      	str	r2, [sp, #116]	; 0x74
  4023f8:	46ca      	mov	sl, r9
  4023fa:	4601      	mov	r1, r0
  4023fc:	f10a 0a08 	add.w	sl, sl, #8
  402400:	3001      	adds	r0, #1
  402402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402404:	2b80      	cmp	r3, #128	; 0x80
  402406:	f43f ae19 	beq.w	40203c <_vfiprintf_r+0x384>
  40240a:	9b05      	ldr	r3, [sp, #20]
  40240c:	1ae4      	subs	r4, r4, r3
  40240e:	2c00      	cmp	r4, #0
  402410:	dd2e      	ble.n	402470 <_vfiprintf_r+0x7b8>
  402412:	2c10      	cmp	r4, #16
  402414:	4db3      	ldr	r5, [pc, #716]	; (4026e4 <_vfiprintf_r+0xa2c>)
  402416:	dd1e      	ble.n	402456 <_vfiprintf_r+0x79e>
  402418:	46d6      	mov	lr, sl
  40241a:	2610      	movs	r6, #16
  40241c:	9f06      	ldr	r7, [sp, #24]
  40241e:	f8dd a010 	ldr.w	sl, [sp, #16]
  402422:	e006      	b.n	402432 <_vfiprintf_r+0x77a>
  402424:	1c88      	adds	r0, r1, #2
  402426:	f10e 0e08 	add.w	lr, lr, #8
  40242a:	4619      	mov	r1, r3
  40242c:	3c10      	subs	r4, #16
  40242e:	2c10      	cmp	r4, #16
  402430:	dd10      	ble.n	402454 <_vfiprintf_r+0x79c>
  402432:	1c4b      	adds	r3, r1, #1
  402434:	3210      	adds	r2, #16
  402436:	2b07      	cmp	r3, #7
  402438:	9211      	str	r2, [sp, #68]	; 0x44
  40243a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40243e:	9310      	str	r3, [sp, #64]	; 0x40
  402440:	ddf0      	ble.n	402424 <_vfiprintf_r+0x76c>
  402442:	2a00      	cmp	r2, #0
  402444:	d165      	bne.n	402512 <_vfiprintf_r+0x85a>
  402446:	3c10      	subs	r4, #16
  402448:	2c10      	cmp	r4, #16
  40244a:	f04f 0001 	mov.w	r0, #1
  40244e:	4611      	mov	r1, r2
  402450:	46ce      	mov	lr, r9
  402452:	dcee      	bgt.n	402432 <_vfiprintf_r+0x77a>
  402454:	46f2      	mov	sl, lr
  402456:	4422      	add	r2, r4
  402458:	2807      	cmp	r0, #7
  40245a:	9211      	str	r2, [sp, #68]	; 0x44
  40245c:	f8ca 5000 	str.w	r5, [sl]
  402460:	f8ca 4004 	str.w	r4, [sl, #4]
  402464:	9010      	str	r0, [sp, #64]	; 0x40
  402466:	f300 8085 	bgt.w	402574 <_vfiprintf_r+0x8bc>
  40246a:	f10a 0a08 	add.w	sl, sl, #8
  40246e:	3001      	adds	r0, #1
  402470:	9905      	ldr	r1, [sp, #20]
  402472:	f8ca b000 	str.w	fp, [sl]
  402476:	440a      	add	r2, r1
  402478:	2807      	cmp	r0, #7
  40247a:	9211      	str	r2, [sp, #68]	; 0x44
  40247c:	f8ca 1004 	str.w	r1, [sl, #4]
  402480:	9010      	str	r0, [sp, #64]	; 0x40
  402482:	f340 8082 	ble.w	40258a <_vfiprintf_r+0x8d2>
  402486:	2a00      	cmp	r2, #0
  402488:	f040 8118 	bne.w	4026bc <_vfiprintf_r+0xa04>
  40248c:	9b02      	ldr	r3, [sp, #8]
  40248e:	9210      	str	r2, [sp, #64]	; 0x40
  402490:	0758      	lsls	r0, r3, #29
  402492:	d535      	bpl.n	402500 <_vfiprintf_r+0x848>
  402494:	9b08      	ldr	r3, [sp, #32]
  402496:	9901      	ldr	r1, [sp, #4]
  402498:	1a5c      	subs	r4, r3, r1
  40249a:	2c00      	cmp	r4, #0
  40249c:	f340 80e7 	ble.w	40266e <_vfiprintf_r+0x9b6>
  4024a0:	46ca      	mov	sl, r9
  4024a2:	2c10      	cmp	r4, #16
  4024a4:	f340 8218 	ble.w	4028d8 <_vfiprintf_r+0xc20>
  4024a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024aa:	4e8f      	ldr	r6, [pc, #572]	; (4026e8 <_vfiprintf_r+0xa30>)
  4024ac:	9f06      	ldr	r7, [sp, #24]
  4024ae:	f8dd b010 	ldr.w	fp, [sp, #16]
  4024b2:	2510      	movs	r5, #16
  4024b4:	e006      	b.n	4024c4 <_vfiprintf_r+0x80c>
  4024b6:	1c88      	adds	r0, r1, #2
  4024b8:	f10a 0a08 	add.w	sl, sl, #8
  4024bc:	4619      	mov	r1, r3
  4024be:	3c10      	subs	r4, #16
  4024c0:	2c10      	cmp	r4, #16
  4024c2:	dd11      	ble.n	4024e8 <_vfiprintf_r+0x830>
  4024c4:	1c4b      	adds	r3, r1, #1
  4024c6:	3210      	adds	r2, #16
  4024c8:	2b07      	cmp	r3, #7
  4024ca:	9211      	str	r2, [sp, #68]	; 0x44
  4024cc:	f8ca 6000 	str.w	r6, [sl]
  4024d0:	f8ca 5004 	str.w	r5, [sl, #4]
  4024d4:	9310      	str	r3, [sp, #64]	; 0x40
  4024d6:	ddee      	ble.n	4024b6 <_vfiprintf_r+0x7fe>
  4024d8:	bb42      	cbnz	r2, 40252c <_vfiprintf_r+0x874>
  4024da:	3c10      	subs	r4, #16
  4024dc:	2c10      	cmp	r4, #16
  4024de:	f04f 0001 	mov.w	r0, #1
  4024e2:	4611      	mov	r1, r2
  4024e4:	46ca      	mov	sl, r9
  4024e6:	dced      	bgt.n	4024c4 <_vfiprintf_r+0x80c>
  4024e8:	4422      	add	r2, r4
  4024ea:	2807      	cmp	r0, #7
  4024ec:	9211      	str	r2, [sp, #68]	; 0x44
  4024ee:	f8ca 6000 	str.w	r6, [sl]
  4024f2:	f8ca 4004 	str.w	r4, [sl, #4]
  4024f6:	9010      	str	r0, [sp, #64]	; 0x40
  4024f8:	dd51      	ble.n	40259e <_vfiprintf_r+0x8e6>
  4024fa:	2a00      	cmp	r2, #0
  4024fc:	f040 819b 	bne.w	402836 <_vfiprintf_r+0xb7e>
  402500:	9b03      	ldr	r3, [sp, #12]
  402502:	9a08      	ldr	r2, [sp, #32]
  402504:	9901      	ldr	r1, [sp, #4]
  402506:	428a      	cmp	r2, r1
  402508:	bfac      	ite	ge
  40250a:	189b      	addge	r3, r3, r2
  40250c:	185b      	addlt	r3, r3, r1
  40250e:	9303      	str	r3, [sp, #12]
  402510:	e04e      	b.n	4025b0 <_vfiprintf_r+0x8f8>
  402512:	aa0f      	add	r2, sp, #60	; 0x3c
  402514:	4651      	mov	r1, sl
  402516:	4638      	mov	r0, r7
  402518:	f7ff fb8e 	bl	401c38 <__sprint_r.part.0>
  40251c:	2800      	cmp	r0, #0
  40251e:	f040 813f 	bne.w	4027a0 <_vfiprintf_r+0xae8>
  402522:	9910      	ldr	r1, [sp, #64]	; 0x40
  402524:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402526:	1c48      	adds	r0, r1, #1
  402528:	46ce      	mov	lr, r9
  40252a:	e77f      	b.n	40242c <_vfiprintf_r+0x774>
  40252c:	aa0f      	add	r2, sp, #60	; 0x3c
  40252e:	4659      	mov	r1, fp
  402530:	4638      	mov	r0, r7
  402532:	f7ff fb81 	bl	401c38 <__sprint_r.part.0>
  402536:	b960      	cbnz	r0, 402552 <_vfiprintf_r+0x89a>
  402538:	9910      	ldr	r1, [sp, #64]	; 0x40
  40253a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40253c:	1c48      	adds	r0, r1, #1
  40253e:	46ca      	mov	sl, r9
  402540:	e7bd      	b.n	4024be <_vfiprintf_r+0x806>
  402542:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402544:	f8dd b010 	ldr.w	fp, [sp, #16]
  402548:	2b00      	cmp	r3, #0
  40254a:	f040 81d4 	bne.w	4028f6 <_vfiprintf_r+0xc3e>
  40254e:	2300      	movs	r3, #0
  402550:	9310      	str	r3, [sp, #64]	; 0x40
  402552:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402556:	f013 0f01 	tst.w	r3, #1
  40255a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40255e:	d102      	bne.n	402566 <_vfiprintf_r+0x8ae>
  402560:	059a      	lsls	r2, r3, #22
  402562:	f140 80de 	bpl.w	402722 <_vfiprintf_r+0xa6a>
  402566:	065b      	lsls	r3, r3, #25
  402568:	f53f acb2 	bmi.w	401ed0 <_vfiprintf_r+0x218>
  40256c:	9803      	ldr	r0, [sp, #12]
  40256e:	b02d      	add	sp, #180	; 0xb4
  402570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402574:	2a00      	cmp	r2, #0
  402576:	f040 8106 	bne.w	402786 <_vfiprintf_r+0xace>
  40257a:	9a05      	ldr	r2, [sp, #20]
  40257c:	921d      	str	r2, [sp, #116]	; 0x74
  40257e:	2301      	movs	r3, #1
  402580:	9211      	str	r2, [sp, #68]	; 0x44
  402582:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  402586:	9310      	str	r3, [sp, #64]	; 0x40
  402588:	46ca      	mov	sl, r9
  40258a:	f10a 0a08 	add.w	sl, sl, #8
  40258e:	9b02      	ldr	r3, [sp, #8]
  402590:	0759      	lsls	r1, r3, #29
  402592:	d504      	bpl.n	40259e <_vfiprintf_r+0x8e6>
  402594:	9b08      	ldr	r3, [sp, #32]
  402596:	9901      	ldr	r1, [sp, #4]
  402598:	1a5c      	subs	r4, r3, r1
  40259a:	2c00      	cmp	r4, #0
  40259c:	dc81      	bgt.n	4024a2 <_vfiprintf_r+0x7ea>
  40259e:	9b03      	ldr	r3, [sp, #12]
  4025a0:	9908      	ldr	r1, [sp, #32]
  4025a2:	9801      	ldr	r0, [sp, #4]
  4025a4:	4281      	cmp	r1, r0
  4025a6:	bfac      	ite	ge
  4025a8:	185b      	addge	r3, r3, r1
  4025aa:	181b      	addlt	r3, r3, r0
  4025ac:	9303      	str	r3, [sp, #12]
  4025ae:	bb72      	cbnz	r2, 40260e <_vfiprintf_r+0x956>
  4025b0:	2300      	movs	r3, #0
  4025b2:	9310      	str	r3, [sp, #64]	; 0x40
  4025b4:	46ca      	mov	sl, r9
  4025b6:	f7ff bbbc 	b.w	401d32 <_vfiprintf_r+0x7a>
  4025ba:	aa0f      	add	r2, sp, #60	; 0x3c
  4025bc:	9904      	ldr	r1, [sp, #16]
  4025be:	4620      	mov	r0, r4
  4025c0:	f7ff fb3a 	bl	401c38 <__sprint_r.part.0>
  4025c4:	bb50      	cbnz	r0, 40261c <_vfiprintf_r+0x964>
  4025c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4025c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4025ca:	f101 0e01 	add.w	lr, r1, #1
  4025ce:	46cc      	mov	ip, r9
  4025d0:	e548      	b.n	402064 <_vfiprintf_r+0x3ac>
  4025d2:	2a00      	cmp	r2, #0
  4025d4:	f040 8140 	bne.w	402858 <_vfiprintf_r+0xba0>
  4025d8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4025dc:	2900      	cmp	r1, #0
  4025de:	f000 811b 	beq.w	402818 <_vfiprintf_r+0xb60>
  4025e2:	2201      	movs	r2, #1
  4025e4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4025e8:	4610      	mov	r0, r2
  4025ea:	921d      	str	r2, [sp, #116]	; 0x74
  4025ec:	911c      	str	r1, [sp, #112]	; 0x70
  4025ee:	46ca      	mov	sl, r9
  4025f0:	4601      	mov	r1, r0
  4025f2:	f10a 0a08 	add.w	sl, sl, #8
  4025f6:	3001      	adds	r0, #1
  4025f8:	e507      	b.n	40200a <_vfiprintf_r+0x352>
  4025fa:	9b02      	ldr	r3, [sp, #8]
  4025fc:	2a01      	cmp	r2, #1
  4025fe:	f000 8098 	beq.w	402732 <_vfiprintf_r+0xa7a>
  402602:	2a02      	cmp	r2, #2
  402604:	d10d      	bne.n	402622 <_vfiprintf_r+0x96a>
  402606:	9302      	str	r3, [sp, #8]
  402608:	2600      	movs	r6, #0
  40260a:	2700      	movs	r7, #0
  40260c:	e5b0      	b.n	402170 <_vfiprintf_r+0x4b8>
  40260e:	aa0f      	add	r2, sp, #60	; 0x3c
  402610:	9904      	ldr	r1, [sp, #16]
  402612:	9806      	ldr	r0, [sp, #24]
  402614:	f7ff fb10 	bl	401c38 <__sprint_r.part.0>
  402618:	2800      	cmp	r0, #0
  40261a:	d0c9      	beq.n	4025b0 <_vfiprintf_r+0x8f8>
  40261c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402620:	e797      	b.n	402552 <_vfiprintf_r+0x89a>
  402622:	9302      	str	r3, [sp, #8]
  402624:	2600      	movs	r6, #0
  402626:	2700      	movs	r7, #0
  402628:	4649      	mov	r1, r9
  40262a:	e000      	b.n	40262e <_vfiprintf_r+0x976>
  40262c:	4659      	mov	r1, fp
  40262e:	08f2      	lsrs	r2, r6, #3
  402630:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402634:	08f8      	lsrs	r0, r7, #3
  402636:	f006 0307 	and.w	r3, r6, #7
  40263a:	4607      	mov	r7, r0
  40263c:	4616      	mov	r6, r2
  40263e:	3330      	adds	r3, #48	; 0x30
  402640:	ea56 0207 	orrs.w	r2, r6, r7
  402644:	f801 3c01 	strb.w	r3, [r1, #-1]
  402648:	f101 3bff 	add.w	fp, r1, #4294967295
  40264c:	d1ee      	bne.n	40262c <_vfiprintf_r+0x974>
  40264e:	9a02      	ldr	r2, [sp, #8]
  402650:	07d6      	lsls	r6, r2, #31
  402652:	f57f ad9d 	bpl.w	402190 <_vfiprintf_r+0x4d8>
  402656:	2b30      	cmp	r3, #48	; 0x30
  402658:	f43f ad9a 	beq.w	402190 <_vfiprintf_r+0x4d8>
  40265c:	3902      	subs	r1, #2
  40265e:	2330      	movs	r3, #48	; 0x30
  402660:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402664:	eba9 0301 	sub.w	r3, r9, r1
  402668:	9305      	str	r3, [sp, #20]
  40266a:	468b      	mov	fp, r1
  40266c:	e476      	b.n	401f5c <_vfiprintf_r+0x2a4>
  40266e:	9b03      	ldr	r3, [sp, #12]
  402670:	9a08      	ldr	r2, [sp, #32]
  402672:	428a      	cmp	r2, r1
  402674:	bfac      	ite	ge
  402676:	189b      	addge	r3, r3, r2
  402678:	185b      	addlt	r3, r3, r1
  40267a:	9303      	str	r3, [sp, #12]
  40267c:	e798      	b.n	4025b0 <_vfiprintf_r+0x8f8>
  40267e:	2202      	movs	r2, #2
  402680:	e44d      	b.n	401f1e <_vfiprintf_r+0x266>
  402682:	2f00      	cmp	r7, #0
  402684:	bf08      	it	eq
  402686:	2e0a      	cmpeq	r6, #10
  402688:	d352      	bcc.n	402730 <_vfiprintf_r+0xa78>
  40268a:	46cb      	mov	fp, r9
  40268c:	4630      	mov	r0, r6
  40268e:	4639      	mov	r1, r7
  402690:	220a      	movs	r2, #10
  402692:	2300      	movs	r3, #0
  402694:	f003 faf4 	bl	405c80 <__aeabi_uldivmod>
  402698:	3230      	adds	r2, #48	; 0x30
  40269a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40269e:	4630      	mov	r0, r6
  4026a0:	4639      	mov	r1, r7
  4026a2:	2300      	movs	r3, #0
  4026a4:	220a      	movs	r2, #10
  4026a6:	f003 faeb 	bl	405c80 <__aeabi_uldivmod>
  4026aa:	4606      	mov	r6, r0
  4026ac:	460f      	mov	r7, r1
  4026ae:	ea56 0307 	orrs.w	r3, r6, r7
  4026b2:	d1eb      	bne.n	40268c <_vfiprintf_r+0x9d4>
  4026b4:	e56c      	b.n	402190 <_vfiprintf_r+0x4d8>
  4026b6:	9405      	str	r4, [sp, #20]
  4026b8:	46cb      	mov	fp, r9
  4026ba:	e44f      	b.n	401f5c <_vfiprintf_r+0x2a4>
  4026bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4026be:	9904      	ldr	r1, [sp, #16]
  4026c0:	9806      	ldr	r0, [sp, #24]
  4026c2:	f7ff fab9 	bl	401c38 <__sprint_r.part.0>
  4026c6:	2800      	cmp	r0, #0
  4026c8:	d1a8      	bne.n	40261c <_vfiprintf_r+0x964>
  4026ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026cc:	46ca      	mov	sl, r9
  4026ce:	e75e      	b.n	40258e <_vfiprintf_r+0x8d6>
  4026d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4026d2:	9904      	ldr	r1, [sp, #16]
  4026d4:	9806      	ldr	r0, [sp, #24]
  4026d6:	f7ff faaf 	bl	401c38 <__sprint_r.part.0>
  4026da:	2800      	cmp	r0, #0
  4026dc:	d19e      	bne.n	40261c <_vfiprintf_r+0x964>
  4026de:	46ca      	mov	sl, r9
  4026e0:	f7ff bbc0 	b.w	401e64 <_vfiprintf_r+0x1ac>
  4026e4:	00406408 	.word	0x00406408
  4026e8:	004063f8 	.word	0x004063f8
  4026ec:	3104      	adds	r1, #4
  4026ee:	6816      	ldr	r6, [r2, #0]
  4026f0:	9107      	str	r1, [sp, #28]
  4026f2:	2201      	movs	r2, #1
  4026f4:	2700      	movs	r7, #0
  4026f6:	e412      	b.n	401f1e <_vfiprintf_r+0x266>
  4026f8:	9807      	ldr	r0, [sp, #28]
  4026fa:	4601      	mov	r1, r0
  4026fc:	3104      	adds	r1, #4
  4026fe:	6806      	ldr	r6, [r0, #0]
  402700:	9107      	str	r1, [sp, #28]
  402702:	2700      	movs	r7, #0
  402704:	e40b      	b.n	401f1e <_vfiprintf_r+0x266>
  402706:	680e      	ldr	r6, [r1, #0]
  402708:	3104      	adds	r1, #4
  40270a:	9107      	str	r1, [sp, #28]
  40270c:	2700      	movs	r7, #0
  40270e:	e591      	b.n	402234 <_vfiprintf_r+0x57c>
  402710:	9907      	ldr	r1, [sp, #28]
  402712:	680e      	ldr	r6, [r1, #0]
  402714:	460a      	mov	r2, r1
  402716:	17f7      	asrs	r7, r6, #31
  402718:	3204      	adds	r2, #4
  40271a:	9207      	str	r2, [sp, #28]
  40271c:	4630      	mov	r0, r6
  40271e:	4639      	mov	r1, r7
  402720:	e50f      	b.n	402142 <_vfiprintf_r+0x48a>
  402722:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402726:	f001 fcc3 	bl	4040b0 <__retarget_lock_release_recursive>
  40272a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40272e:	e71a      	b.n	402566 <_vfiprintf_r+0x8ae>
  402730:	9b02      	ldr	r3, [sp, #8]
  402732:	9302      	str	r3, [sp, #8]
  402734:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402738:	3630      	adds	r6, #48	; 0x30
  40273a:	2301      	movs	r3, #1
  40273c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402740:	9305      	str	r3, [sp, #20]
  402742:	e40b      	b.n	401f5c <_vfiprintf_r+0x2a4>
  402744:	aa0f      	add	r2, sp, #60	; 0x3c
  402746:	9904      	ldr	r1, [sp, #16]
  402748:	9806      	ldr	r0, [sp, #24]
  40274a:	f7ff fa75 	bl	401c38 <__sprint_r.part.0>
  40274e:	2800      	cmp	r0, #0
  402750:	f47f af64 	bne.w	40261c <_vfiprintf_r+0x964>
  402754:	9910      	ldr	r1, [sp, #64]	; 0x40
  402756:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402758:	1c48      	adds	r0, r1, #1
  40275a:	46ca      	mov	sl, r9
  40275c:	e651      	b.n	402402 <_vfiprintf_r+0x74a>
  40275e:	aa0f      	add	r2, sp, #60	; 0x3c
  402760:	9904      	ldr	r1, [sp, #16]
  402762:	9806      	ldr	r0, [sp, #24]
  402764:	f7ff fa68 	bl	401c38 <__sprint_r.part.0>
  402768:	2800      	cmp	r0, #0
  40276a:	f47f af57 	bne.w	40261c <_vfiprintf_r+0x964>
  40276e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402770:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402772:	1c48      	adds	r0, r1, #1
  402774:	46ca      	mov	sl, r9
  402776:	e448      	b.n	40200a <_vfiprintf_r+0x352>
  402778:	2a00      	cmp	r2, #0
  40277a:	f040 8091 	bne.w	4028a0 <_vfiprintf_r+0xbe8>
  40277e:	2001      	movs	r0, #1
  402780:	4611      	mov	r1, r2
  402782:	46ca      	mov	sl, r9
  402784:	e641      	b.n	40240a <_vfiprintf_r+0x752>
  402786:	aa0f      	add	r2, sp, #60	; 0x3c
  402788:	9904      	ldr	r1, [sp, #16]
  40278a:	9806      	ldr	r0, [sp, #24]
  40278c:	f7ff fa54 	bl	401c38 <__sprint_r.part.0>
  402790:	2800      	cmp	r0, #0
  402792:	f47f af43 	bne.w	40261c <_vfiprintf_r+0x964>
  402796:	9810      	ldr	r0, [sp, #64]	; 0x40
  402798:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40279a:	3001      	adds	r0, #1
  40279c:	46ca      	mov	sl, r9
  40279e:	e667      	b.n	402470 <_vfiprintf_r+0x7b8>
  4027a0:	46d3      	mov	fp, sl
  4027a2:	e6d6      	b.n	402552 <_vfiprintf_r+0x89a>
  4027a4:	9e07      	ldr	r6, [sp, #28]
  4027a6:	3607      	adds	r6, #7
  4027a8:	f026 0207 	bic.w	r2, r6, #7
  4027ac:	f102 0108 	add.w	r1, r2, #8
  4027b0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4027b4:	9107      	str	r1, [sp, #28]
  4027b6:	2201      	movs	r2, #1
  4027b8:	f7ff bbb1 	b.w	401f1e <_vfiprintf_r+0x266>
  4027bc:	9e07      	ldr	r6, [sp, #28]
  4027be:	3607      	adds	r6, #7
  4027c0:	f026 0607 	bic.w	r6, r6, #7
  4027c4:	e9d6 0100 	ldrd	r0, r1, [r6]
  4027c8:	f106 0208 	add.w	r2, r6, #8
  4027cc:	9207      	str	r2, [sp, #28]
  4027ce:	4606      	mov	r6, r0
  4027d0:	460f      	mov	r7, r1
  4027d2:	e4b6      	b.n	402142 <_vfiprintf_r+0x48a>
  4027d4:	9e07      	ldr	r6, [sp, #28]
  4027d6:	3607      	adds	r6, #7
  4027d8:	f026 0207 	bic.w	r2, r6, #7
  4027dc:	f102 0108 	add.w	r1, r2, #8
  4027e0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4027e4:	9107      	str	r1, [sp, #28]
  4027e6:	2200      	movs	r2, #0
  4027e8:	f7ff bb99 	b.w	401f1e <_vfiprintf_r+0x266>
  4027ec:	9e07      	ldr	r6, [sp, #28]
  4027ee:	3607      	adds	r6, #7
  4027f0:	f026 0107 	bic.w	r1, r6, #7
  4027f4:	f101 0008 	add.w	r0, r1, #8
  4027f8:	9007      	str	r0, [sp, #28]
  4027fa:	e9d1 6700 	ldrd	r6, r7, [r1]
  4027fe:	e519      	b.n	402234 <_vfiprintf_r+0x57c>
  402800:	46cb      	mov	fp, r9
  402802:	f7ff bbab 	b.w	401f5c <_vfiprintf_r+0x2a4>
  402806:	252d      	movs	r5, #45	; 0x2d
  402808:	4276      	negs	r6, r6
  40280a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40280e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402812:	2201      	movs	r2, #1
  402814:	f7ff bb88 	b.w	401f28 <_vfiprintf_r+0x270>
  402818:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40281a:	b9b3      	cbnz	r3, 40284a <_vfiprintf_r+0xb92>
  40281c:	4611      	mov	r1, r2
  40281e:	2001      	movs	r0, #1
  402820:	46ca      	mov	sl, r9
  402822:	e5f2      	b.n	40240a <_vfiprintf_r+0x752>
  402824:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402828:	f001 fc42 	bl	4040b0 <__retarget_lock_release_recursive>
  40282c:	f04f 33ff 	mov.w	r3, #4294967295
  402830:	9303      	str	r3, [sp, #12]
  402832:	f7ff bb50 	b.w	401ed6 <_vfiprintf_r+0x21e>
  402836:	aa0f      	add	r2, sp, #60	; 0x3c
  402838:	9904      	ldr	r1, [sp, #16]
  40283a:	9806      	ldr	r0, [sp, #24]
  40283c:	f7ff f9fc 	bl	401c38 <__sprint_r.part.0>
  402840:	2800      	cmp	r0, #0
  402842:	f47f aeeb 	bne.w	40261c <_vfiprintf_r+0x964>
  402846:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402848:	e6a9      	b.n	40259e <_vfiprintf_r+0x8e6>
  40284a:	ab0e      	add	r3, sp, #56	; 0x38
  40284c:	2202      	movs	r2, #2
  40284e:	931c      	str	r3, [sp, #112]	; 0x70
  402850:	921d      	str	r2, [sp, #116]	; 0x74
  402852:	2001      	movs	r0, #1
  402854:	46ca      	mov	sl, r9
  402856:	e5d0      	b.n	4023fa <_vfiprintf_r+0x742>
  402858:	aa0f      	add	r2, sp, #60	; 0x3c
  40285a:	9904      	ldr	r1, [sp, #16]
  40285c:	9806      	ldr	r0, [sp, #24]
  40285e:	f7ff f9eb 	bl	401c38 <__sprint_r.part.0>
  402862:	2800      	cmp	r0, #0
  402864:	f47f aeda 	bne.w	40261c <_vfiprintf_r+0x964>
  402868:	9910      	ldr	r1, [sp, #64]	; 0x40
  40286a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40286c:	1c48      	adds	r0, r1, #1
  40286e:	46ca      	mov	sl, r9
  402870:	e5a4      	b.n	4023bc <_vfiprintf_r+0x704>
  402872:	9a07      	ldr	r2, [sp, #28]
  402874:	9903      	ldr	r1, [sp, #12]
  402876:	6813      	ldr	r3, [r2, #0]
  402878:	17cd      	asrs	r5, r1, #31
  40287a:	4608      	mov	r0, r1
  40287c:	3204      	adds	r2, #4
  40287e:	4629      	mov	r1, r5
  402880:	9207      	str	r2, [sp, #28]
  402882:	e9c3 0100 	strd	r0, r1, [r3]
  402886:	f7ff ba54 	b.w	401d32 <_vfiprintf_r+0x7a>
  40288a:	4658      	mov	r0, fp
  40288c:	9607      	str	r6, [sp, #28]
  40288e:	9302      	str	r3, [sp, #8]
  402890:	f002 fbb6 	bl	405000 <strlen>
  402894:	2400      	movs	r4, #0
  402896:	9005      	str	r0, [sp, #20]
  402898:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40289c:	f7ff bb5e 	b.w	401f5c <_vfiprintf_r+0x2a4>
  4028a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4028a2:	9904      	ldr	r1, [sp, #16]
  4028a4:	9806      	ldr	r0, [sp, #24]
  4028a6:	f7ff f9c7 	bl	401c38 <__sprint_r.part.0>
  4028aa:	2800      	cmp	r0, #0
  4028ac:	f47f aeb6 	bne.w	40261c <_vfiprintf_r+0x964>
  4028b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4028b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028b4:	1c48      	adds	r0, r1, #1
  4028b6:	46ca      	mov	sl, r9
  4028b8:	e5a7      	b.n	40240a <_vfiprintf_r+0x752>
  4028ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  4028bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028be:	4e20      	ldr	r6, [pc, #128]	; (402940 <_vfiprintf_r+0xc88>)
  4028c0:	3101      	adds	r1, #1
  4028c2:	f7ff bb90 	b.w	401fe6 <_vfiprintf_r+0x32e>
  4028c6:	2c06      	cmp	r4, #6
  4028c8:	bf28      	it	cs
  4028ca:	2406      	movcs	r4, #6
  4028cc:	9405      	str	r4, [sp, #20]
  4028ce:	9607      	str	r6, [sp, #28]
  4028d0:	9401      	str	r4, [sp, #4]
  4028d2:	f8df b070 	ldr.w	fp, [pc, #112]	; 402944 <_vfiprintf_r+0xc8c>
  4028d6:	e4d5      	b.n	402284 <_vfiprintf_r+0x5cc>
  4028d8:	9810      	ldr	r0, [sp, #64]	; 0x40
  4028da:	4e19      	ldr	r6, [pc, #100]	; (402940 <_vfiprintf_r+0xc88>)
  4028dc:	3001      	adds	r0, #1
  4028de:	e603      	b.n	4024e8 <_vfiprintf_r+0x830>
  4028e0:	9405      	str	r4, [sp, #20]
  4028e2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4028e6:	9607      	str	r6, [sp, #28]
  4028e8:	9302      	str	r3, [sp, #8]
  4028ea:	4604      	mov	r4, r0
  4028ec:	f7ff bb36 	b.w	401f5c <_vfiprintf_r+0x2a4>
  4028f0:	4686      	mov	lr, r0
  4028f2:	f7ff bbce 	b.w	402092 <_vfiprintf_r+0x3da>
  4028f6:	9806      	ldr	r0, [sp, #24]
  4028f8:	aa0f      	add	r2, sp, #60	; 0x3c
  4028fa:	4659      	mov	r1, fp
  4028fc:	f7ff f99c 	bl	401c38 <__sprint_r.part.0>
  402900:	2800      	cmp	r0, #0
  402902:	f43f ae24 	beq.w	40254e <_vfiprintf_r+0x896>
  402906:	e624      	b.n	402552 <_vfiprintf_r+0x89a>
  402908:	9907      	ldr	r1, [sp, #28]
  40290a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40290e:	680c      	ldr	r4, [r1, #0]
  402910:	3104      	adds	r1, #4
  402912:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402916:	46b8      	mov	r8, r7
  402918:	9107      	str	r1, [sp, #28]
  40291a:	f7ff ba3f 	b.w	401d9c <_vfiprintf_r+0xe4>
  40291e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402922:	e43c      	b.n	40219e <_vfiprintf_r+0x4e6>
  402924:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402928:	e521      	b.n	40236e <_vfiprintf_r+0x6b6>
  40292a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40292e:	f7ff bbf4 	b.w	40211a <_vfiprintf_r+0x462>
  402932:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402936:	e491      	b.n	40225c <_vfiprintf_r+0x5a4>
  402938:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40293c:	e469      	b.n	402212 <_vfiprintf_r+0x55a>
  40293e:	bf00      	nop
  402940:	004063f8 	.word	0x004063f8
  402944:	004063f0 	.word	0x004063f0

00402948 <__sbprintf>:
  402948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40294c:	460c      	mov	r4, r1
  40294e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402952:	8989      	ldrh	r1, [r1, #12]
  402954:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402956:	89e5      	ldrh	r5, [r4, #14]
  402958:	9619      	str	r6, [sp, #100]	; 0x64
  40295a:	f021 0102 	bic.w	r1, r1, #2
  40295e:	4606      	mov	r6, r0
  402960:	69e0      	ldr	r0, [r4, #28]
  402962:	f8ad 100c 	strh.w	r1, [sp, #12]
  402966:	4617      	mov	r7, r2
  402968:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40296c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40296e:	f8ad 500e 	strh.w	r5, [sp, #14]
  402972:	4698      	mov	r8, r3
  402974:	ad1a      	add	r5, sp, #104	; 0x68
  402976:	2300      	movs	r3, #0
  402978:	9007      	str	r0, [sp, #28]
  40297a:	a816      	add	r0, sp, #88	; 0x58
  40297c:	9209      	str	r2, [sp, #36]	; 0x24
  40297e:	9306      	str	r3, [sp, #24]
  402980:	9500      	str	r5, [sp, #0]
  402982:	9504      	str	r5, [sp, #16]
  402984:	9102      	str	r1, [sp, #8]
  402986:	9105      	str	r1, [sp, #20]
  402988:	f001 fb8c 	bl	4040a4 <__retarget_lock_init_recursive>
  40298c:	4643      	mov	r3, r8
  40298e:	463a      	mov	r2, r7
  402990:	4669      	mov	r1, sp
  402992:	4630      	mov	r0, r6
  402994:	f7ff f990 	bl	401cb8 <_vfiprintf_r>
  402998:	1e05      	subs	r5, r0, #0
  40299a:	db07      	blt.n	4029ac <__sbprintf+0x64>
  40299c:	4630      	mov	r0, r6
  40299e:	4669      	mov	r1, sp
  4029a0:	f000 fe32 	bl	403608 <_fflush_r>
  4029a4:	2800      	cmp	r0, #0
  4029a6:	bf18      	it	ne
  4029a8:	f04f 35ff 	movne.w	r5, #4294967295
  4029ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4029b0:	065b      	lsls	r3, r3, #25
  4029b2:	d503      	bpl.n	4029bc <__sbprintf+0x74>
  4029b4:	89a3      	ldrh	r3, [r4, #12]
  4029b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4029ba:	81a3      	strh	r3, [r4, #12]
  4029bc:	9816      	ldr	r0, [sp, #88]	; 0x58
  4029be:	f001 fb73 	bl	4040a8 <__retarget_lock_close_recursive>
  4029c2:	4628      	mov	r0, r5
  4029c4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4029c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004029cc <__svfiscanf_r>:
  4029cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029d0:	468b      	mov	fp, r1
  4029d2:	b0d9      	sub	sp, #356	; 0x164
  4029d4:	6e49      	ldr	r1, [r1, #100]	; 0x64
  4029d6:	9306      	str	r3, [sp, #24]
  4029d8:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
  4029dc:	f011 0f01 	tst.w	r1, #1
  4029e0:	4607      	mov	r7, r0
  4029e2:	b299      	uxth	r1, r3
  4029e4:	d102      	bne.n	4029ec <__svfiscanf_r+0x20>
  4029e6:	058c      	lsls	r4, r1, #22
  4029e8:	f140 83e5 	bpl.w	4031b6 <__svfiscanf_r+0x7ea>
  4029ec:	0488      	lsls	r0, r1, #18
  4029ee:	d409      	bmi.n	402a04 <__svfiscanf_r+0x38>
  4029f0:	f8db 1064 	ldr.w	r1, [fp, #100]	; 0x64
  4029f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4029f8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4029fc:	f8ab 300c 	strh.w	r3, [fp, #12]
  402a00:	f8cb 1064 	str.w	r1, [fp, #100]	; 0x64
  402a04:	4614      	mov	r4, r2
  402a06:	4626      	mov	r6, r4
  402a08:	2300      	movs	r3, #0
  402a0a:	9307      	str	r3, [sp, #28]
  402a0c:	9304      	str	r3, [sp, #16]
  402a0e:	469a      	mov	sl, r3
  402a10:	9305      	str	r3, [sp, #20]
  402a12:	f816 3b01 	ldrb.w	r3, [r6], #1
  402a16:	930b      	str	r3, [sp, #44]	; 0x2c
  402a18:	b363      	cbz	r3, 402a74 <__svfiscanf_r+0xa8>
  402a1a:	f001 fb35 	bl	404088 <__locale_ctype_ptr>
  402a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402a20:	4418      	add	r0, r3
  402a22:	7845      	ldrb	r5, [r0, #1]
  402a24:	f015 0508 	ands.w	r5, r5, #8
  402a28:	d033      	beq.n	402a92 <__svfiscanf_r+0xc6>
  402a2a:	f8db 2004 	ldr.w	r2, [fp, #4]
  402a2e:	e012      	b.n	402a56 <__svfiscanf_r+0x8a>
  402a30:	f001 fb2a 	bl	404088 <__locale_ctype_ptr>
  402a34:	f8db 3000 	ldr.w	r3, [fp]
  402a38:	781a      	ldrb	r2, [r3, #0]
  402a3a:	4410      	add	r0, r2
  402a3c:	3301      	adds	r3, #1
  402a3e:	7842      	ldrb	r2, [r0, #1]
  402a40:	0711      	lsls	r1, r2, #28
  402a42:	d510      	bpl.n	402a66 <__svfiscanf_r+0x9a>
  402a44:	f8db 2004 	ldr.w	r2, [fp, #4]
  402a48:	f8cb 3000 	str.w	r3, [fp]
  402a4c:	3a01      	subs	r2, #1
  402a4e:	f10a 0a01 	add.w	sl, sl, #1
  402a52:	f8cb 2004 	str.w	r2, [fp, #4]
  402a56:	2a00      	cmp	r2, #0
  402a58:	dcea      	bgt.n	402a30 <__svfiscanf_r+0x64>
  402a5a:	4659      	mov	r1, fp
  402a5c:	4638      	mov	r0, r7
  402a5e:	f002 f9a9 	bl	404db4 <__srefill_r>
  402a62:	2800      	cmp	r0, #0
  402a64:	d0e4      	beq.n	402a30 <__svfiscanf_r+0x64>
  402a66:	4634      	mov	r4, r6
  402a68:	4626      	mov	r6, r4
  402a6a:	f816 3b01 	ldrb.w	r3, [r6], #1
  402a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  402a70:	2b00      	cmp	r3, #0
  402a72:	d1d2      	bne.n	402a1a <__svfiscanf_r+0x4e>
  402a74:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402a78:	07da      	lsls	r2, r3, #31
  402a7a:	f100 81a7 	bmi.w	402dcc <__svfiscanf_r+0x400>
  402a7e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402a82:	059b      	lsls	r3, r3, #22
  402a84:	f100 81a2 	bmi.w	402dcc <__svfiscanf_r+0x400>
  402a88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402a8c:	f001 fb10 	bl	4040b0 <__retarget_lock_release_recursive>
  402a90:	e19c      	b.n	402dcc <__svfiscanf_r+0x400>
  402a92:	2b25      	cmp	r3, #37	; 0x25
  402a94:	f040 8084 	bne.w	402ba0 <__svfiscanf_r+0x1d4>
  402a98:	f894 8001 	ldrb.w	r8, [r4, #1]
  402a9c:	462c      	mov	r4, r5
  402a9e:	1c73      	adds	r3, r6, #1
  402aa0:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
  402aa4:	f200 8196 	bhi.w	402dd4 <__svfiscanf_r+0x408>
  402aa8:	e8df f018 	tbh	[pc, r8, lsl #1]
  402aac:	01940184 	.word	0x01940184
  402ab0:	01940194 	.word	0x01940194
  402ab4:	01940194 	.word	0x01940194
  402ab8:	01940194 	.word	0x01940194
  402abc:	01940194 	.word	0x01940194
  402ac0:	01940194 	.word	0x01940194
  402ac4:	01940194 	.word	0x01940194
  402ac8:	01940194 	.word	0x01940194
  402acc:	01940194 	.word	0x01940194
  402ad0:	01940194 	.word	0x01940194
  402ad4:	01940194 	.word	0x01940194
  402ad8:	01940194 	.word	0x01940194
  402adc:	01940194 	.word	0x01940194
  402ae0:	01940194 	.word	0x01940194
  402ae4:	01940194 	.word	0x01940194
  402ae8:	01940194 	.word	0x01940194
  402aec:	01940194 	.word	0x01940194
  402af0:	01940194 	.word	0x01940194
  402af4:	00790194 	.word	0x00790194
  402af8:	01940194 	.word	0x01940194
  402afc:	01940194 	.word	0x01940194
  402b00:	0194017e 	.word	0x0194017e
  402b04:	01940194 	.word	0x01940194
  402b08:	01940194 	.word	0x01940194
  402b0c:	01750175 	.word	0x01750175
  402b10:	01750175 	.word	0x01750175
  402b14:	01750175 	.word	0x01750175
  402b18:	01750175 	.word	0x01750175
  402b1c:	01750175 	.word	0x01750175
  402b20:	01940194 	.word	0x01940194
  402b24:	01940194 	.word	0x01940194
  402b28:	01940194 	.word	0x01940194
  402b2c:	01940194 	.word	0x01940194
  402b30:	01940194 	.word	0x01940194
  402b34:	01940171 	.word	0x01940171
  402b38:	01940194 	.word	0x01940194
  402b3c:	01940194 	.word	0x01940194
  402b40:	01940194 	.word	0x01940194
  402b44:	0194016b 	.word	0x0194016b
  402b48:	01310194 	.word	0x01310194
  402b4c:	01940194 	.word	0x01940194
  402b50:	01940194 	.word	0x01940194
  402b54:	01940194 	.word	0x01940194
  402b58:	01940194 	.word	0x01940194
  402b5c:	01940128 	.word	0x01940128
  402b60:	011f0194 	.word	0x011f0194
  402b64:	01940194 	.word	0x01940194
  402b68:	01940194 	.word	0x01940194
  402b6c:	01940194 	.word	0x01940194
  402b70:	011a0194 	.word	0x011a0194
  402b74:	01940108 	.word	0x01940108
  402b78:	01940194 	.word	0x01940194
  402b7c:	00930102 	.word	0x00930102
  402b80:	01940194 	.word	0x01940194
  402b84:	01940161 	.word	0x01940161
  402b88:	0148014a 	.word	0x0148014a
  402b8c:	01940144 	.word	0x01940144
  402b90:	01410194 	.word	0x01410194
  402b94:	013a0194 	.word	0x013a0194
  402b98:	01940194 	.word	0x01940194
  402b9c:	0128      	.short	0x0128
  402b9e:	461e      	mov	r6, r3
  402ba0:	f8db 3004 	ldr.w	r3, [fp, #4]
  402ba4:	2b00      	cmp	r3, #0
  402ba6:	f340 8392 	ble.w	4032ce <__svfiscanf_r+0x902>
  402baa:	f8db 3000 	ldr.w	r3, [fp]
  402bae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
  402bb2:	7819      	ldrb	r1, [r3, #0]
  402bb4:	4291      	cmp	r1, r2
  402bb6:	f47f af5d 	bne.w	402a74 <__svfiscanf_r+0xa8>
  402bba:	f8db 2004 	ldr.w	r2, [fp, #4]
  402bbe:	3301      	adds	r3, #1
  402bc0:	3a01      	subs	r2, #1
  402bc2:	f8cb 3000 	str.w	r3, [fp]
  402bc6:	f10a 0a01 	add.w	sl, sl, #1
  402bca:	f8cb 2004 	str.w	r2, [fp, #4]
  402bce:	4634      	mov	r4, r6
  402bd0:	e74a      	b.n	402a68 <__svfiscanf_r+0x9c>
  402bd2:	9303      	str	r3, [sp, #12]
  402bd4:	4bb2      	ldr	r3, [pc, #712]	; (402ea0 <__svfiscanf_r+0x4d4>)
  402bd6:	9307      	str	r3, [sp, #28]
  402bd8:	2300      	movs	r3, #0
  402bda:	9304      	str	r3, [sp, #16]
  402bdc:	2603      	movs	r6, #3
  402bde:	f8db 3004 	ldr.w	r3, [fp, #4]
  402be2:	2b00      	cmp	r3, #0
  402be4:	dd75      	ble.n	402cd2 <__svfiscanf_r+0x306>
  402be6:	0669      	lsls	r1, r5, #25
  402be8:	d533      	bpl.n	402c52 <__svfiscanf_r+0x286>
  402bea:	2e02      	cmp	r6, #2
  402bec:	f000 820d 	beq.w	40300a <__svfiscanf_r+0x63e>
  402bf0:	2e03      	cmp	r6, #3
  402bf2:	f000 8159 	beq.w	402ea8 <__svfiscanf_r+0x4dc>
  402bf6:	2e01      	cmp	r6, #1
  402bf8:	f000 8120 	beq.w	402e3c <__svfiscanf_r+0x470>
  402bfc:	2c00      	cmp	r4, #0
  402bfe:	bf08      	it	eq
  402c00:	2401      	moveq	r4, #1
  402c02:	f015 0301 	ands.w	r3, r5, #1
  402c06:	f040 825d 	bne.w	4030c4 <__svfiscanf_r+0x6f8>
  402c0a:	06ed      	lsls	r5, r5, #27
  402c0c:	f140 830b 	bpl.w	403226 <__svfiscanf_r+0x85a>
  402c10:	461d      	mov	r5, r3
  402c12:	e009      	b.n	402c28 <__svfiscanf_r+0x25c>
  402c14:	4413      	add	r3, r2
  402c16:	f8cb 3000 	str.w	r3, [fp]
  402c1a:	4415      	add	r5, r2
  402c1c:	1aa4      	subs	r4, r4, r2
  402c1e:	f002 f8c9 	bl	404db4 <__srefill_r>
  402c22:	2800      	cmp	r0, #0
  402c24:	f040 82fb 	bne.w	40321e <__svfiscanf_r+0x852>
  402c28:	f8db 2004 	ldr.w	r2, [fp, #4]
  402c2c:	f8db 3000 	ldr.w	r3, [fp]
  402c30:	42a2      	cmp	r2, r4
  402c32:	4659      	mov	r1, fp
  402c34:	4638      	mov	r0, r7
  402c36:	dbed      	blt.n	402c14 <__svfiscanf_r+0x248>
  402c38:	1b12      	subs	r2, r2, r4
  402c3a:	4423      	add	r3, r4
  402c3c:	f8cb 2004 	str.w	r2, [fp, #4]
  402c40:	4425      	add	r5, r4
  402c42:	f8cb 3000 	str.w	r3, [fp]
  402c46:	9e03      	ldr	r6, [sp, #12]
  402c48:	44aa      	add	sl, r5
  402c4a:	4634      	mov	r4, r6
  402c4c:	e70c      	b.n	402a68 <__svfiscanf_r+0x9c>
  402c4e:	f8cb 3000 	str.w	r3, [fp]
  402c52:	f001 fa19 	bl	404088 <__locale_ctype_ptr>
  402c56:	f8db 3000 	ldr.w	r3, [fp]
  402c5a:	781a      	ldrb	r2, [r3, #0]
  402c5c:	4410      	add	r0, r2
  402c5e:	3301      	adds	r3, #1
  402c60:	7842      	ldrb	r2, [r0, #1]
  402c62:	0712      	lsls	r2, r2, #28
  402c64:	d5c1      	bpl.n	402bea <__svfiscanf_r+0x21e>
  402c66:	f8db 2004 	ldr.w	r2, [fp, #4]
  402c6a:	3a01      	subs	r2, #1
  402c6c:	2a00      	cmp	r2, #0
  402c6e:	f10a 0a01 	add.w	sl, sl, #1
  402c72:	f8cb 2004 	str.w	r2, [fp, #4]
  402c76:	dcea      	bgt.n	402c4e <__svfiscanf_r+0x282>
  402c78:	4659      	mov	r1, fp
  402c7a:	4638      	mov	r0, r7
  402c7c:	f002 f89a 	bl	404db4 <__srefill_r>
  402c80:	2800      	cmp	r0, #0
  402c82:	d0e6      	beq.n	402c52 <__svfiscanf_r+0x286>
  402c84:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402c88:	07dc      	lsls	r4, r3, #31
  402c8a:	d404      	bmi.n	402c96 <__svfiscanf_r+0x2ca>
  402c8c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402c90:	0598      	lsls	r0, r3, #22
  402c92:	f140 82b0 	bpl.w	4031f6 <__svfiscanf_r+0x82a>
  402c96:	9b05      	ldr	r3, [sp, #20]
  402c98:	2b00      	cmp	r3, #0
  402c9a:	f000 8094 	beq.w	402dc6 <__svfiscanf_r+0x3fa>
  402c9e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402ca2:	0659      	lsls	r1, r3, #25
  402ca4:	f100 808f 	bmi.w	402dc6 <__svfiscanf_r+0x3fa>
  402ca8:	9805      	ldr	r0, [sp, #20]
  402caa:	b059      	add	sp, #356	; 0x164
  402cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cb0:	f896 8001 	ldrb.w	r8, [r6, #1]
  402cb4:	f045 0504 	orr.w	r5, r5, #4
  402cb8:	461e      	mov	r6, r3
  402cba:	e6f0      	b.n	402a9e <__svfiscanf_r+0xd2>
  402cbc:	9303      	str	r3, [sp, #12]
  402cbe:	4b78      	ldr	r3, [pc, #480]	; (402ea0 <__svfiscanf_r+0x4d4>)
  402cc0:	9307      	str	r3, [sp, #28]
  402cc2:	230a      	movs	r3, #10
  402cc4:	9304      	str	r3, [sp, #16]
  402cc6:	f8db 3004 	ldr.w	r3, [fp, #4]
  402cca:	2b00      	cmp	r3, #0
  402ccc:	f04f 0603 	mov.w	r6, #3
  402cd0:	dc89      	bgt.n	402be6 <__svfiscanf_r+0x21a>
  402cd2:	4659      	mov	r1, fp
  402cd4:	4638      	mov	r0, r7
  402cd6:	f002 f86d 	bl	404db4 <__srefill_r>
  402cda:	2800      	cmp	r0, #0
  402cdc:	d083      	beq.n	402be6 <__svfiscanf_r+0x21a>
  402cde:	e7d1      	b.n	402c84 <__svfiscanf_r+0x2b8>
  402ce0:	9303      	str	r3, [sp, #12]
  402ce2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  402ce6:	2600      	movs	r6, #0
  402ce8:	e779      	b.n	402bde <__svfiscanf_r+0x212>
  402cea:	4619      	mov	r1, r3
  402cec:	a818      	add	r0, sp, #96	; 0x60
  402cee:	f002 f8fd 	bl	404eec <__sccl>
  402cf2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  402cf6:	9003      	str	r0, [sp, #12]
  402cf8:	2601      	movs	r6, #1
  402cfa:	e770      	b.n	402bde <__svfiscanf_r+0x212>
  402cfc:	9303      	str	r3, [sp, #12]
  402cfe:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  402d02:	4b68      	ldr	r3, [pc, #416]	; (402ea4 <__svfiscanf_r+0x4d8>)
  402d04:	9307      	str	r3, [sp, #28]
  402d06:	2310      	movs	r3, #16
  402d08:	9304      	str	r3, [sp, #16]
  402d0a:	2603      	movs	r6, #3
  402d0c:	e767      	b.n	402bde <__svfiscanf_r+0x212>
  402d0e:	9303      	str	r3, [sp, #12]
  402d10:	f045 0501 	orr.w	r5, r5, #1
  402d14:	4b63      	ldr	r3, [pc, #396]	; (402ea4 <__svfiscanf_r+0x4d8>)
  402d16:	9307      	str	r3, [sp, #28]
  402d18:	2308      	movs	r3, #8
  402d1a:	9304      	str	r3, [sp, #16]
  402d1c:	2603      	movs	r6, #3
  402d1e:	e75e      	b.n	402bde <__svfiscanf_r+0x212>
  402d20:	9303      	str	r3, [sp, #12]
  402d22:	4b60      	ldr	r3, [pc, #384]	; (402ea4 <__svfiscanf_r+0x4d8>)
  402d24:	9307      	str	r3, [sp, #28]
  402d26:	230a      	movs	r3, #10
  402d28:	9304      	str	r3, [sp, #16]
  402d2a:	2603      	movs	r6, #3
  402d2c:	e757      	b.n	402bde <__svfiscanf_r+0x212>
  402d2e:	9303      	str	r3, [sp, #12]
  402d30:	2602      	movs	r6, #2
  402d32:	e754      	b.n	402bde <__svfiscanf_r+0x212>
  402d34:	9303      	str	r3, [sp, #12]
  402d36:	f445 7508 	orr.w	r5, r5, #544	; 0x220
  402d3a:	e7e2      	b.n	402d02 <__svfiscanf_r+0x336>
  402d3c:	9303      	str	r3, [sp, #12]
  402d3e:	e7e9      	b.n	402d14 <__svfiscanf_r+0x348>
  402d40:	06ea      	lsls	r2, r5, #27
  402d42:	9303      	str	r3, [sp, #12]
  402d44:	d477      	bmi.n	402e36 <__svfiscanf_r+0x46a>
  402d46:	076b      	lsls	r3, r5, #29
  402d48:	f100 82ec 	bmi.w	403324 <__svfiscanf_r+0x958>
  402d4c:	07ee      	lsls	r6, r5, #31
  402d4e:	f100 82d8 	bmi.w	403302 <__svfiscanf_r+0x936>
  402d52:	07ad      	lsls	r5, r5, #30
  402d54:	f140 82d5 	bpl.w	403302 <__svfiscanf_r+0x936>
  402d58:	9a06      	ldr	r2, [sp, #24]
  402d5a:	9e03      	ldr	r6, [sp, #12]
  402d5c:	6813      	ldr	r3, [r2, #0]
  402d5e:	4650      	mov	r0, sl
  402d60:	17c1      	asrs	r1, r0, #31
  402d62:	3204      	adds	r2, #4
  402d64:	9206      	str	r2, [sp, #24]
  402d66:	e9c3 0100 	strd	r0, r1, [r3]
  402d6a:	4634      	mov	r4, r6
  402d6c:	e67c      	b.n	402a68 <__svfiscanf_r+0x9c>
  402d6e:	f896 8001 	ldrb.w	r8, [r6, #1]
  402d72:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  402d76:	f000 82b2 	beq.w	4032de <__svfiscanf_r+0x912>
  402d7a:	f045 0501 	orr.w	r5, r5, #1
  402d7e:	461e      	mov	r6, r3
  402d80:	e68d      	b.n	402a9e <__svfiscanf_r+0xd2>
  402d82:	f896 8001 	ldrb.w	r8, [r6, #1]
  402d86:	f045 0502 	orr.w	r5, r5, #2
  402d8a:	461e      	mov	r6, r3
  402d8c:	e687      	b.n	402a9e <__svfiscanf_r+0xd2>
  402d8e:	9303      	str	r3, [sp, #12]
  402d90:	f045 0501 	orr.w	r5, r5, #1
  402d94:	e793      	b.n	402cbe <__svfiscanf_r+0x2f2>
  402d96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402d9a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
  402d9e:	3c30      	subs	r4, #48	; 0x30
  402da0:	f896 8001 	ldrb.w	r8, [r6, #1]
  402da4:	461e      	mov	r6, r3
  402da6:	e67a      	b.n	402a9e <__svfiscanf_r+0xd2>
  402da8:	f896 8001 	ldrb.w	r8, [r6, #1]
  402dac:	f045 0510 	orr.w	r5, r5, #16
  402db0:	461e      	mov	r6, r3
  402db2:	e674      	b.n	402a9e <__svfiscanf_r+0xd2>
  402db4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402db8:	07dc      	lsls	r4, r3, #31
  402dba:	d404      	bmi.n	402dc6 <__svfiscanf_r+0x3fa>
  402dbc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402dc0:	0598      	lsls	r0, r3, #22
  402dc2:	f140 8293 	bpl.w	4032ec <__svfiscanf_r+0x920>
  402dc6:	f04f 33ff 	mov.w	r3, #4294967295
  402dca:	9305      	str	r3, [sp, #20]
  402dcc:	9805      	ldr	r0, [sp, #20]
  402dce:	b059      	add	sp, #356	; 0x164
  402dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dd4:	9303      	str	r3, [sp, #12]
  402dd6:	f001 f957 	bl	404088 <__locale_ctype_ptr>
  402dda:	4440      	add	r0, r8
  402ddc:	7843      	ldrb	r3, [r0, #1]
  402dde:	f003 0303 	and.w	r3, r3, #3
  402de2:	2b01      	cmp	r3, #1
  402de4:	f47f af6b 	bne.w	402cbe <__svfiscanf_r+0x2f2>
  402de8:	f045 0501 	orr.w	r5, r5, #1
  402dec:	e767      	b.n	402cbe <__svfiscanf_r+0x2f2>
  402dee:	ab0c      	add	r3, sp, #48	; 0x30
  402df0:	4618      	mov	r0, r3
  402df2:	2208      	movs	r2, #8
  402df4:	2100      	movs	r1, #0
  402df6:	9308      	str	r3, [sp, #32]
  402df8:	f7fe fe00 	bl	4019fc <memset>
  402dfc:	f015 0310 	ands.w	r3, r5, #16
  402e00:	9309      	str	r3, [sp, #36]	; 0x24
  402e02:	f000 81eb 	beq.w	4031dc <__svfiscanf_r+0x810>
  402e06:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  402e0a:	2600      	movs	r6, #0
  402e0c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  402e10:	f001 f93a 	bl	404088 <__locale_ctype_ptr>
  402e14:	f8db 3000 	ldr.w	r3, [fp]
  402e18:	781b      	ldrb	r3, [r3, #0]
  402e1a:	4403      	add	r3, r0
  402e1c:	785b      	ldrb	r3, [r3, #1]
  402e1e:	071a      	lsls	r2, r3, #28
  402e20:	d402      	bmi.n	402e28 <__svfiscanf_r+0x45c>
  402e22:	2c00      	cmp	r4, #0
  402e24:	f040 8289 	bne.w	40333a <__svfiscanf_r+0x96e>
  402e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402e2a:	b923      	cbnz	r3, 402e36 <__svfiscanf_r+0x46a>
  402e2c:	f8c9 3000 	str.w	r3, [r9]
  402e30:	9b05      	ldr	r3, [sp, #20]
  402e32:	3301      	adds	r3, #1
  402e34:	9305      	str	r3, [sp, #20]
  402e36:	9e03      	ldr	r6, [sp, #12]
  402e38:	4634      	mov	r4, r6
  402e3a:	e615      	b.n	402a68 <__svfiscanf_r+0x9c>
  402e3c:	2c00      	cmp	r4, #0
  402e3e:	bf08      	it	eq
  402e40:	f04f 34ff 	moveq.w	r4, #4294967295
  402e44:	06e8      	lsls	r0, r5, #27
  402e46:	f140 810b 	bpl.w	403060 <__svfiscanf_r+0x694>
  402e4a:	f8db 2000 	ldr.w	r2, [fp]
  402e4e:	2500      	movs	r5, #0
  402e50:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  402e54:	7813      	ldrb	r3, [r2, #0]
  402e56:	f818 3003 	ldrb.w	r3, [r8, r3]
  402e5a:	3201      	adds	r2, #1
  402e5c:	b1db      	cbz	r3, 402e96 <__svfiscanf_r+0x4ca>
  402e5e:	f8db 3004 	ldr.w	r3, [fp, #4]
  402e62:	f8cb 2000 	str.w	r2, [fp]
  402e66:	3501      	adds	r5, #1
  402e68:	3b01      	subs	r3, #1
  402e6a:	42ac      	cmp	r4, r5
  402e6c:	f8cb 3004 	str.w	r3, [fp, #4]
  402e70:	f43f aee9 	beq.w	402c46 <__svfiscanf_r+0x27a>
  402e74:	2b00      	cmp	r3, #0
  402e76:	dced      	bgt.n	402e54 <__svfiscanf_r+0x488>
  402e78:	4659      	mov	r1, fp
  402e7a:	4638      	mov	r0, r7
  402e7c:	f001 ff9a 	bl	404db4 <__srefill_r>
  402e80:	2800      	cmp	r0, #0
  402e82:	f47f aee0 	bne.w	402c46 <__svfiscanf_r+0x27a>
  402e86:	f8db 2000 	ldr.w	r2, [fp]
  402e8a:	7813      	ldrb	r3, [r2, #0]
  402e8c:	f818 3003 	ldrb.w	r3, [r8, r3]
  402e90:	3201      	adds	r2, #1
  402e92:	2b00      	cmp	r3, #0
  402e94:	d1e3      	bne.n	402e5e <__svfiscanf_r+0x492>
  402e96:	2d00      	cmp	r5, #0
  402e98:	f47f aed5 	bne.w	402c46 <__svfiscanf_r+0x27a>
  402e9c:	e5ea      	b.n	402a74 <__svfiscanf_r+0xa8>
  402e9e:	bf00      	nop
  402ea0:	00405205 	.word	0x00405205
  402ea4:	00405531 	.word	0x00405531
  402ea8:	1e63      	subs	r3, r4, #1
  402eaa:	2b26      	cmp	r3, #38	; 0x26
  402eac:	bf8c      	ite	hi
  402eae:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
  402eb2:	2200      	movls	r2, #0
  402eb4:	f04f 0900 	mov.w	r9, #0
  402eb8:	4611      	mov	r1, r2
  402eba:	ae0e      	add	r6, sp, #56	; 0x38
  402ebc:	464b      	mov	r3, r9
  402ebe:	46b9      	mov	r9, r7
  402ec0:	9f04      	ldr	r7, [sp, #16]
  402ec2:	4652      	mov	r2, sl
  402ec4:	bf88      	it	hi
  402ec6:	2427      	movhi	r4, #39	; 0x27
  402ec8:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
  402ecc:	46b0      	mov	r8, r6
  402ece:	468a      	mov	sl, r1
  402ed0:	f8db 0000 	ldr.w	r0, [fp]
  402ed4:	f890 e000 	ldrb.w	lr, [r0]
  402ed8:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
  402edc:	294d      	cmp	r1, #77	; 0x4d
  402ede:	d842      	bhi.n	402f66 <__svfiscanf_r+0x59a>
  402ee0:	e8df f001 	tbb	[pc, r1]
  402ee4:	418e418e 	.word	0x418e418e
  402ee8:	63636941 	.word	0x63636941
  402eec:	63636363 	.word	0x63636363
  402ef0:	415d5d63 	.word	0x415d5d63
  402ef4:	41414141 	.word	0x41414141
  402ef8:	58584141 	.word	0x58584141
  402efc:	58585858 	.word	0x58585858
  402f00:	41414141 	.word	0x41414141
  402f04:	41414141 	.word	0x41414141
  402f08:	41414141 	.word	0x41414141
  402f0c:	41414141 	.word	0x41414141
  402f10:	41412741 	.word	0x41412741
  402f14:	41414141 	.word	0x41414141
  402f18:	58584141 	.word	0x58584141
  402f1c:	58585858 	.word	0x58585858
  402f20:	41414141 	.word	0x41414141
  402f24:	41414141 	.word	0x41414141
  402f28:	41414141 	.word	0x41414141
  402f2c:	41414141 	.word	0x41414141
  402f30:	2741      	.short	0x2741
  402f32:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
  402f36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  402f3a:	d114      	bne.n	402f66 <__svfiscanf_r+0x59a>
  402f3c:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  402f40:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
  402f44:	2710      	movs	r7, #16
  402f46:	f8db 1004 	ldr.w	r1, [fp, #4]
  402f4a:	f888 e000 	strb.w	lr, [r8]
  402f4e:	3901      	subs	r1, #1
  402f50:	2900      	cmp	r1, #0
  402f52:	f108 0801 	add.w	r8, r8, #1
  402f56:	f8cb 1004 	str.w	r1, [fp, #4]
  402f5a:	dd46      	ble.n	402fea <__svfiscanf_r+0x61e>
  402f5c:	3001      	adds	r0, #1
  402f5e:	f8cb 0000 	str.w	r0, [fp]
  402f62:	3c01      	subs	r4, #1
  402f64:	d1b4      	bne.n	402ed0 <__svfiscanf_r+0x504>
  402f66:	05e9      	lsls	r1, r5, #23
  402f68:	9704      	str	r7, [sp, #16]
  402f6a:	4692      	mov	sl, r2
  402f6c:	464f      	mov	r7, r9
  402f6e:	4699      	mov	r9, r3
  402f70:	d505      	bpl.n	402f7e <__svfiscanf_r+0x5b2>
  402f72:	45b0      	cmp	r8, r6
  402f74:	f200 81a2 	bhi.w	4032bc <__svfiscanf_r+0x8f0>
  402f78:	45b0      	cmp	r8, r6
  402f7a:	f43f ad7b 	beq.w	402a74 <__svfiscanf_r+0xa8>
  402f7e:	f015 0410 	ands.w	r4, r5, #16
  402f82:	f000 80e5 	beq.w	403150 <__svfiscanf_r+0x784>
  402f86:	eba8 0606 	sub.w	r6, r8, r6
  402f8a:	44b1      	add	r9, r6
  402f8c:	9e03      	ldr	r6, [sp, #12]
  402f8e:	44ca      	add	sl, r9
  402f90:	4634      	mov	r4, r6
  402f92:	e569      	b.n	402a68 <__svfiscanf_r+0x9c>
  402f94:	2f0a      	cmp	r7, #10
  402f96:	dde6      	ble.n	402f66 <__svfiscanf_r+0x59a>
  402f98:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  402f9c:	e7d3      	b.n	402f46 <__svfiscanf_r+0x57a>
  402f9e:	49ac      	ldr	r1, [pc, #688]	; (403250 <__svfiscanf_r+0x884>)
  402fa0:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  402fa4:	2f08      	cmp	r7, #8
  402fa6:	dcf7      	bgt.n	402f98 <__svfiscanf_r+0x5cc>
  402fa8:	e7dd      	b.n	402f66 <__svfiscanf_r+0x59a>
  402faa:	49a9      	ldr	r1, [pc, #676]	; (403250 <__svfiscanf_r+0x884>)
  402fac:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  402fb0:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  402fb4:	e7c7      	b.n	402f46 <__svfiscanf_r+0x57a>
  402fb6:	0529      	lsls	r1, r5, #20
  402fb8:	d5c5      	bpl.n	402f46 <__svfiscanf_r+0x57a>
  402fba:	b917      	cbnz	r7, 402fc2 <__svfiscanf_r+0x5f6>
  402fbc:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  402fc0:	2708      	movs	r7, #8
  402fc2:	0569      	lsls	r1, r5, #21
  402fc4:	f100 80eb 	bmi.w	40319e <__svfiscanf_r+0x7d2>
  402fc8:	f425 7560 	bic.w	r5, r5, #896	; 0x380
  402fcc:	f1ba 0f00 	cmp.w	sl, #0
  402fd0:	d002      	beq.n	402fd8 <__svfiscanf_r+0x60c>
  402fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
  402fd6:	3401      	adds	r4, #1
  402fd8:	f8db 1004 	ldr.w	r1, [fp, #4]
  402fdc:	3901      	subs	r1, #1
  402fde:	2900      	cmp	r1, #0
  402fe0:	f103 0301 	add.w	r3, r3, #1
  402fe4:	f8cb 1004 	str.w	r1, [fp, #4]
  402fe8:	dcb8      	bgt.n	402f5c <__svfiscanf_r+0x590>
  402fea:	4659      	mov	r1, fp
  402fec:	4648      	mov	r0, r9
  402fee:	9308      	str	r3, [sp, #32]
  402ff0:	9204      	str	r2, [sp, #16]
  402ff2:	f001 fedf 	bl	404db4 <__srefill_r>
  402ff6:	9a04      	ldr	r2, [sp, #16]
  402ff8:	9b08      	ldr	r3, [sp, #32]
  402ffa:	2800      	cmp	r0, #0
  402ffc:	d0b1      	beq.n	402f62 <__svfiscanf_r+0x596>
  402ffe:	e7b2      	b.n	402f66 <__svfiscanf_r+0x59a>
  403000:	0629      	lsls	r1, r5, #24
  403002:	d5b0      	bpl.n	402f66 <__svfiscanf_r+0x59a>
  403004:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  403008:	e79d      	b.n	402f46 <__svfiscanf_r+0x57a>
  40300a:	2c00      	cmp	r4, #0
  40300c:	bf08      	it	eq
  40300e:	f04f 34ff 	moveq.w	r4, #4294967295
  403012:	f015 0601 	ands.w	r6, r5, #1
  403016:	f47f aeea 	bne.w	402dee <__svfiscanf_r+0x422>
  40301a:	06eb      	lsls	r3, r5, #27
  40301c:	f140 811c 	bpl.w	403258 <__svfiscanf_r+0x88c>
  403020:	f001 f832 	bl	404088 <__locale_ctype_ptr>
  403024:	f8db 3000 	ldr.w	r3, [fp]
  403028:	781a      	ldrb	r2, [r3, #0]
  40302a:	4410      	add	r0, r2
  40302c:	3301      	adds	r3, #1
  40302e:	7842      	ldrb	r2, [r0, #1]
  403030:	0715      	lsls	r5, r2, #28
  403032:	d411      	bmi.n	403058 <__svfiscanf_r+0x68c>
  403034:	f8db 2004 	ldr.w	r2, [fp, #4]
  403038:	f8cb 3000 	str.w	r3, [fp]
  40303c:	3601      	adds	r6, #1
  40303e:	3a01      	subs	r2, #1
  403040:	42b4      	cmp	r4, r6
  403042:	f8cb 2004 	str.w	r2, [fp, #4]
  403046:	d007      	beq.n	403058 <__svfiscanf_r+0x68c>
  403048:	2a00      	cmp	r2, #0
  40304a:	dce9      	bgt.n	403020 <__svfiscanf_r+0x654>
  40304c:	4659      	mov	r1, fp
  40304e:	4638      	mov	r0, r7
  403050:	f001 feb0 	bl	404db4 <__srefill_r>
  403054:	2800      	cmp	r0, #0
  403056:	d0e3      	beq.n	403020 <__svfiscanf_r+0x654>
  403058:	44b2      	add	sl, r6
  40305a:	9e03      	ldr	r6, [sp, #12]
  40305c:	4634      	mov	r4, r6
  40305e:	e503      	b.n	402a68 <__svfiscanf_r+0x9c>
  403060:	9a06      	ldr	r2, [sp, #24]
  403062:	6815      	ldr	r5, [r2, #0]
  403064:	1d16      	adds	r6, r2, #4
  403066:	46a9      	mov	r9, r5
  403068:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  40306c:	f8db 3000 	ldr.w	r3, [fp]
  403070:	781a      	ldrb	r2, [r3, #0]
  403072:	f818 2002 	ldrb.w	r2, [r8, r2]
  403076:	1c59      	adds	r1, r3, #1
  403078:	b1c2      	cbz	r2, 4030ac <__svfiscanf_r+0x6e0>
  40307a:	f8db 2004 	ldr.w	r2, [fp, #4]
  40307e:	f8cb 1000 	str.w	r1, [fp]
  403082:	3a01      	subs	r2, #1
  403084:	f8cb 2004 	str.w	r2, [fp, #4]
  403088:	781b      	ldrb	r3, [r3, #0]
  40308a:	f809 3b01 	strb.w	r3, [r9], #1
  40308e:	3c01      	subs	r4, #1
  403090:	d00c      	beq.n	4030ac <__svfiscanf_r+0x6e0>
  403092:	f8db 3004 	ldr.w	r3, [fp, #4]
  403096:	2b00      	cmp	r3, #0
  403098:	dce8      	bgt.n	40306c <__svfiscanf_r+0x6a0>
  40309a:	4659      	mov	r1, fp
  40309c:	4638      	mov	r0, r7
  40309e:	f001 fe89 	bl	404db4 <__srefill_r>
  4030a2:	2800      	cmp	r0, #0
  4030a4:	d0e2      	beq.n	40306c <__svfiscanf_r+0x6a0>
  4030a6:	454d      	cmp	r5, r9
  4030a8:	f43f adec 	beq.w	402c84 <__svfiscanf_r+0x2b8>
  4030ac:	ebb9 0505 	subs.w	r5, r9, r5
  4030b0:	f43f ace0 	beq.w	402a74 <__svfiscanf_r+0xa8>
  4030b4:	9a05      	ldr	r2, [sp, #20]
  4030b6:	9606      	str	r6, [sp, #24]
  4030b8:	2300      	movs	r3, #0
  4030ba:	3201      	adds	r2, #1
  4030bc:	9205      	str	r2, [sp, #20]
  4030be:	f889 3000 	strb.w	r3, [r9]
  4030c2:	e5c0      	b.n	402c46 <__svfiscanf_r+0x27a>
  4030c4:	ab0c      	add	r3, sp, #48	; 0x30
  4030c6:	4618      	mov	r0, r3
  4030c8:	2208      	movs	r2, #8
  4030ca:	2100      	movs	r1, #0
  4030cc:	9308      	str	r3, [sp, #32]
  4030ce:	f7fe fc95 	bl	4019fc <memset>
  4030d2:	f015 0310 	ands.w	r3, r5, #16
  4030d6:	9309      	str	r3, [sp, #36]	; 0x24
  4030d8:	d077      	beq.n	4031ca <__svfiscanf_r+0x7fe>
  4030da:	f04f 0900 	mov.w	r9, #0
  4030de:	2c00      	cmp	r4, #0
  4030e0:	f43f aea9 	beq.w	402e36 <__svfiscanf_r+0x46a>
  4030e4:	2500      	movs	r5, #0
  4030e6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  4030ea:	f000 ffbb 	bl	404064 <__locale_mb_cur_max>
  4030ee:	42a8      	cmp	r0, r5
  4030f0:	f43f adc8 	beq.w	402c84 <__svfiscanf_r+0x2b8>
  4030f4:	e89b 000c 	ldmia.w	fp, {r2, r3}
  4030f8:	f812 0b01 	ldrb.w	r0, [r2], #1
  4030fc:	f8cb 2000 	str.w	r2, [fp]
  403100:	3b01      	subs	r3, #1
  403102:	9a08      	ldr	r2, [sp, #32]
  403104:	9200      	str	r2, [sp, #0]
  403106:	1c6e      	adds	r6, r5, #1
  403108:	f8cb 3004 	str.w	r3, [fp, #4]
  40310c:	f808 0005 	strb.w	r0, [r8, r5]
  403110:	4633      	mov	r3, r6
  403112:	4642      	mov	r2, r8
  403114:	4649      	mov	r1, r9
  403116:	4638      	mov	r0, r7
  403118:	f001 fafc 	bl	404714 <_mbrtowc_r>
  40311c:	1c43      	adds	r3, r0, #1
  40311e:	f43f adb1 	beq.w	402c84 <__svfiscanf_r+0x2b8>
  403122:	2800      	cmp	r0, #0
  403124:	d16c      	bne.n	403200 <__svfiscanf_r+0x834>
  403126:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403128:	2b00      	cmp	r3, #0
  40312a:	d16d      	bne.n	403208 <__svfiscanf_r+0x83c>
  40312c:	f8c9 3000 	str.w	r3, [r9]
  403130:	44b2      	add	sl, r6
  403132:	3c01      	subs	r4, #1
  403134:	f109 0904 	add.w	r9, r9, #4
  403138:	2500      	movs	r5, #0
  40313a:	f8db 3004 	ldr.w	r3, [fp, #4]
  40313e:	2b00      	cmp	r3, #0
  403140:	dd30      	ble.n	4031a4 <__svfiscanf_r+0x7d8>
  403142:	2c00      	cmp	r4, #0
  403144:	d1d1      	bne.n	4030ea <__svfiscanf_r+0x71e>
  403146:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403148:	2b00      	cmp	r3, #0
  40314a:	f47f ae74 	bne.w	402e36 <__svfiscanf_r+0x46a>
  40314e:	e66f      	b.n	402e30 <__svfiscanf_r+0x464>
  403150:	4622      	mov	r2, r4
  403152:	f888 4000 	strb.w	r4, [r8]
  403156:	9b04      	ldr	r3, [sp, #16]
  403158:	9c07      	ldr	r4, [sp, #28]
  40315a:	4631      	mov	r1, r6
  40315c:	4638      	mov	r0, r7
  40315e:	47a0      	blx	r4
  403160:	06aa      	lsls	r2, r5, #26
  403162:	d442      	bmi.n	4031ea <__svfiscanf_r+0x81e>
  403164:	076b      	lsls	r3, r5, #29
  403166:	f100 80d7 	bmi.w	403318 <__svfiscanf_r+0x94c>
  40316a:	f015 0201 	ands.w	r2, r5, #1
  40316e:	d13c      	bne.n	4031ea <__svfiscanf_r+0x81e>
  403170:	07ad      	lsls	r5, r5, #30
  403172:	d53a      	bpl.n	4031ea <__svfiscanf_r+0x81e>
  403174:	9b07      	ldr	r3, [sp, #28]
  403176:	4619      	mov	r1, r3
  403178:	4b36      	ldr	r3, [pc, #216]	; (403254 <__svfiscanf_r+0x888>)
  40317a:	4299      	cmp	r1, r3
  40317c:	4638      	mov	r0, r7
  40317e:	9b04      	ldr	r3, [sp, #16]
  403180:	4631      	mov	r1, r6
  403182:	f000 811e 	beq.w	4033c2 <__svfiscanf_r+0x9f6>
  403186:	f002 f91d 	bl	4053c4 <_strtoll_r>
  40318a:	9a06      	ldr	r2, [sp, #24]
  40318c:	6813      	ldr	r3, [r2, #0]
  40318e:	e9c3 0100 	strd	r0, r1, [r3]
  403192:	3204      	adds	r2, #4
  403194:	9206      	str	r2, [sp, #24]
  403196:	9b05      	ldr	r3, [sp, #20]
  403198:	3301      	adds	r3, #1
  40319a:	9305      	str	r3, [sp, #20]
  40319c:	e6f3      	b.n	402f86 <__svfiscanf_r+0x5ba>
  40319e:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
  4031a2:	e6d0      	b.n	402f46 <__svfiscanf_r+0x57a>
  4031a4:	4659      	mov	r1, fp
  4031a6:	4638      	mov	r0, r7
  4031a8:	f001 fe04 	bl	404db4 <__srefill_r>
  4031ac:	2800      	cmp	r0, #0
  4031ae:	d0c8      	beq.n	403142 <__svfiscanf_r+0x776>
  4031b0:	2d00      	cmp	r5, #0
  4031b2:	d0c8      	beq.n	403146 <__svfiscanf_r+0x77a>
  4031b4:	e566      	b.n	402c84 <__svfiscanf_r+0x2b8>
  4031b6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4031ba:	9203      	str	r2, [sp, #12]
  4031bc:	f000 ff76 	bl	4040ac <__retarget_lock_acquire_recursive>
  4031c0:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
  4031c4:	9a03      	ldr	r2, [sp, #12]
  4031c6:	b299      	uxth	r1, r3
  4031c8:	e410      	b.n	4029ec <__svfiscanf_r+0x20>
  4031ca:	9a06      	ldr	r2, [sp, #24]
  4031cc:	4613      	mov	r3, r2
  4031ce:	3304      	adds	r3, #4
  4031d0:	f8d2 9000 	ldr.w	r9, [r2]
  4031d4:	9306      	str	r3, [sp, #24]
  4031d6:	2c00      	cmp	r4, #0
  4031d8:	d184      	bne.n	4030e4 <__svfiscanf_r+0x718>
  4031da:	e629      	b.n	402e30 <__svfiscanf_r+0x464>
  4031dc:	9a06      	ldr	r2, [sp, #24]
  4031de:	4613      	mov	r3, r2
  4031e0:	3304      	adds	r3, #4
  4031e2:	f8d2 9000 	ldr.w	r9, [r2]
  4031e6:	9306      	str	r3, [sp, #24]
  4031e8:	e60f      	b.n	402e0a <__svfiscanf_r+0x43e>
  4031ea:	9a06      	ldr	r2, [sp, #24]
  4031ec:	6813      	ldr	r3, [r2, #0]
  4031ee:	3204      	adds	r2, #4
  4031f0:	9206      	str	r2, [sp, #24]
  4031f2:	6018      	str	r0, [r3, #0]
  4031f4:	e7cf      	b.n	403196 <__svfiscanf_r+0x7ca>
  4031f6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4031fa:	f000 ff59 	bl	4040b0 <__retarget_lock_release_recursive>
  4031fe:	e54a      	b.n	402c96 <__svfiscanf_r+0x2ca>
  403200:	3002      	adds	r0, #2
  403202:	d105      	bne.n	403210 <__svfiscanf_r+0x844>
  403204:	4635      	mov	r5, r6
  403206:	e798      	b.n	40313a <__svfiscanf_r+0x76e>
  403208:	44b2      	add	sl, r6
  40320a:	3c01      	subs	r4, #1
  40320c:	4605      	mov	r5, r0
  40320e:	e794      	b.n	40313a <__svfiscanf_r+0x76e>
  403210:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403212:	44b2      	add	sl, r6
  403214:	3c01      	subs	r4, #1
  403216:	2b00      	cmp	r3, #0
  403218:	d08c      	beq.n	403134 <__svfiscanf_r+0x768>
  40321a:	2500      	movs	r5, #0
  40321c:	e78d      	b.n	40313a <__svfiscanf_r+0x76e>
  40321e:	2d00      	cmp	r5, #0
  403220:	f47f ad11 	bne.w	402c46 <__svfiscanf_r+0x27a>
  403224:	e52e      	b.n	402c84 <__svfiscanf_r+0x2b8>
  403226:	9d06      	ldr	r5, [sp, #24]
  403228:	4623      	mov	r3, r4
  40322a:	6829      	ldr	r1, [r5, #0]
  40322c:	f8cd b000 	str.w	fp, [sp]
  403230:	2201      	movs	r2, #1
  403232:	4638      	mov	r0, r7
  403234:	f000 fb28 	bl	403888 <_fread_r>
  403238:	1d2e      	adds	r6, r5, #4
  40323a:	2800      	cmp	r0, #0
  40323c:	f43f ad22 	beq.w	402c84 <__svfiscanf_r+0x2b8>
  403240:	9b05      	ldr	r3, [sp, #20]
  403242:	9606      	str	r6, [sp, #24]
  403244:	9e03      	ldr	r6, [sp, #12]
  403246:	3301      	adds	r3, #1
  403248:	4482      	add	sl, r0
  40324a:	9305      	str	r3, [sp, #20]
  40324c:	4634      	mov	r4, r6
  40324e:	e40b      	b.n	402a68 <__svfiscanf_r+0x9c>
  403250:	00406418 	.word	0x00406418
  403254:	00405531 	.word	0x00405531
  403258:	9a06      	ldr	r2, [sp, #24]
  40325a:	6816      	ldr	r6, [r2, #0]
  40325c:	f102 0804 	add.w	r8, r2, #4
  403260:	4635      	mov	r5, r6
  403262:	f000 ff11 	bl	404088 <__locale_ctype_ptr>
  403266:	f8db 2000 	ldr.w	r2, [fp]
  40326a:	7813      	ldrb	r3, [r2, #0]
  40326c:	4418      	add	r0, r3
  40326e:	1c51      	adds	r1, r2, #1
  403270:	7843      	ldrb	r3, [r0, #1]
  403272:	0718      	lsls	r0, r3, #28
  403274:	d415      	bmi.n	4032a2 <__svfiscanf_r+0x8d6>
  403276:	f8db 3004 	ldr.w	r3, [fp, #4]
  40327a:	f8cb 1000 	str.w	r1, [fp]
  40327e:	3b01      	subs	r3, #1
  403280:	f8cb 3004 	str.w	r3, [fp, #4]
  403284:	7813      	ldrb	r3, [r2, #0]
  403286:	f805 3b01 	strb.w	r3, [r5], #1
  40328a:	3c01      	subs	r4, #1
  40328c:	d009      	beq.n	4032a2 <__svfiscanf_r+0x8d6>
  40328e:	f8db 3004 	ldr.w	r3, [fp, #4]
  403292:	2b00      	cmp	r3, #0
  403294:	dce5      	bgt.n	403262 <__svfiscanf_r+0x896>
  403296:	4659      	mov	r1, fp
  403298:	4638      	mov	r0, r7
  40329a:	f001 fd8b 	bl	404db4 <__srefill_r>
  40329e:	2800      	cmp	r0, #0
  4032a0:	d0df      	beq.n	403262 <__svfiscanf_r+0x896>
  4032a2:	1bae      	subs	r6, r5, r6
  4032a4:	9a05      	ldr	r2, [sp, #20]
  4032a6:	f8cd 8018 	str.w	r8, [sp, #24]
  4032aa:	44b2      	add	sl, r6
  4032ac:	9e03      	ldr	r6, [sp, #12]
  4032ae:	2300      	movs	r3, #0
  4032b0:	3201      	adds	r2, #1
  4032b2:	9205      	str	r2, [sp, #20]
  4032b4:	702b      	strb	r3, [r5, #0]
  4032b6:	4634      	mov	r4, r6
  4032b8:	f7ff bbd6 	b.w	402a68 <__svfiscanf_r+0x9c>
  4032bc:	f818 1c01 	ldrb.w	r1, [r8, #-1]
  4032c0:	465a      	mov	r2, fp
  4032c2:	4638      	mov	r0, r7
  4032c4:	f002 fa72 	bl	4057ac <_ungetc_r>
  4032c8:	f108 38ff 	add.w	r8, r8, #4294967295
  4032cc:	e654      	b.n	402f78 <__svfiscanf_r+0x5ac>
  4032ce:	4659      	mov	r1, fp
  4032d0:	4638      	mov	r0, r7
  4032d2:	f001 fd6f 	bl	404db4 <__srefill_r>
  4032d6:	2800      	cmp	r0, #0
  4032d8:	f43f ac67 	beq.w	402baa <__svfiscanf_r+0x1de>
  4032dc:	e4d2      	b.n	402c84 <__svfiscanf_r+0x2b8>
  4032de:	f896 8002 	ldrb.w	r8, [r6, #2]
  4032e2:	f045 0502 	orr.w	r5, r5, #2
  4032e6:	3602      	adds	r6, #2
  4032e8:	f7ff bbd9 	b.w	402a9e <__svfiscanf_r+0xd2>
  4032ec:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4032f0:	f000 fede 	bl	4040b0 <__retarget_lock_release_recursive>
  4032f4:	f04f 33ff 	mov.w	r3, #4294967295
  4032f8:	9305      	str	r3, [sp, #20]
  4032fa:	9805      	ldr	r0, [sp, #20]
  4032fc:	b059      	add	sp, #356	; 0x164
  4032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403302:	9a06      	ldr	r2, [sp, #24]
  403304:	9e03      	ldr	r6, [sp, #12]
  403306:	6813      	ldr	r3, [r2, #0]
  403308:	f8c3 a000 	str.w	sl, [r3]
  40330c:	4613      	mov	r3, r2
  40330e:	3304      	adds	r3, #4
  403310:	9306      	str	r3, [sp, #24]
  403312:	4634      	mov	r4, r6
  403314:	f7ff bba8 	b.w	402a68 <__svfiscanf_r+0x9c>
  403318:	9a06      	ldr	r2, [sp, #24]
  40331a:	6813      	ldr	r3, [r2, #0]
  40331c:	3204      	adds	r2, #4
  40331e:	9206      	str	r2, [sp, #24]
  403320:	8018      	strh	r0, [r3, #0]
  403322:	e738      	b.n	403196 <__svfiscanf_r+0x7ca>
  403324:	9a06      	ldr	r2, [sp, #24]
  403326:	9e03      	ldr	r6, [sp, #12]
  403328:	6813      	ldr	r3, [r2, #0]
  40332a:	f8a3 a000 	strh.w	sl, [r3]
  40332e:	4613      	mov	r3, r2
  403330:	3304      	adds	r3, #4
  403332:	9306      	str	r3, [sp, #24]
  403334:	4634      	mov	r4, r6
  403336:	f7ff bb97 	b.w	402a68 <__svfiscanf_r+0x9c>
  40333a:	f000 fe93 	bl	404064 <__locale_mb_cur_max>
  40333e:	4286      	cmp	r6, r0
  403340:	f43f aca0 	beq.w	402c84 <__svfiscanf_r+0x2b8>
  403344:	e89b 000c 	ldmia.w	fp, {r2, r3}
  403348:	f812 0b01 	ldrb.w	r0, [r2], #1
  40334c:	f8cb 2000 	str.w	r2, [fp]
  403350:	3b01      	subs	r3, #1
  403352:	9a08      	ldr	r2, [sp, #32]
  403354:	9200      	str	r2, [sp, #0]
  403356:	1c75      	adds	r5, r6, #1
  403358:	f8cb 3004 	str.w	r3, [fp, #4]
  40335c:	4649      	mov	r1, r9
  40335e:	f808 0006 	strb.w	r0, [r8, r6]
  403362:	462b      	mov	r3, r5
  403364:	4642      	mov	r2, r8
  403366:	4638      	mov	r0, r7
  403368:	f001 f9d4 	bl	404714 <_mbrtowc_r>
  40336c:	1c41      	adds	r1, r0, #1
  40336e:	f43f ac89 	beq.w	402c84 <__svfiscanf_r+0x2b8>
  403372:	b198      	cbz	r0, 40339c <__svfiscanf_r+0x9d0>
  403374:	3002      	adds	r0, #2
  403376:	bf08      	it	eq
  403378:	462e      	moveq	r6, r5
  40337a:	d12e      	bne.n	4033da <__svfiscanf_r+0xa0e>
  40337c:	f8db 3004 	ldr.w	r3, [fp, #4]
  403380:	2b00      	cmp	r3, #0
  403382:	f73f ad45 	bgt.w	402e10 <__svfiscanf_r+0x444>
  403386:	4659      	mov	r1, fp
  403388:	4638      	mov	r0, r7
  40338a:	f001 fd13 	bl	404db4 <__srefill_r>
  40338e:	2800      	cmp	r0, #0
  403390:	f43f ad3e 	beq.w	402e10 <__svfiscanf_r+0x444>
  403394:	2e00      	cmp	r6, #0
  403396:	f47f ac75 	bne.w	402c84 <__svfiscanf_r+0x2b8>
  40339a:	e545      	b.n	402e28 <__svfiscanf_r+0x45c>
  40339c:	f8c9 0000 	str.w	r0, [r9]
  4033a0:	f000 fe52 	bl	404048 <iswspace>
  4033a4:	4606      	mov	r6, r0
  4033a6:	b178      	cbz	r0, 4033c8 <__svfiscanf_r+0x9fc>
  4033a8:	2d00      	cmp	r5, #0
  4033aa:	f43f ad3d 	beq.w	402e28 <__svfiscanf_r+0x45c>
  4033ae:	4445      	add	r5, r8
  4033b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
  4033b4:	465a      	mov	r2, fp
  4033b6:	4638      	mov	r0, r7
  4033b8:	f002 f9f8 	bl	4057ac <_ungetc_r>
  4033bc:	4545      	cmp	r5, r8
  4033be:	d1f7      	bne.n	4033b0 <__svfiscanf_r+0x9e4>
  4033c0:	e532      	b.n	402e28 <__svfiscanf_r+0x45c>
  4033c2:	f002 f9a5 	bl	405710 <_strtoull_r>
  4033c6:	e6e0      	b.n	40318a <__svfiscanf_r+0x7be>
  4033c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4033ca:	44aa      	add	sl, r5
  4033cc:	3c01      	subs	r4, #1
  4033ce:	2b00      	cmp	r3, #0
  4033d0:	d1d4      	bne.n	40337c <__svfiscanf_r+0x9b0>
  4033d2:	f109 0904 	add.w	r9, r9, #4
  4033d6:	461e      	mov	r6, r3
  4033d8:	e7d0      	b.n	40337c <__svfiscanf_r+0x9b0>
  4033da:	f8d9 0000 	ldr.w	r0, [r9]
  4033de:	e7df      	b.n	4033a0 <__svfiscanf_r+0x9d4>

004033e0 <__swsetup_r>:
  4033e0:	b538      	push	{r3, r4, r5, lr}
  4033e2:	4b30      	ldr	r3, [pc, #192]	; (4034a4 <__swsetup_r+0xc4>)
  4033e4:	681b      	ldr	r3, [r3, #0]
  4033e6:	4605      	mov	r5, r0
  4033e8:	460c      	mov	r4, r1
  4033ea:	b113      	cbz	r3, 4033f2 <__swsetup_r+0x12>
  4033ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4033ee:	2a00      	cmp	r2, #0
  4033f0:	d038      	beq.n	403464 <__swsetup_r+0x84>
  4033f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4033f6:	b293      	uxth	r3, r2
  4033f8:	0718      	lsls	r0, r3, #28
  4033fa:	d50c      	bpl.n	403416 <__swsetup_r+0x36>
  4033fc:	6920      	ldr	r0, [r4, #16]
  4033fe:	b1a8      	cbz	r0, 40342c <__swsetup_r+0x4c>
  403400:	f013 0201 	ands.w	r2, r3, #1
  403404:	d01e      	beq.n	403444 <__swsetup_r+0x64>
  403406:	6963      	ldr	r3, [r4, #20]
  403408:	2200      	movs	r2, #0
  40340a:	425b      	negs	r3, r3
  40340c:	61a3      	str	r3, [r4, #24]
  40340e:	60a2      	str	r2, [r4, #8]
  403410:	b1f0      	cbz	r0, 403450 <__swsetup_r+0x70>
  403412:	2000      	movs	r0, #0
  403414:	bd38      	pop	{r3, r4, r5, pc}
  403416:	06d9      	lsls	r1, r3, #27
  403418:	d53c      	bpl.n	403494 <__swsetup_r+0xb4>
  40341a:	0758      	lsls	r0, r3, #29
  40341c:	d426      	bmi.n	40346c <__swsetup_r+0x8c>
  40341e:	6920      	ldr	r0, [r4, #16]
  403420:	f042 0308 	orr.w	r3, r2, #8
  403424:	81a3      	strh	r3, [r4, #12]
  403426:	b29b      	uxth	r3, r3
  403428:	2800      	cmp	r0, #0
  40342a:	d1e9      	bne.n	403400 <__swsetup_r+0x20>
  40342c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403430:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403434:	d0e4      	beq.n	403400 <__swsetup_r+0x20>
  403436:	4628      	mov	r0, r5
  403438:	4621      	mov	r1, r4
  40343a:	f000 fe69 	bl	404110 <__smakebuf_r>
  40343e:	89a3      	ldrh	r3, [r4, #12]
  403440:	6920      	ldr	r0, [r4, #16]
  403442:	e7dd      	b.n	403400 <__swsetup_r+0x20>
  403444:	0799      	lsls	r1, r3, #30
  403446:	bf58      	it	pl
  403448:	6962      	ldrpl	r2, [r4, #20]
  40344a:	60a2      	str	r2, [r4, #8]
  40344c:	2800      	cmp	r0, #0
  40344e:	d1e0      	bne.n	403412 <__swsetup_r+0x32>
  403450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403454:	061a      	lsls	r2, r3, #24
  403456:	d5dd      	bpl.n	403414 <__swsetup_r+0x34>
  403458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40345c:	81a3      	strh	r3, [r4, #12]
  40345e:	f04f 30ff 	mov.w	r0, #4294967295
  403462:	bd38      	pop	{r3, r4, r5, pc}
  403464:	4618      	mov	r0, r3
  403466:	f000 f939 	bl	4036dc <__sinit>
  40346a:	e7c2      	b.n	4033f2 <__swsetup_r+0x12>
  40346c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40346e:	b151      	cbz	r1, 403486 <__swsetup_r+0xa6>
  403470:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403474:	4299      	cmp	r1, r3
  403476:	d004      	beq.n	403482 <__swsetup_r+0xa2>
  403478:	4628      	mov	r0, r5
  40347a:	f000 fb37 	bl	403aec <_free_r>
  40347e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403482:	2300      	movs	r3, #0
  403484:	6323      	str	r3, [r4, #48]	; 0x30
  403486:	2300      	movs	r3, #0
  403488:	6920      	ldr	r0, [r4, #16]
  40348a:	6063      	str	r3, [r4, #4]
  40348c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403490:	6020      	str	r0, [r4, #0]
  403492:	e7c5      	b.n	403420 <__swsetup_r+0x40>
  403494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403498:	2309      	movs	r3, #9
  40349a:	602b      	str	r3, [r5, #0]
  40349c:	f04f 30ff 	mov.w	r0, #4294967295
  4034a0:	81a2      	strh	r2, [r4, #12]
  4034a2:	bd38      	pop	{r3, r4, r5, pc}
  4034a4:	20400058 	.word	0x20400058

004034a8 <register_fini>:
  4034a8:	4b02      	ldr	r3, [pc, #8]	; (4034b4 <register_fini+0xc>)
  4034aa:	b113      	cbz	r3, 4034b2 <register_fini+0xa>
  4034ac:	4802      	ldr	r0, [pc, #8]	; (4034b8 <register_fini+0x10>)
  4034ae:	f000 b805 	b.w	4034bc <atexit>
  4034b2:	4770      	bx	lr
  4034b4:	00000000 	.word	0x00000000
  4034b8:	0040374d 	.word	0x0040374d

004034bc <atexit>:
  4034bc:	2300      	movs	r3, #0
  4034be:	4601      	mov	r1, r0
  4034c0:	461a      	mov	r2, r3
  4034c2:	4618      	mov	r0, r3
  4034c4:	f002 bab4 	b.w	405a30 <__register_exitproc>

004034c8 <__sflush_r>:
  4034c8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4034cc:	b29a      	uxth	r2, r3
  4034ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4034d2:	460d      	mov	r5, r1
  4034d4:	0711      	lsls	r1, r2, #28
  4034d6:	4680      	mov	r8, r0
  4034d8:	d43a      	bmi.n	403550 <__sflush_r+0x88>
  4034da:	686a      	ldr	r2, [r5, #4]
  4034dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4034e0:	2a00      	cmp	r2, #0
  4034e2:	81ab      	strh	r3, [r5, #12]
  4034e4:	dd6f      	ble.n	4035c6 <__sflush_r+0xfe>
  4034e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4034e8:	2c00      	cmp	r4, #0
  4034ea:	d049      	beq.n	403580 <__sflush_r+0xb8>
  4034ec:	2200      	movs	r2, #0
  4034ee:	b29b      	uxth	r3, r3
  4034f0:	f8d8 6000 	ldr.w	r6, [r8]
  4034f4:	f8c8 2000 	str.w	r2, [r8]
  4034f8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4034fc:	d067      	beq.n	4035ce <__sflush_r+0x106>
  4034fe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  403500:	075f      	lsls	r7, r3, #29
  403502:	d505      	bpl.n	403510 <__sflush_r+0x48>
  403504:	6869      	ldr	r1, [r5, #4]
  403506:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403508:	1a52      	subs	r2, r2, r1
  40350a:	b10b      	cbz	r3, 403510 <__sflush_r+0x48>
  40350c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40350e:	1ad2      	subs	r2, r2, r3
  403510:	2300      	movs	r3, #0
  403512:	69e9      	ldr	r1, [r5, #28]
  403514:	4640      	mov	r0, r8
  403516:	47a0      	blx	r4
  403518:	1c44      	adds	r4, r0, #1
  40351a:	d03c      	beq.n	403596 <__sflush_r+0xce>
  40351c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403520:	692a      	ldr	r2, [r5, #16]
  403522:	602a      	str	r2, [r5, #0]
  403524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  403528:	2200      	movs	r2, #0
  40352a:	81ab      	strh	r3, [r5, #12]
  40352c:	04db      	lsls	r3, r3, #19
  40352e:	606a      	str	r2, [r5, #4]
  403530:	d447      	bmi.n	4035c2 <__sflush_r+0xfa>
  403532:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403534:	f8c8 6000 	str.w	r6, [r8]
  403538:	b311      	cbz	r1, 403580 <__sflush_r+0xb8>
  40353a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40353e:	4299      	cmp	r1, r3
  403540:	d002      	beq.n	403548 <__sflush_r+0x80>
  403542:	4640      	mov	r0, r8
  403544:	f000 fad2 	bl	403aec <_free_r>
  403548:	2000      	movs	r0, #0
  40354a:	6328      	str	r0, [r5, #48]	; 0x30
  40354c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403550:	692e      	ldr	r6, [r5, #16]
  403552:	b1ae      	cbz	r6, 403580 <__sflush_r+0xb8>
  403554:	682c      	ldr	r4, [r5, #0]
  403556:	602e      	str	r6, [r5, #0]
  403558:	0791      	lsls	r1, r2, #30
  40355a:	bf0c      	ite	eq
  40355c:	696b      	ldreq	r3, [r5, #20]
  40355e:	2300      	movne	r3, #0
  403560:	1ba4      	subs	r4, r4, r6
  403562:	60ab      	str	r3, [r5, #8]
  403564:	e00a      	b.n	40357c <__sflush_r+0xb4>
  403566:	4623      	mov	r3, r4
  403568:	4632      	mov	r2, r6
  40356a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40356c:	69e9      	ldr	r1, [r5, #28]
  40356e:	4640      	mov	r0, r8
  403570:	47b8      	blx	r7
  403572:	2800      	cmp	r0, #0
  403574:	eba4 0400 	sub.w	r4, r4, r0
  403578:	4406      	add	r6, r0
  40357a:	dd04      	ble.n	403586 <__sflush_r+0xbe>
  40357c:	2c00      	cmp	r4, #0
  40357e:	dcf2      	bgt.n	403566 <__sflush_r+0x9e>
  403580:	2000      	movs	r0, #0
  403582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403586:	89ab      	ldrh	r3, [r5, #12]
  403588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40358c:	81ab      	strh	r3, [r5, #12]
  40358e:	f04f 30ff 	mov.w	r0, #4294967295
  403592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403596:	f8d8 4000 	ldr.w	r4, [r8]
  40359a:	2c1d      	cmp	r4, #29
  40359c:	d8f3      	bhi.n	403586 <__sflush_r+0xbe>
  40359e:	4b19      	ldr	r3, [pc, #100]	; (403604 <__sflush_r+0x13c>)
  4035a0:	40e3      	lsrs	r3, r4
  4035a2:	43db      	mvns	r3, r3
  4035a4:	f013 0301 	ands.w	r3, r3, #1
  4035a8:	d1ed      	bne.n	403586 <__sflush_r+0xbe>
  4035aa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4035ae:	606b      	str	r3, [r5, #4]
  4035b0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4035b4:	6929      	ldr	r1, [r5, #16]
  4035b6:	81ab      	strh	r3, [r5, #12]
  4035b8:	04da      	lsls	r2, r3, #19
  4035ba:	6029      	str	r1, [r5, #0]
  4035bc:	d5b9      	bpl.n	403532 <__sflush_r+0x6a>
  4035be:	2c00      	cmp	r4, #0
  4035c0:	d1b7      	bne.n	403532 <__sflush_r+0x6a>
  4035c2:	6528      	str	r0, [r5, #80]	; 0x50
  4035c4:	e7b5      	b.n	403532 <__sflush_r+0x6a>
  4035c6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4035c8:	2a00      	cmp	r2, #0
  4035ca:	dc8c      	bgt.n	4034e6 <__sflush_r+0x1e>
  4035cc:	e7d8      	b.n	403580 <__sflush_r+0xb8>
  4035ce:	2301      	movs	r3, #1
  4035d0:	69e9      	ldr	r1, [r5, #28]
  4035d2:	4640      	mov	r0, r8
  4035d4:	47a0      	blx	r4
  4035d6:	1c43      	adds	r3, r0, #1
  4035d8:	4602      	mov	r2, r0
  4035da:	d002      	beq.n	4035e2 <__sflush_r+0x11a>
  4035dc:	89ab      	ldrh	r3, [r5, #12]
  4035de:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4035e0:	e78e      	b.n	403500 <__sflush_r+0x38>
  4035e2:	f8d8 3000 	ldr.w	r3, [r8]
  4035e6:	2b00      	cmp	r3, #0
  4035e8:	d0f8      	beq.n	4035dc <__sflush_r+0x114>
  4035ea:	2b1d      	cmp	r3, #29
  4035ec:	d001      	beq.n	4035f2 <__sflush_r+0x12a>
  4035ee:	2b16      	cmp	r3, #22
  4035f0:	d102      	bne.n	4035f8 <__sflush_r+0x130>
  4035f2:	f8c8 6000 	str.w	r6, [r8]
  4035f6:	e7c3      	b.n	403580 <__sflush_r+0xb8>
  4035f8:	89ab      	ldrh	r3, [r5, #12]
  4035fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4035fe:	81ab      	strh	r3, [r5, #12]
  403600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403604:	20400001 	.word	0x20400001

00403608 <_fflush_r>:
  403608:	b538      	push	{r3, r4, r5, lr}
  40360a:	460d      	mov	r5, r1
  40360c:	4604      	mov	r4, r0
  40360e:	b108      	cbz	r0, 403614 <_fflush_r+0xc>
  403610:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403612:	b1bb      	cbz	r3, 403644 <_fflush_r+0x3c>
  403614:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  403618:	b188      	cbz	r0, 40363e <_fflush_r+0x36>
  40361a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40361c:	07db      	lsls	r3, r3, #31
  40361e:	d401      	bmi.n	403624 <_fflush_r+0x1c>
  403620:	0581      	lsls	r1, r0, #22
  403622:	d517      	bpl.n	403654 <_fflush_r+0x4c>
  403624:	4620      	mov	r0, r4
  403626:	4629      	mov	r1, r5
  403628:	f7ff ff4e 	bl	4034c8 <__sflush_r>
  40362c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40362e:	07da      	lsls	r2, r3, #31
  403630:	4604      	mov	r4, r0
  403632:	d402      	bmi.n	40363a <_fflush_r+0x32>
  403634:	89ab      	ldrh	r3, [r5, #12]
  403636:	059b      	lsls	r3, r3, #22
  403638:	d507      	bpl.n	40364a <_fflush_r+0x42>
  40363a:	4620      	mov	r0, r4
  40363c:	bd38      	pop	{r3, r4, r5, pc}
  40363e:	4604      	mov	r4, r0
  403640:	4620      	mov	r0, r4
  403642:	bd38      	pop	{r3, r4, r5, pc}
  403644:	f000 f84a 	bl	4036dc <__sinit>
  403648:	e7e4      	b.n	403614 <_fflush_r+0xc>
  40364a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40364c:	f000 fd30 	bl	4040b0 <__retarget_lock_release_recursive>
  403650:	4620      	mov	r0, r4
  403652:	bd38      	pop	{r3, r4, r5, pc}
  403654:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403656:	f000 fd29 	bl	4040ac <__retarget_lock_acquire_recursive>
  40365a:	e7e3      	b.n	403624 <_fflush_r+0x1c>

0040365c <fflush>:
  40365c:	b120      	cbz	r0, 403668 <fflush+0xc>
  40365e:	4b05      	ldr	r3, [pc, #20]	; (403674 <fflush+0x18>)
  403660:	4601      	mov	r1, r0
  403662:	6818      	ldr	r0, [r3, #0]
  403664:	f7ff bfd0 	b.w	403608 <_fflush_r>
  403668:	4b03      	ldr	r3, [pc, #12]	; (403678 <fflush+0x1c>)
  40366a:	4904      	ldr	r1, [pc, #16]	; (40367c <fflush+0x20>)
  40366c:	6818      	ldr	r0, [r3, #0]
  40366e:	f000 bcc1 	b.w	403ff4 <_fwalk_reent>
  403672:	bf00      	nop
  403674:	20400058 	.word	0x20400058
  403678:	004063c4 	.word	0x004063c4
  40367c:	00403609 	.word	0x00403609

00403680 <_cleanup_r>:
  403680:	4901      	ldr	r1, [pc, #4]	; (403688 <_cleanup_r+0x8>)
  403682:	f000 bcb7 	b.w	403ff4 <_fwalk_reent>
  403686:	bf00      	nop
  403688:	00405b19 	.word	0x00405b19

0040368c <std.isra.0>:
  40368c:	b510      	push	{r4, lr}
  40368e:	2300      	movs	r3, #0
  403690:	4604      	mov	r4, r0
  403692:	8181      	strh	r1, [r0, #12]
  403694:	81c2      	strh	r2, [r0, #14]
  403696:	6003      	str	r3, [r0, #0]
  403698:	6043      	str	r3, [r0, #4]
  40369a:	6083      	str	r3, [r0, #8]
  40369c:	6643      	str	r3, [r0, #100]	; 0x64
  40369e:	6103      	str	r3, [r0, #16]
  4036a0:	6143      	str	r3, [r0, #20]
  4036a2:	6183      	str	r3, [r0, #24]
  4036a4:	4619      	mov	r1, r3
  4036a6:	2208      	movs	r2, #8
  4036a8:	305c      	adds	r0, #92	; 0x5c
  4036aa:	f7fe f9a7 	bl	4019fc <memset>
  4036ae:	4807      	ldr	r0, [pc, #28]	; (4036cc <std.isra.0+0x40>)
  4036b0:	4907      	ldr	r1, [pc, #28]	; (4036d0 <std.isra.0+0x44>)
  4036b2:	4a08      	ldr	r2, [pc, #32]	; (4036d4 <std.isra.0+0x48>)
  4036b4:	4b08      	ldr	r3, [pc, #32]	; (4036d8 <std.isra.0+0x4c>)
  4036b6:	6220      	str	r0, [r4, #32]
  4036b8:	61e4      	str	r4, [r4, #28]
  4036ba:	6261      	str	r1, [r4, #36]	; 0x24
  4036bc:	62a2      	str	r2, [r4, #40]	; 0x28
  4036be:	62e3      	str	r3, [r4, #44]	; 0x2c
  4036c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4036c8:	f000 bcec 	b.w	4040a4 <__retarget_lock_init_recursive>
  4036cc:	00404f61 	.word	0x00404f61
  4036d0:	00404f85 	.word	0x00404f85
  4036d4:	00404fc1 	.word	0x00404fc1
  4036d8:	00404fe1 	.word	0x00404fe1

004036dc <__sinit>:
  4036dc:	b510      	push	{r4, lr}
  4036de:	4604      	mov	r4, r0
  4036e0:	4812      	ldr	r0, [pc, #72]	; (40372c <__sinit+0x50>)
  4036e2:	f000 fce3 	bl	4040ac <__retarget_lock_acquire_recursive>
  4036e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4036e8:	b9d2      	cbnz	r2, 403720 <__sinit+0x44>
  4036ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4036ee:	4810      	ldr	r0, [pc, #64]	; (403730 <__sinit+0x54>)
  4036f0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4036f4:	2103      	movs	r1, #3
  4036f6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4036fa:	63e0      	str	r0, [r4, #60]	; 0x3c
  4036fc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403700:	6860      	ldr	r0, [r4, #4]
  403702:	2104      	movs	r1, #4
  403704:	f7ff ffc2 	bl	40368c <std.isra.0>
  403708:	2201      	movs	r2, #1
  40370a:	2109      	movs	r1, #9
  40370c:	68a0      	ldr	r0, [r4, #8]
  40370e:	f7ff ffbd 	bl	40368c <std.isra.0>
  403712:	2202      	movs	r2, #2
  403714:	2112      	movs	r1, #18
  403716:	68e0      	ldr	r0, [r4, #12]
  403718:	f7ff ffb8 	bl	40368c <std.isra.0>
  40371c:	2301      	movs	r3, #1
  40371e:	63a3      	str	r3, [r4, #56]	; 0x38
  403720:	4802      	ldr	r0, [pc, #8]	; (40372c <__sinit+0x50>)
  403722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403726:	f000 bcc3 	b.w	4040b0 <__retarget_lock_release_recursive>
  40372a:	bf00      	nop
  40372c:	20400e7c 	.word	0x20400e7c
  403730:	00403681 	.word	0x00403681

00403734 <__sfp_lock_acquire>:
  403734:	4801      	ldr	r0, [pc, #4]	; (40373c <__sfp_lock_acquire+0x8>)
  403736:	f000 bcb9 	b.w	4040ac <__retarget_lock_acquire_recursive>
  40373a:	bf00      	nop
  40373c:	20400e90 	.word	0x20400e90

00403740 <__sfp_lock_release>:
  403740:	4801      	ldr	r0, [pc, #4]	; (403748 <__sfp_lock_release+0x8>)
  403742:	f000 bcb5 	b.w	4040b0 <__retarget_lock_release_recursive>
  403746:	bf00      	nop
  403748:	20400e90 	.word	0x20400e90

0040374c <__libc_fini_array>:
  40374c:	b538      	push	{r3, r4, r5, lr}
  40374e:	4c0a      	ldr	r4, [pc, #40]	; (403778 <__libc_fini_array+0x2c>)
  403750:	4d0a      	ldr	r5, [pc, #40]	; (40377c <__libc_fini_array+0x30>)
  403752:	1b64      	subs	r4, r4, r5
  403754:	10a4      	asrs	r4, r4, #2
  403756:	d00a      	beq.n	40376e <__libc_fini_array+0x22>
  403758:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40375c:	3b01      	subs	r3, #1
  40375e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403762:	3c01      	subs	r4, #1
  403764:	f855 3904 	ldr.w	r3, [r5], #-4
  403768:	4798      	blx	r3
  40376a:	2c00      	cmp	r4, #0
  40376c:	d1f9      	bne.n	403762 <__libc_fini_array+0x16>
  40376e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403772:	f002 bef7 	b.w	406564 <_fini>
  403776:	bf00      	nop
  403778:	00406574 	.word	0x00406574
  40377c:	00406570 	.word	0x00406570

00403780 <__fputwc>:
  403780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403784:	b082      	sub	sp, #8
  403786:	4680      	mov	r8, r0
  403788:	4689      	mov	r9, r1
  40378a:	4614      	mov	r4, r2
  40378c:	f000 fc6a 	bl	404064 <__locale_mb_cur_max>
  403790:	2801      	cmp	r0, #1
  403792:	d036      	beq.n	403802 <__fputwc+0x82>
  403794:	464a      	mov	r2, r9
  403796:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40379a:	a901      	add	r1, sp, #4
  40379c:	4640      	mov	r0, r8
  40379e:	f002 f8f9 	bl	405994 <_wcrtomb_r>
  4037a2:	1c42      	adds	r2, r0, #1
  4037a4:	4606      	mov	r6, r0
  4037a6:	d025      	beq.n	4037f4 <__fputwc+0x74>
  4037a8:	b3a8      	cbz	r0, 403816 <__fputwc+0x96>
  4037aa:	f89d e004 	ldrb.w	lr, [sp, #4]
  4037ae:	2500      	movs	r5, #0
  4037b0:	f10d 0a04 	add.w	sl, sp, #4
  4037b4:	e009      	b.n	4037ca <__fputwc+0x4a>
  4037b6:	6823      	ldr	r3, [r4, #0]
  4037b8:	1c5a      	adds	r2, r3, #1
  4037ba:	6022      	str	r2, [r4, #0]
  4037bc:	f883 e000 	strb.w	lr, [r3]
  4037c0:	3501      	adds	r5, #1
  4037c2:	42b5      	cmp	r5, r6
  4037c4:	d227      	bcs.n	403816 <__fputwc+0x96>
  4037c6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4037ca:	68a3      	ldr	r3, [r4, #8]
  4037cc:	3b01      	subs	r3, #1
  4037ce:	2b00      	cmp	r3, #0
  4037d0:	60a3      	str	r3, [r4, #8]
  4037d2:	daf0      	bge.n	4037b6 <__fputwc+0x36>
  4037d4:	69a7      	ldr	r7, [r4, #24]
  4037d6:	42bb      	cmp	r3, r7
  4037d8:	4671      	mov	r1, lr
  4037da:	4622      	mov	r2, r4
  4037dc:	4640      	mov	r0, r8
  4037de:	db02      	blt.n	4037e6 <__fputwc+0x66>
  4037e0:	f1be 0f0a 	cmp.w	lr, #10
  4037e4:	d1e7      	bne.n	4037b6 <__fputwc+0x36>
  4037e6:	f002 f87d 	bl	4058e4 <__swbuf_r>
  4037ea:	1c43      	adds	r3, r0, #1
  4037ec:	d1e8      	bne.n	4037c0 <__fputwc+0x40>
  4037ee:	b002      	add	sp, #8
  4037f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037f4:	89a3      	ldrh	r3, [r4, #12]
  4037f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4037fa:	81a3      	strh	r3, [r4, #12]
  4037fc:	b002      	add	sp, #8
  4037fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403802:	f109 33ff 	add.w	r3, r9, #4294967295
  403806:	2bfe      	cmp	r3, #254	; 0xfe
  403808:	d8c4      	bhi.n	403794 <__fputwc+0x14>
  40380a:	fa5f fe89 	uxtb.w	lr, r9
  40380e:	4606      	mov	r6, r0
  403810:	f88d e004 	strb.w	lr, [sp, #4]
  403814:	e7cb      	b.n	4037ae <__fputwc+0x2e>
  403816:	4648      	mov	r0, r9
  403818:	b002      	add	sp, #8
  40381a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40381e:	bf00      	nop

00403820 <_fputwc_r>:
  403820:	b530      	push	{r4, r5, lr}
  403822:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403824:	f013 0f01 	tst.w	r3, #1
  403828:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40382c:	4614      	mov	r4, r2
  40382e:	b083      	sub	sp, #12
  403830:	4605      	mov	r5, r0
  403832:	b29a      	uxth	r2, r3
  403834:	d101      	bne.n	40383a <_fputwc_r+0x1a>
  403836:	0590      	lsls	r0, r2, #22
  403838:	d51c      	bpl.n	403874 <_fputwc_r+0x54>
  40383a:	0490      	lsls	r0, r2, #18
  40383c:	d406      	bmi.n	40384c <_fputwc_r+0x2c>
  40383e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403848:	81a3      	strh	r3, [r4, #12]
  40384a:	6662      	str	r2, [r4, #100]	; 0x64
  40384c:	4628      	mov	r0, r5
  40384e:	4622      	mov	r2, r4
  403850:	f7ff ff96 	bl	403780 <__fputwc>
  403854:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403856:	07da      	lsls	r2, r3, #31
  403858:	4605      	mov	r5, r0
  40385a:	d402      	bmi.n	403862 <_fputwc_r+0x42>
  40385c:	89a3      	ldrh	r3, [r4, #12]
  40385e:	059b      	lsls	r3, r3, #22
  403860:	d502      	bpl.n	403868 <_fputwc_r+0x48>
  403862:	4628      	mov	r0, r5
  403864:	b003      	add	sp, #12
  403866:	bd30      	pop	{r4, r5, pc}
  403868:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40386a:	f000 fc21 	bl	4040b0 <__retarget_lock_release_recursive>
  40386e:	4628      	mov	r0, r5
  403870:	b003      	add	sp, #12
  403872:	bd30      	pop	{r4, r5, pc}
  403874:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403876:	9101      	str	r1, [sp, #4]
  403878:	f000 fc18 	bl	4040ac <__retarget_lock_acquire_recursive>
  40387c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403880:	9901      	ldr	r1, [sp, #4]
  403882:	b29a      	uxth	r2, r3
  403884:	e7d9      	b.n	40383a <_fputwc_r+0x1a>
  403886:	bf00      	nop

00403888 <_fread_r>:
  403888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40388c:	b085      	sub	sp, #20
  40388e:	fb02 f703 	mul.w	r7, r2, r3
  403892:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403894:	2f00      	cmp	r7, #0
  403896:	d050      	beq.n	40393a <_fread_r+0xb2>
  403898:	4606      	mov	r6, r0
  40389a:	460d      	mov	r5, r1
  40389c:	9301      	str	r3, [sp, #4]
  40389e:	9202      	str	r2, [sp, #8]
  4038a0:	b118      	cbz	r0, 4038aa <_fread_r+0x22>
  4038a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4038a4:	2b00      	cmp	r3, #0
  4038a6:	f000 80be 	beq.w	403a26 <_fread_r+0x19e>
  4038aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4038ac:	f013 0f01 	tst.w	r3, #1
  4038b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038b4:	b29a      	uxth	r2, r3
  4038b6:	d102      	bne.n	4038be <_fread_r+0x36>
  4038b8:	0590      	lsls	r0, r2, #22
  4038ba:	f140 80b7 	bpl.w	403a2c <_fread_r+0x1a4>
  4038be:	0491      	lsls	r1, r2, #18
  4038c0:	d407      	bmi.n	4038d2 <_fread_r+0x4a>
  4038c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4038c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4038c8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  4038cc:	81a3      	strh	r3, [r4, #12]
  4038ce:	b29a      	uxth	r2, r3
  4038d0:	6661      	str	r1, [r4, #100]	; 0x64
  4038d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
  4038d6:	f1b9 0f00 	cmp.w	r9, #0
  4038da:	db49      	blt.n	403970 <_fread_r+0xe8>
  4038dc:	0792      	lsls	r2, r2, #30
  4038de:	464b      	mov	r3, r9
  4038e0:	d44c      	bmi.n	40397c <_fread_r+0xf4>
  4038e2:	46b0      	mov	r8, r6
  4038e4:	46ba      	mov	sl, r7
  4038e6:	464e      	mov	r6, r9
  4038e8:	e00e      	b.n	403908 <_fread_r+0x80>
  4038ea:	6821      	ldr	r1, [r4, #0]
  4038ec:	f000 ffa8 	bl	404840 <memcpy>
  4038f0:	6823      	ldr	r3, [r4, #0]
  4038f2:	4433      	add	r3, r6
  4038f4:	6023      	str	r3, [r4, #0]
  4038f6:	4621      	mov	r1, r4
  4038f8:	4640      	mov	r0, r8
  4038fa:	4435      	add	r5, r6
  4038fc:	ebaa 0a06 	sub.w	sl, sl, r6
  403900:	f001 fa58 	bl	404db4 <__srefill_r>
  403904:	bb10      	cbnz	r0, 40394c <_fread_r+0xc4>
  403906:	6866      	ldr	r6, [r4, #4]
  403908:	45b2      	cmp	sl, r6
  40390a:	4632      	mov	r2, r6
  40390c:	4628      	mov	r0, r5
  40390e:	d8ec      	bhi.n	4038ea <_fread_r+0x62>
  403910:	4652      	mov	r2, sl
  403912:	6821      	ldr	r1, [r4, #0]
  403914:	f000 ff94 	bl	404840 <memcpy>
  403918:	6862      	ldr	r2, [r4, #4]
  40391a:	6823      	ldr	r3, [r4, #0]
  40391c:	eba2 020a 	sub.w	r2, r2, sl
  403920:	4453      	add	r3, sl
  403922:	6062      	str	r2, [r4, #4]
  403924:	6023      	str	r3, [r4, #0]
  403926:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403928:	07da      	lsls	r2, r3, #31
  40392a:	d40a      	bmi.n	403942 <_fread_r+0xba>
  40392c:	89a3      	ldrh	r3, [r4, #12]
  40392e:	059b      	lsls	r3, r3, #22
  403930:	d407      	bmi.n	403942 <_fread_r+0xba>
  403932:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403934:	f000 fbbc 	bl	4040b0 <__retarget_lock_release_recursive>
  403938:	9f01      	ldr	r7, [sp, #4]
  40393a:	4638      	mov	r0, r7
  40393c:	b005      	add	sp, #20
  40393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403942:	9f01      	ldr	r7, [sp, #4]
  403944:	4638      	mov	r0, r7
  403946:	b005      	add	sp, #20
  403948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40394c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40394e:	07d8      	lsls	r0, r3, #31
  403950:	d405      	bmi.n	40395e <_fread_r+0xd6>
  403952:	89a3      	ldrh	r3, [r4, #12]
  403954:	0599      	lsls	r1, r3, #22
  403956:	d402      	bmi.n	40395e <_fread_r+0xd6>
  403958:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40395a:	f000 fba9 	bl	4040b0 <__retarget_lock_release_recursive>
  40395e:	9b02      	ldr	r3, [sp, #8]
  403960:	eba7 070a 	sub.w	r7, r7, sl
  403964:	fbb7 f7f3 	udiv	r7, r7, r3
  403968:	4638      	mov	r0, r7
  40396a:	b005      	add	sp, #20
  40396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403970:	2100      	movs	r1, #0
  403972:	0792      	lsls	r2, r2, #30
  403974:	460b      	mov	r3, r1
  403976:	6061      	str	r1, [r4, #4]
  403978:	4689      	mov	r9, r1
  40397a:	d5b2      	bpl.n	4038e2 <_fread_r+0x5a>
  40397c:	42bb      	cmp	r3, r7
  40397e:	bf28      	it	cs
  403980:	463b      	movcs	r3, r7
  403982:	461a      	mov	r2, r3
  403984:	6821      	ldr	r1, [r4, #0]
  403986:	9303      	str	r3, [sp, #12]
  403988:	4628      	mov	r0, r5
  40398a:	f000 ff59 	bl	404840 <memcpy>
  40398e:	e894 0005 	ldmia.w	r4, {r0, r2}
  403992:	9b03      	ldr	r3, [sp, #12]
  403994:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403996:	eb00 0903 	add.w	r9, r0, r3
  40399a:	1ad2      	subs	r2, r2, r3
  40399c:	f8c4 9000 	str.w	r9, [r4]
  4039a0:	6062      	str	r2, [r4, #4]
  4039a2:	eba7 0803 	sub.w	r8, r7, r3
  4039a6:	2900      	cmp	r1, #0
  4039a8:	d04b      	beq.n	403a42 <_fread_r+0x1ba>
  4039aa:	f1b8 0f00 	cmp.w	r8, #0
  4039ae:	d0ba      	beq.n	403926 <_fread_r+0x9e>
  4039b0:	f104 0040 	add.w	r0, r4, #64	; 0x40
  4039b4:	4281      	cmp	r1, r0
  4039b6:	d005      	beq.n	4039c4 <_fread_r+0x13c>
  4039b8:	4630      	mov	r0, r6
  4039ba:	f000 f897 	bl	403aec <_free_r>
  4039be:	f8d4 9000 	ldr.w	r9, [r4]
  4039c2:	9b03      	ldr	r3, [sp, #12]
  4039c4:	2100      	movs	r1, #0
  4039c6:	6321      	str	r1, [r4, #48]	; 0x30
  4039c8:	463a      	mov	r2, r7
  4039ca:	441d      	add	r5, r3
  4039cc:	4633      	mov	r3, r6
  4039ce:	464f      	mov	r7, r9
  4039d0:	4646      	mov	r6, r8
  4039d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
  4039d6:	f8d4 a014 	ldr.w	sl, [r4, #20]
  4039da:	4698      	mov	r8, r3
  4039dc:	4691      	mov	r9, r2
  4039de:	e001      	b.n	4039e4 <_fread_r+0x15c>
  4039e0:	2e00      	cmp	r6, #0
  4039e2:	d0a0      	beq.n	403926 <_fread_r+0x9e>
  4039e4:	6125      	str	r5, [r4, #16]
  4039e6:	6166      	str	r6, [r4, #20]
  4039e8:	6025      	str	r5, [r4, #0]
  4039ea:	4621      	mov	r1, r4
  4039ec:	4640      	mov	r0, r8
  4039ee:	f001 f9e1 	bl	404db4 <__srefill_r>
  4039f2:	6863      	ldr	r3, [r4, #4]
  4039f4:	f8c4 b010 	str.w	fp, [r4, #16]
  4039f8:	1af6      	subs	r6, r6, r3
  4039fa:	441d      	add	r5, r3
  4039fc:	2300      	movs	r3, #0
  4039fe:	f8c4 a014 	str.w	sl, [r4, #20]
  403a02:	6027      	str	r7, [r4, #0]
  403a04:	6063      	str	r3, [r4, #4]
  403a06:	2800      	cmp	r0, #0
  403a08:	d0ea      	beq.n	4039e0 <_fread_r+0x158>
  403a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403a0c:	46b0      	mov	r8, r6
  403a0e:	07de      	lsls	r6, r3, #31
  403a10:	464f      	mov	r7, r9
  403a12:	d402      	bmi.n	403a1a <_fread_r+0x192>
  403a14:	89a3      	ldrh	r3, [r4, #12]
  403a16:	059d      	lsls	r5, r3, #22
  403a18:	d50f      	bpl.n	403a3a <_fread_r+0x1b2>
  403a1a:	eba7 0708 	sub.w	r7, r7, r8
  403a1e:	9b02      	ldr	r3, [sp, #8]
  403a20:	fbb7 f7f3 	udiv	r7, r7, r3
  403a24:	e789      	b.n	40393a <_fread_r+0xb2>
  403a26:	f7ff fe59 	bl	4036dc <__sinit>
  403a2a:	e73e      	b.n	4038aa <_fread_r+0x22>
  403a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a2e:	f000 fb3d 	bl	4040ac <__retarget_lock_acquire_recursive>
  403a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a36:	b29a      	uxth	r2, r3
  403a38:	e741      	b.n	4038be <_fread_r+0x36>
  403a3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a3c:	f000 fb38 	bl	4040b0 <__retarget_lock_release_recursive>
  403a40:	e7eb      	b.n	403a1a <_fread_r+0x192>
  403a42:	f1b8 0f00 	cmp.w	r8, #0
  403a46:	d1bf      	bne.n	4039c8 <_fread_r+0x140>
  403a48:	e76d      	b.n	403926 <_fread_r+0x9e>
  403a4a:	bf00      	nop

00403a4c <_malloc_trim_r>:
  403a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a4e:	4f24      	ldr	r7, [pc, #144]	; (403ae0 <_malloc_trim_r+0x94>)
  403a50:	460c      	mov	r4, r1
  403a52:	4606      	mov	r6, r0
  403a54:	f000 fff2 	bl	404a3c <__malloc_lock>
  403a58:	68bb      	ldr	r3, [r7, #8]
  403a5a:	685d      	ldr	r5, [r3, #4]
  403a5c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403a60:	310f      	adds	r1, #15
  403a62:	f025 0503 	bic.w	r5, r5, #3
  403a66:	4429      	add	r1, r5
  403a68:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403a6c:	f021 010f 	bic.w	r1, r1, #15
  403a70:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403a74:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403a78:	db07      	blt.n	403a8a <_malloc_trim_r+0x3e>
  403a7a:	2100      	movs	r1, #0
  403a7c:	4630      	mov	r0, r6
  403a7e:	f001 fa23 	bl	404ec8 <_sbrk_r>
  403a82:	68bb      	ldr	r3, [r7, #8]
  403a84:	442b      	add	r3, r5
  403a86:	4298      	cmp	r0, r3
  403a88:	d004      	beq.n	403a94 <_malloc_trim_r+0x48>
  403a8a:	4630      	mov	r0, r6
  403a8c:	f000 ffdc 	bl	404a48 <__malloc_unlock>
  403a90:	2000      	movs	r0, #0
  403a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a94:	4261      	negs	r1, r4
  403a96:	4630      	mov	r0, r6
  403a98:	f001 fa16 	bl	404ec8 <_sbrk_r>
  403a9c:	3001      	adds	r0, #1
  403a9e:	d00d      	beq.n	403abc <_malloc_trim_r+0x70>
  403aa0:	4b10      	ldr	r3, [pc, #64]	; (403ae4 <_malloc_trim_r+0x98>)
  403aa2:	68ba      	ldr	r2, [r7, #8]
  403aa4:	6819      	ldr	r1, [r3, #0]
  403aa6:	1b2d      	subs	r5, r5, r4
  403aa8:	f045 0501 	orr.w	r5, r5, #1
  403aac:	4630      	mov	r0, r6
  403aae:	1b09      	subs	r1, r1, r4
  403ab0:	6055      	str	r5, [r2, #4]
  403ab2:	6019      	str	r1, [r3, #0]
  403ab4:	f000 ffc8 	bl	404a48 <__malloc_unlock>
  403ab8:	2001      	movs	r0, #1
  403aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403abc:	2100      	movs	r1, #0
  403abe:	4630      	mov	r0, r6
  403ac0:	f001 fa02 	bl	404ec8 <_sbrk_r>
  403ac4:	68ba      	ldr	r2, [r7, #8]
  403ac6:	1a83      	subs	r3, r0, r2
  403ac8:	2b0f      	cmp	r3, #15
  403aca:	ddde      	ble.n	403a8a <_malloc_trim_r+0x3e>
  403acc:	4c06      	ldr	r4, [pc, #24]	; (403ae8 <_malloc_trim_r+0x9c>)
  403ace:	4905      	ldr	r1, [pc, #20]	; (403ae4 <_malloc_trim_r+0x98>)
  403ad0:	6824      	ldr	r4, [r4, #0]
  403ad2:	f043 0301 	orr.w	r3, r3, #1
  403ad6:	1b00      	subs	r0, r0, r4
  403ad8:	6053      	str	r3, [r2, #4]
  403ada:	6008      	str	r0, [r1, #0]
  403adc:	e7d5      	b.n	403a8a <_malloc_trim_r+0x3e>
  403ade:	bf00      	nop
  403ae0:	204005f8 	.word	0x204005f8
  403ae4:	20400af0 	.word	0x20400af0
  403ae8:	20400a00 	.word	0x20400a00

00403aec <_free_r>:
  403aec:	2900      	cmp	r1, #0
  403aee:	d044      	beq.n	403b7a <_free_r+0x8e>
  403af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403af4:	460d      	mov	r5, r1
  403af6:	4680      	mov	r8, r0
  403af8:	f000 ffa0 	bl	404a3c <__malloc_lock>
  403afc:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403b00:	4969      	ldr	r1, [pc, #420]	; (403ca8 <_free_r+0x1bc>)
  403b02:	f027 0301 	bic.w	r3, r7, #1
  403b06:	f1a5 0408 	sub.w	r4, r5, #8
  403b0a:	18e2      	adds	r2, r4, r3
  403b0c:	688e      	ldr	r6, [r1, #8]
  403b0e:	6850      	ldr	r0, [r2, #4]
  403b10:	42b2      	cmp	r2, r6
  403b12:	f020 0003 	bic.w	r0, r0, #3
  403b16:	d05e      	beq.n	403bd6 <_free_r+0xea>
  403b18:	07fe      	lsls	r6, r7, #31
  403b1a:	6050      	str	r0, [r2, #4]
  403b1c:	d40b      	bmi.n	403b36 <_free_r+0x4a>
  403b1e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403b22:	1be4      	subs	r4, r4, r7
  403b24:	f101 0e08 	add.w	lr, r1, #8
  403b28:	68a5      	ldr	r5, [r4, #8]
  403b2a:	4575      	cmp	r5, lr
  403b2c:	443b      	add	r3, r7
  403b2e:	d06d      	beq.n	403c0c <_free_r+0x120>
  403b30:	68e7      	ldr	r7, [r4, #12]
  403b32:	60ef      	str	r7, [r5, #12]
  403b34:	60bd      	str	r5, [r7, #8]
  403b36:	1815      	adds	r5, r2, r0
  403b38:	686d      	ldr	r5, [r5, #4]
  403b3a:	07ed      	lsls	r5, r5, #31
  403b3c:	d53e      	bpl.n	403bbc <_free_r+0xd0>
  403b3e:	f043 0201 	orr.w	r2, r3, #1
  403b42:	6062      	str	r2, [r4, #4]
  403b44:	50e3      	str	r3, [r4, r3]
  403b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403b4a:	d217      	bcs.n	403b7c <_free_r+0x90>
  403b4c:	08db      	lsrs	r3, r3, #3
  403b4e:	1c58      	adds	r0, r3, #1
  403b50:	109a      	asrs	r2, r3, #2
  403b52:	684d      	ldr	r5, [r1, #4]
  403b54:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403b58:	60a7      	str	r7, [r4, #8]
  403b5a:	2301      	movs	r3, #1
  403b5c:	4093      	lsls	r3, r2
  403b5e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403b62:	432b      	orrs	r3, r5
  403b64:	3a08      	subs	r2, #8
  403b66:	60e2      	str	r2, [r4, #12]
  403b68:	604b      	str	r3, [r1, #4]
  403b6a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403b6e:	60fc      	str	r4, [r7, #12]
  403b70:	4640      	mov	r0, r8
  403b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403b76:	f000 bf67 	b.w	404a48 <__malloc_unlock>
  403b7a:	4770      	bx	lr
  403b7c:	0a5a      	lsrs	r2, r3, #9
  403b7e:	2a04      	cmp	r2, #4
  403b80:	d852      	bhi.n	403c28 <_free_r+0x13c>
  403b82:	099a      	lsrs	r2, r3, #6
  403b84:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403b88:	00ff      	lsls	r7, r7, #3
  403b8a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403b8e:	19c8      	adds	r0, r1, r7
  403b90:	59ca      	ldr	r2, [r1, r7]
  403b92:	3808      	subs	r0, #8
  403b94:	4290      	cmp	r0, r2
  403b96:	d04f      	beq.n	403c38 <_free_r+0x14c>
  403b98:	6851      	ldr	r1, [r2, #4]
  403b9a:	f021 0103 	bic.w	r1, r1, #3
  403b9e:	428b      	cmp	r3, r1
  403ba0:	d232      	bcs.n	403c08 <_free_r+0x11c>
  403ba2:	6892      	ldr	r2, [r2, #8]
  403ba4:	4290      	cmp	r0, r2
  403ba6:	d1f7      	bne.n	403b98 <_free_r+0xac>
  403ba8:	68c3      	ldr	r3, [r0, #12]
  403baa:	60a0      	str	r0, [r4, #8]
  403bac:	60e3      	str	r3, [r4, #12]
  403bae:	609c      	str	r4, [r3, #8]
  403bb0:	60c4      	str	r4, [r0, #12]
  403bb2:	4640      	mov	r0, r8
  403bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403bb8:	f000 bf46 	b.w	404a48 <__malloc_unlock>
  403bbc:	6895      	ldr	r5, [r2, #8]
  403bbe:	4f3b      	ldr	r7, [pc, #236]	; (403cac <_free_r+0x1c0>)
  403bc0:	42bd      	cmp	r5, r7
  403bc2:	4403      	add	r3, r0
  403bc4:	d040      	beq.n	403c48 <_free_r+0x15c>
  403bc6:	68d0      	ldr	r0, [r2, #12]
  403bc8:	60e8      	str	r0, [r5, #12]
  403bca:	f043 0201 	orr.w	r2, r3, #1
  403bce:	6085      	str	r5, [r0, #8]
  403bd0:	6062      	str	r2, [r4, #4]
  403bd2:	50e3      	str	r3, [r4, r3]
  403bd4:	e7b7      	b.n	403b46 <_free_r+0x5a>
  403bd6:	07ff      	lsls	r7, r7, #31
  403bd8:	4403      	add	r3, r0
  403bda:	d407      	bmi.n	403bec <_free_r+0x100>
  403bdc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403be0:	1aa4      	subs	r4, r4, r2
  403be2:	4413      	add	r3, r2
  403be4:	68a0      	ldr	r0, [r4, #8]
  403be6:	68e2      	ldr	r2, [r4, #12]
  403be8:	60c2      	str	r2, [r0, #12]
  403bea:	6090      	str	r0, [r2, #8]
  403bec:	4a30      	ldr	r2, [pc, #192]	; (403cb0 <_free_r+0x1c4>)
  403bee:	6812      	ldr	r2, [r2, #0]
  403bf0:	f043 0001 	orr.w	r0, r3, #1
  403bf4:	4293      	cmp	r3, r2
  403bf6:	6060      	str	r0, [r4, #4]
  403bf8:	608c      	str	r4, [r1, #8]
  403bfa:	d3b9      	bcc.n	403b70 <_free_r+0x84>
  403bfc:	4b2d      	ldr	r3, [pc, #180]	; (403cb4 <_free_r+0x1c8>)
  403bfe:	4640      	mov	r0, r8
  403c00:	6819      	ldr	r1, [r3, #0]
  403c02:	f7ff ff23 	bl	403a4c <_malloc_trim_r>
  403c06:	e7b3      	b.n	403b70 <_free_r+0x84>
  403c08:	4610      	mov	r0, r2
  403c0a:	e7cd      	b.n	403ba8 <_free_r+0xbc>
  403c0c:	1811      	adds	r1, r2, r0
  403c0e:	6849      	ldr	r1, [r1, #4]
  403c10:	07c9      	lsls	r1, r1, #31
  403c12:	d444      	bmi.n	403c9e <_free_r+0x1b2>
  403c14:	6891      	ldr	r1, [r2, #8]
  403c16:	68d2      	ldr	r2, [r2, #12]
  403c18:	60ca      	str	r2, [r1, #12]
  403c1a:	4403      	add	r3, r0
  403c1c:	f043 0001 	orr.w	r0, r3, #1
  403c20:	6091      	str	r1, [r2, #8]
  403c22:	6060      	str	r0, [r4, #4]
  403c24:	50e3      	str	r3, [r4, r3]
  403c26:	e7a3      	b.n	403b70 <_free_r+0x84>
  403c28:	2a14      	cmp	r2, #20
  403c2a:	d816      	bhi.n	403c5a <_free_r+0x16e>
  403c2c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403c30:	00ff      	lsls	r7, r7, #3
  403c32:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403c36:	e7aa      	b.n	403b8e <_free_r+0xa2>
  403c38:	10aa      	asrs	r2, r5, #2
  403c3a:	2301      	movs	r3, #1
  403c3c:	684d      	ldr	r5, [r1, #4]
  403c3e:	4093      	lsls	r3, r2
  403c40:	432b      	orrs	r3, r5
  403c42:	604b      	str	r3, [r1, #4]
  403c44:	4603      	mov	r3, r0
  403c46:	e7b0      	b.n	403baa <_free_r+0xbe>
  403c48:	f043 0201 	orr.w	r2, r3, #1
  403c4c:	614c      	str	r4, [r1, #20]
  403c4e:	610c      	str	r4, [r1, #16]
  403c50:	60e5      	str	r5, [r4, #12]
  403c52:	60a5      	str	r5, [r4, #8]
  403c54:	6062      	str	r2, [r4, #4]
  403c56:	50e3      	str	r3, [r4, r3]
  403c58:	e78a      	b.n	403b70 <_free_r+0x84>
  403c5a:	2a54      	cmp	r2, #84	; 0x54
  403c5c:	d806      	bhi.n	403c6c <_free_r+0x180>
  403c5e:	0b1a      	lsrs	r2, r3, #12
  403c60:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403c64:	00ff      	lsls	r7, r7, #3
  403c66:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403c6a:	e790      	b.n	403b8e <_free_r+0xa2>
  403c6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403c70:	d806      	bhi.n	403c80 <_free_r+0x194>
  403c72:	0bda      	lsrs	r2, r3, #15
  403c74:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403c78:	00ff      	lsls	r7, r7, #3
  403c7a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403c7e:	e786      	b.n	403b8e <_free_r+0xa2>
  403c80:	f240 5054 	movw	r0, #1364	; 0x554
  403c84:	4282      	cmp	r2, r0
  403c86:	d806      	bhi.n	403c96 <_free_r+0x1aa>
  403c88:	0c9a      	lsrs	r2, r3, #18
  403c8a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403c8e:	00ff      	lsls	r7, r7, #3
  403c90:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403c94:	e77b      	b.n	403b8e <_free_r+0xa2>
  403c96:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403c9a:	257e      	movs	r5, #126	; 0x7e
  403c9c:	e777      	b.n	403b8e <_free_r+0xa2>
  403c9e:	f043 0101 	orr.w	r1, r3, #1
  403ca2:	6061      	str	r1, [r4, #4]
  403ca4:	6013      	str	r3, [r2, #0]
  403ca6:	e763      	b.n	403b70 <_free_r+0x84>
  403ca8:	204005f8 	.word	0x204005f8
  403cac:	20400600 	.word	0x20400600
  403cb0:	20400a04 	.word	0x20400a04
  403cb4:	20400b20 	.word	0x20400b20

00403cb8 <__sfvwrite_r>:
  403cb8:	6893      	ldr	r3, [r2, #8]
  403cba:	2b00      	cmp	r3, #0
  403cbc:	d073      	beq.n	403da6 <__sfvwrite_r+0xee>
  403cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cc2:	898b      	ldrh	r3, [r1, #12]
  403cc4:	b083      	sub	sp, #12
  403cc6:	460c      	mov	r4, r1
  403cc8:	0719      	lsls	r1, r3, #28
  403cca:	9000      	str	r0, [sp, #0]
  403ccc:	4616      	mov	r6, r2
  403cce:	d526      	bpl.n	403d1e <__sfvwrite_r+0x66>
  403cd0:	6922      	ldr	r2, [r4, #16]
  403cd2:	b322      	cbz	r2, 403d1e <__sfvwrite_r+0x66>
  403cd4:	f013 0002 	ands.w	r0, r3, #2
  403cd8:	6835      	ldr	r5, [r6, #0]
  403cda:	d02c      	beq.n	403d36 <__sfvwrite_r+0x7e>
  403cdc:	f04f 0900 	mov.w	r9, #0
  403ce0:	4fb0      	ldr	r7, [pc, #704]	; (403fa4 <__sfvwrite_r+0x2ec>)
  403ce2:	46c8      	mov	r8, r9
  403ce4:	46b2      	mov	sl, r6
  403ce6:	45b8      	cmp	r8, r7
  403ce8:	4643      	mov	r3, r8
  403cea:	464a      	mov	r2, r9
  403cec:	bf28      	it	cs
  403cee:	463b      	movcs	r3, r7
  403cf0:	9800      	ldr	r0, [sp, #0]
  403cf2:	f1b8 0f00 	cmp.w	r8, #0
  403cf6:	d050      	beq.n	403d9a <__sfvwrite_r+0xe2>
  403cf8:	69e1      	ldr	r1, [r4, #28]
  403cfa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403cfc:	47b0      	blx	r6
  403cfe:	2800      	cmp	r0, #0
  403d00:	dd58      	ble.n	403db4 <__sfvwrite_r+0xfc>
  403d02:	f8da 3008 	ldr.w	r3, [sl, #8]
  403d06:	1a1b      	subs	r3, r3, r0
  403d08:	4481      	add	r9, r0
  403d0a:	eba8 0800 	sub.w	r8, r8, r0
  403d0e:	f8ca 3008 	str.w	r3, [sl, #8]
  403d12:	2b00      	cmp	r3, #0
  403d14:	d1e7      	bne.n	403ce6 <__sfvwrite_r+0x2e>
  403d16:	2000      	movs	r0, #0
  403d18:	b003      	add	sp, #12
  403d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d1e:	4621      	mov	r1, r4
  403d20:	9800      	ldr	r0, [sp, #0]
  403d22:	f7ff fb5d 	bl	4033e0 <__swsetup_r>
  403d26:	2800      	cmp	r0, #0
  403d28:	f040 8133 	bne.w	403f92 <__sfvwrite_r+0x2da>
  403d2c:	89a3      	ldrh	r3, [r4, #12]
  403d2e:	6835      	ldr	r5, [r6, #0]
  403d30:	f013 0002 	ands.w	r0, r3, #2
  403d34:	d1d2      	bne.n	403cdc <__sfvwrite_r+0x24>
  403d36:	f013 0901 	ands.w	r9, r3, #1
  403d3a:	d145      	bne.n	403dc8 <__sfvwrite_r+0x110>
  403d3c:	464f      	mov	r7, r9
  403d3e:	9601      	str	r6, [sp, #4]
  403d40:	b337      	cbz	r7, 403d90 <__sfvwrite_r+0xd8>
  403d42:	059a      	lsls	r2, r3, #22
  403d44:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403d48:	f140 8083 	bpl.w	403e52 <__sfvwrite_r+0x19a>
  403d4c:	4547      	cmp	r7, r8
  403d4e:	46c3      	mov	fp, r8
  403d50:	f0c0 80ab 	bcc.w	403eaa <__sfvwrite_r+0x1f2>
  403d54:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403d58:	f040 80ac 	bne.w	403eb4 <__sfvwrite_r+0x1fc>
  403d5c:	6820      	ldr	r0, [r4, #0]
  403d5e:	46ba      	mov	sl, r7
  403d60:	465a      	mov	r2, fp
  403d62:	4649      	mov	r1, r9
  403d64:	f000 fe06 	bl	404974 <memmove>
  403d68:	68a2      	ldr	r2, [r4, #8]
  403d6a:	6823      	ldr	r3, [r4, #0]
  403d6c:	eba2 0208 	sub.w	r2, r2, r8
  403d70:	445b      	add	r3, fp
  403d72:	60a2      	str	r2, [r4, #8]
  403d74:	6023      	str	r3, [r4, #0]
  403d76:	9a01      	ldr	r2, [sp, #4]
  403d78:	6893      	ldr	r3, [r2, #8]
  403d7a:	eba3 030a 	sub.w	r3, r3, sl
  403d7e:	44d1      	add	r9, sl
  403d80:	eba7 070a 	sub.w	r7, r7, sl
  403d84:	6093      	str	r3, [r2, #8]
  403d86:	2b00      	cmp	r3, #0
  403d88:	d0c5      	beq.n	403d16 <__sfvwrite_r+0x5e>
  403d8a:	89a3      	ldrh	r3, [r4, #12]
  403d8c:	2f00      	cmp	r7, #0
  403d8e:	d1d8      	bne.n	403d42 <__sfvwrite_r+0x8a>
  403d90:	f8d5 9000 	ldr.w	r9, [r5]
  403d94:	686f      	ldr	r7, [r5, #4]
  403d96:	3508      	adds	r5, #8
  403d98:	e7d2      	b.n	403d40 <__sfvwrite_r+0x88>
  403d9a:	f8d5 9000 	ldr.w	r9, [r5]
  403d9e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403da2:	3508      	adds	r5, #8
  403da4:	e79f      	b.n	403ce6 <__sfvwrite_r+0x2e>
  403da6:	2000      	movs	r0, #0
  403da8:	4770      	bx	lr
  403daa:	4621      	mov	r1, r4
  403dac:	9800      	ldr	r0, [sp, #0]
  403dae:	f7ff fc2b 	bl	403608 <_fflush_r>
  403db2:	b370      	cbz	r0, 403e12 <__sfvwrite_r+0x15a>
  403db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403dbc:	f04f 30ff 	mov.w	r0, #4294967295
  403dc0:	81a3      	strh	r3, [r4, #12]
  403dc2:	b003      	add	sp, #12
  403dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dc8:	4681      	mov	r9, r0
  403dca:	4633      	mov	r3, r6
  403dcc:	464e      	mov	r6, r9
  403dce:	46a8      	mov	r8, r5
  403dd0:	469a      	mov	sl, r3
  403dd2:	464d      	mov	r5, r9
  403dd4:	b34e      	cbz	r6, 403e2a <__sfvwrite_r+0x172>
  403dd6:	b380      	cbz	r0, 403e3a <__sfvwrite_r+0x182>
  403dd8:	6820      	ldr	r0, [r4, #0]
  403dda:	6923      	ldr	r3, [r4, #16]
  403ddc:	6962      	ldr	r2, [r4, #20]
  403dde:	45b1      	cmp	r9, r6
  403de0:	46cb      	mov	fp, r9
  403de2:	bf28      	it	cs
  403de4:	46b3      	movcs	fp, r6
  403de6:	4298      	cmp	r0, r3
  403de8:	465f      	mov	r7, fp
  403dea:	d904      	bls.n	403df6 <__sfvwrite_r+0x13e>
  403dec:	68a3      	ldr	r3, [r4, #8]
  403dee:	4413      	add	r3, r2
  403df0:	459b      	cmp	fp, r3
  403df2:	f300 80a6 	bgt.w	403f42 <__sfvwrite_r+0x28a>
  403df6:	4593      	cmp	fp, r2
  403df8:	db4b      	blt.n	403e92 <__sfvwrite_r+0x1da>
  403dfa:	4613      	mov	r3, r2
  403dfc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403dfe:	69e1      	ldr	r1, [r4, #28]
  403e00:	9800      	ldr	r0, [sp, #0]
  403e02:	462a      	mov	r2, r5
  403e04:	47b8      	blx	r7
  403e06:	1e07      	subs	r7, r0, #0
  403e08:	ddd4      	ble.n	403db4 <__sfvwrite_r+0xfc>
  403e0a:	ebb9 0907 	subs.w	r9, r9, r7
  403e0e:	d0cc      	beq.n	403daa <__sfvwrite_r+0xf2>
  403e10:	2001      	movs	r0, #1
  403e12:	f8da 3008 	ldr.w	r3, [sl, #8]
  403e16:	1bdb      	subs	r3, r3, r7
  403e18:	443d      	add	r5, r7
  403e1a:	1bf6      	subs	r6, r6, r7
  403e1c:	f8ca 3008 	str.w	r3, [sl, #8]
  403e20:	2b00      	cmp	r3, #0
  403e22:	f43f af78 	beq.w	403d16 <__sfvwrite_r+0x5e>
  403e26:	2e00      	cmp	r6, #0
  403e28:	d1d5      	bne.n	403dd6 <__sfvwrite_r+0x11e>
  403e2a:	f108 0308 	add.w	r3, r8, #8
  403e2e:	e913 0060 	ldmdb	r3, {r5, r6}
  403e32:	4698      	mov	r8, r3
  403e34:	3308      	adds	r3, #8
  403e36:	2e00      	cmp	r6, #0
  403e38:	d0f9      	beq.n	403e2e <__sfvwrite_r+0x176>
  403e3a:	4632      	mov	r2, r6
  403e3c:	210a      	movs	r1, #10
  403e3e:	4628      	mov	r0, r5
  403e40:	f000 fcae 	bl	4047a0 <memchr>
  403e44:	2800      	cmp	r0, #0
  403e46:	f000 80a1 	beq.w	403f8c <__sfvwrite_r+0x2d4>
  403e4a:	3001      	adds	r0, #1
  403e4c:	eba0 0905 	sub.w	r9, r0, r5
  403e50:	e7c2      	b.n	403dd8 <__sfvwrite_r+0x120>
  403e52:	6820      	ldr	r0, [r4, #0]
  403e54:	6923      	ldr	r3, [r4, #16]
  403e56:	4298      	cmp	r0, r3
  403e58:	d802      	bhi.n	403e60 <__sfvwrite_r+0x1a8>
  403e5a:	6963      	ldr	r3, [r4, #20]
  403e5c:	429f      	cmp	r7, r3
  403e5e:	d25d      	bcs.n	403f1c <__sfvwrite_r+0x264>
  403e60:	45b8      	cmp	r8, r7
  403e62:	bf28      	it	cs
  403e64:	46b8      	movcs	r8, r7
  403e66:	4642      	mov	r2, r8
  403e68:	4649      	mov	r1, r9
  403e6a:	f000 fd83 	bl	404974 <memmove>
  403e6e:	68a3      	ldr	r3, [r4, #8]
  403e70:	6822      	ldr	r2, [r4, #0]
  403e72:	eba3 0308 	sub.w	r3, r3, r8
  403e76:	4442      	add	r2, r8
  403e78:	60a3      	str	r3, [r4, #8]
  403e7a:	6022      	str	r2, [r4, #0]
  403e7c:	b10b      	cbz	r3, 403e82 <__sfvwrite_r+0x1ca>
  403e7e:	46c2      	mov	sl, r8
  403e80:	e779      	b.n	403d76 <__sfvwrite_r+0xbe>
  403e82:	4621      	mov	r1, r4
  403e84:	9800      	ldr	r0, [sp, #0]
  403e86:	f7ff fbbf 	bl	403608 <_fflush_r>
  403e8a:	2800      	cmp	r0, #0
  403e8c:	d192      	bne.n	403db4 <__sfvwrite_r+0xfc>
  403e8e:	46c2      	mov	sl, r8
  403e90:	e771      	b.n	403d76 <__sfvwrite_r+0xbe>
  403e92:	465a      	mov	r2, fp
  403e94:	4629      	mov	r1, r5
  403e96:	f000 fd6d 	bl	404974 <memmove>
  403e9a:	68a2      	ldr	r2, [r4, #8]
  403e9c:	6823      	ldr	r3, [r4, #0]
  403e9e:	eba2 020b 	sub.w	r2, r2, fp
  403ea2:	445b      	add	r3, fp
  403ea4:	60a2      	str	r2, [r4, #8]
  403ea6:	6023      	str	r3, [r4, #0]
  403ea8:	e7af      	b.n	403e0a <__sfvwrite_r+0x152>
  403eaa:	6820      	ldr	r0, [r4, #0]
  403eac:	46b8      	mov	r8, r7
  403eae:	46ba      	mov	sl, r7
  403eb0:	46bb      	mov	fp, r7
  403eb2:	e755      	b.n	403d60 <__sfvwrite_r+0xa8>
  403eb4:	6962      	ldr	r2, [r4, #20]
  403eb6:	6820      	ldr	r0, [r4, #0]
  403eb8:	6921      	ldr	r1, [r4, #16]
  403eba:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  403ebe:	eba0 0a01 	sub.w	sl, r0, r1
  403ec2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403ec6:	f10a 0001 	add.w	r0, sl, #1
  403eca:	ea4f 0868 	mov.w	r8, r8, asr #1
  403ece:	4438      	add	r0, r7
  403ed0:	4540      	cmp	r0, r8
  403ed2:	4642      	mov	r2, r8
  403ed4:	bf84      	itt	hi
  403ed6:	4680      	movhi	r8, r0
  403ed8:	4642      	movhi	r2, r8
  403eda:	055b      	lsls	r3, r3, #21
  403edc:	d544      	bpl.n	403f68 <__sfvwrite_r+0x2b0>
  403ede:	4611      	mov	r1, r2
  403ee0:	9800      	ldr	r0, [sp, #0]
  403ee2:	f000 f967 	bl	4041b4 <_malloc_r>
  403ee6:	4683      	mov	fp, r0
  403ee8:	2800      	cmp	r0, #0
  403eea:	d055      	beq.n	403f98 <__sfvwrite_r+0x2e0>
  403eec:	4652      	mov	r2, sl
  403eee:	6921      	ldr	r1, [r4, #16]
  403ef0:	f000 fca6 	bl	404840 <memcpy>
  403ef4:	89a3      	ldrh	r3, [r4, #12]
  403ef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  403efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403efe:	81a3      	strh	r3, [r4, #12]
  403f00:	eb0b 000a 	add.w	r0, fp, sl
  403f04:	eba8 030a 	sub.w	r3, r8, sl
  403f08:	f8c4 b010 	str.w	fp, [r4, #16]
  403f0c:	f8c4 8014 	str.w	r8, [r4, #20]
  403f10:	6020      	str	r0, [r4, #0]
  403f12:	60a3      	str	r3, [r4, #8]
  403f14:	46b8      	mov	r8, r7
  403f16:	46ba      	mov	sl, r7
  403f18:	46bb      	mov	fp, r7
  403f1a:	e721      	b.n	403d60 <__sfvwrite_r+0xa8>
  403f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403f20:	42b9      	cmp	r1, r7
  403f22:	bf28      	it	cs
  403f24:	4639      	movcs	r1, r7
  403f26:	464a      	mov	r2, r9
  403f28:	fb91 f1f3 	sdiv	r1, r1, r3
  403f2c:	9800      	ldr	r0, [sp, #0]
  403f2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403f30:	fb03 f301 	mul.w	r3, r3, r1
  403f34:	69e1      	ldr	r1, [r4, #28]
  403f36:	47b0      	blx	r6
  403f38:	f1b0 0a00 	subs.w	sl, r0, #0
  403f3c:	f73f af1b 	bgt.w	403d76 <__sfvwrite_r+0xbe>
  403f40:	e738      	b.n	403db4 <__sfvwrite_r+0xfc>
  403f42:	461a      	mov	r2, r3
  403f44:	4629      	mov	r1, r5
  403f46:	9301      	str	r3, [sp, #4]
  403f48:	f000 fd14 	bl	404974 <memmove>
  403f4c:	6822      	ldr	r2, [r4, #0]
  403f4e:	9b01      	ldr	r3, [sp, #4]
  403f50:	9800      	ldr	r0, [sp, #0]
  403f52:	441a      	add	r2, r3
  403f54:	6022      	str	r2, [r4, #0]
  403f56:	4621      	mov	r1, r4
  403f58:	f7ff fb56 	bl	403608 <_fflush_r>
  403f5c:	9b01      	ldr	r3, [sp, #4]
  403f5e:	2800      	cmp	r0, #0
  403f60:	f47f af28 	bne.w	403db4 <__sfvwrite_r+0xfc>
  403f64:	461f      	mov	r7, r3
  403f66:	e750      	b.n	403e0a <__sfvwrite_r+0x152>
  403f68:	9800      	ldr	r0, [sp, #0]
  403f6a:	f000 fd73 	bl	404a54 <_realloc_r>
  403f6e:	4683      	mov	fp, r0
  403f70:	2800      	cmp	r0, #0
  403f72:	d1c5      	bne.n	403f00 <__sfvwrite_r+0x248>
  403f74:	9d00      	ldr	r5, [sp, #0]
  403f76:	6921      	ldr	r1, [r4, #16]
  403f78:	4628      	mov	r0, r5
  403f7a:	f7ff fdb7 	bl	403aec <_free_r>
  403f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f82:	220c      	movs	r2, #12
  403f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403f88:	602a      	str	r2, [r5, #0]
  403f8a:	e715      	b.n	403db8 <__sfvwrite_r+0x100>
  403f8c:	f106 0901 	add.w	r9, r6, #1
  403f90:	e722      	b.n	403dd8 <__sfvwrite_r+0x120>
  403f92:	f04f 30ff 	mov.w	r0, #4294967295
  403f96:	e6bf      	b.n	403d18 <__sfvwrite_r+0x60>
  403f98:	9a00      	ldr	r2, [sp, #0]
  403f9a:	230c      	movs	r3, #12
  403f9c:	6013      	str	r3, [r2, #0]
  403f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403fa2:	e709      	b.n	403db8 <__sfvwrite_r+0x100>
  403fa4:	7ffffc00 	.word	0x7ffffc00

00403fa8 <_fwalk>:
  403fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403fac:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403fb0:	d01b      	beq.n	403fea <_fwalk+0x42>
  403fb2:	4688      	mov	r8, r1
  403fb4:	2600      	movs	r6, #0
  403fb6:	687d      	ldr	r5, [r7, #4]
  403fb8:	68bc      	ldr	r4, [r7, #8]
  403fba:	3d01      	subs	r5, #1
  403fbc:	d40f      	bmi.n	403fde <_fwalk+0x36>
  403fbe:	89a3      	ldrh	r3, [r4, #12]
  403fc0:	2b01      	cmp	r3, #1
  403fc2:	f105 35ff 	add.w	r5, r5, #4294967295
  403fc6:	d906      	bls.n	403fd6 <_fwalk+0x2e>
  403fc8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403fcc:	3301      	adds	r3, #1
  403fce:	4620      	mov	r0, r4
  403fd0:	d001      	beq.n	403fd6 <_fwalk+0x2e>
  403fd2:	47c0      	blx	r8
  403fd4:	4306      	orrs	r6, r0
  403fd6:	1c6b      	adds	r3, r5, #1
  403fd8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403fdc:	d1ef      	bne.n	403fbe <_fwalk+0x16>
  403fde:	683f      	ldr	r7, [r7, #0]
  403fe0:	2f00      	cmp	r7, #0
  403fe2:	d1e8      	bne.n	403fb6 <_fwalk+0xe>
  403fe4:	4630      	mov	r0, r6
  403fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fea:	463e      	mov	r6, r7
  403fec:	4630      	mov	r0, r6
  403fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ff2:	bf00      	nop

00403ff4 <_fwalk_reent>:
  403ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403ff8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  403ffc:	d01f      	beq.n	40403e <_fwalk_reent+0x4a>
  403ffe:	4688      	mov	r8, r1
  404000:	4606      	mov	r6, r0
  404002:	f04f 0900 	mov.w	r9, #0
  404006:	687d      	ldr	r5, [r7, #4]
  404008:	68bc      	ldr	r4, [r7, #8]
  40400a:	3d01      	subs	r5, #1
  40400c:	d411      	bmi.n	404032 <_fwalk_reent+0x3e>
  40400e:	89a3      	ldrh	r3, [r4, #12]
  404010:	2b01      	cmp	r3, #1
  404012:	f105 35ff 	add.w	r5, r5, #4294967295
  404016:	d908      	bls.n	40402a <_fwalk_reent+0x36>
  404018:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40401c:	3301      	adds	r3, #1
  40401e:	4621      	mov	r1, r4
  404020:	4630      	mov	r0, r6
  404022:	d002      	beq.n	40402a <_fwalk_reent+0x36>
  404024:	47c0      	blx	r8
  404026:	ea49 0900 	orr.w	r9, r9, r0
  40402a:	1c6b      	adds	r3, r5, #1
  40402c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404030:	d1ed      	bne.n	40400e <_fwalk_reent+0x1a>
  404032:	683f      	ldr	r7, [r7, #0]
  404034:	2f00      	cmp	r7, #0
  404036:	d1e6      	bne.n	404006 <_fwalk_reent+0x12>
  404038:	4648      	mov	r0, r9
  40403a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40403e:	46b9      	mov	r9, r7
  404040:	4648      	mov	r0, r9
  404042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404046:	bf00      	nop

00404048 <iswspace>:
  404048:	28ff      	cmp	r0, #255	; 0xff
  40404a:	d901      	bls.n	404050 <iswspace+0x8>
  40404c:	2000      	movs	r0, #0
  40404e:	4770      	bx	lr
  404050:	b510      	push	{r4, lr}
  404052:	4604      	mov	r4, r0
  404054:	f000 f818 	bl	404088 <__locale_ctype_ptr>
  404058:	4420      	add	r0, r4
  40405a:	7840      	ldrb	r0, [r0, #1]
  40405c:	f000 0008 	and.w	r0, r0, #8
  404060:	bd10      	pop	{r4, pc}
  404062:	bf00      	nop

00404064 <__locale_mb_cur_max>:
  404064:	4b04      	ldr	r3, [pc, #16]	; (404078 <__locale_mb_cur_max+0x14>)
  404066:	4a05      	ldr	r2, [pc, #20]	; (40407c <__locale_mb_cur_max+0x18>)
  404068:	681b      	ldr	r3, [r3, #0]
  40406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40406c:	2b00      	cmp	r3, #0
  40406e:	bf08      	it	eq
  404070:	4613      	moveq	r3, r2
  404072:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404076:	4770      	bx	lr
  404078:	20400058 	.word	0x20400058
  40407c:	2040048c 	.word	0x2040048c

00404080 <__locale_ctype_ptr_l>:
  404080:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  404084:	4770      	bx	lr
  404086:	bf00      	nop

00404088 <__locale_ctype_ptr>:
  404088:	4b04      	ldr	r3, [pc, #16]	; (40409c <__locale_ctype_ptr+0x14>)
  40408a:	4a05      	ldr	r2, [pc, #20]	; (4040a0 <__locale_ctype_ptr+0x18>)
  40408c:	681b      	ldr	r3, [r3, #0]
  40408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404090:	2b00      	cmp	r3, #0
  404092:	bf08      	it	eq
  404094:	4613      	moveq	r3, r2
  404096:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  40409a:	4770      	bx	lr
  40409c:	20400058 	.word	0x20400058
  4040a0:	2040048c 	.word	0x2040048c

004040a4 <__retarget_lock_init_recursive>:
  4040a4:	4770      	bx	lr
  4040a6:	bf00      	nop

004040a8 <__retarget_lock_close_recursive>:
  4040a8:	4770      	bx	lr
  4040aa:	bf00      	nop

004040ac <__retarget_lock_acquire_recursive>:
  4040ac:	4770      	bx	lr
  4040ae:	bf00      	nop

004040b0 <__retarget_lock_release_recursive>:
  4040b0:	4770      	bx	lr
  4040b2:	bf00      	nop

004040b4 <__swhatbuf_r>:
  4040b4:	b570      	push	{r4, r5, r6, lr}
  4040b6:	460c      	mov	r4, r1
  4040b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4040bc:	2900      	cmp	r1, #0
  4040be:	b090      	sub	sp, #64	; 0x40
  4040c0:	4615      	mov	r5, r2
  4040c2:	461e      	mov	r6, r3
  4040c4:	db14      	blt.n	4040f0 <__swhatbuf_r+0x3c>
  4040c6:	aa01      	add	r2, sp, #4
  4040c8:	f001 fd88 	bl	405bdc <_fstat_r>
  4040cc:	2800      	cmp	r0, #0
  4040ce:	db0f      	blt.n	4040f0 <__swhatbuf_r+0x3c>
  4040d0:	9a02      	ldr	r2, [sp, #8]
  4040d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4040d6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4040da:	fab2 f282 	clz	r2, r2
  4040de:	0952      	lsrs	r2, r2, #5
  4040e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4040e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4040e8:	6032      	str	r2, [r6, #0]
  4040ea:	602b      	str	r3, [r5, #0]
  4040ec:	b010      	add	sp, #64	; 0x40
  4040ee:	bd70      	pop	{r4, r5, r6, pc}
  4040f0:	89a2      	ldrh	r2, [r4, #12]
  4040f2:	2300      	movs	r3, #0
  4040f4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4040f8:	6033      	str	r3, [r6, #0]
  4040fa:	d004      	beq.n	404106 <__swhatbuf_r+0x52>
  4040fc:	2240      	movs	r2, #64	; 0x40
  4040fe:	4618      	mov	r0, r3
  404100:	602a      	str	r2, [r5, #0]
  404102:	b010      	add	sp, #64	; 0x40
  404104:	bd70      	pop	{r4, r5, r6, pc}
  404106:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40410a:	602b      	str	r3, [r5, #0]
  40410c:	b010      	add	sp, #64	; 0x40
  40410e:	bd70      	pop	{r4, r5, r6, pc}

00404110 <__smakebuf_r>:
  404110:	898a      	ldrh	r2, [r1, #12]
  404112:	0792      	lsls	r2, r2, #30
  404114:	460b      	mov	r3, r1
  404116:	d506      	bpl.n	404126 <__smakebuf_r+0x16>
  404118:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40411c:	2101      	movs	r1, #1
  40411e:	601a      	str	r2, [r3, #0]
  404120:	611a      	str	r2, [r3, #16]
  404122:	6159      	str	r1, [r3, #20]
  404124:	4770      	bx	lr
  404126:	b5f0      	push	{r4, r5, r6, r7, lr}
  404128:	b083      	sub	sp, #12
  40412a:	ab01      	add	r3, sp, #4
  40412c:	466a      	mov	r2, sp
  40412e:	460c      	mov	r4, r1
  404130:	4606      	mov	r6, r0
  404132:	f7ff ffbf 	bl	4040b4 <__swhatbuf_r>
  404136:	9900      	ldr	r1, [sp, #0]
  404138:	4605      	mov	r5, r0
  40413a:	4630      	mov	r0, r6
  40413c:	f000 f83a 	bl	4041b4 <_malloc_r>
  404140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404144:	b1d8      	cbz	r0, 40417e <__smakebuf_r+0x6e>
  404146:	9a01      	ldr	r2, [sp, #4]
  404148:	4f15      	ldr	r7, [pc, #84]	; (4041a0 <__smakebuf_r+0x90>)
  40414a:	9900      	ldr	r1, [sp, #0]
  40414c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404152:	81a3      	strh	r3, [r4, #12]
  404154:	6020      	str	r0, [r4, #0]
  404156:	6120      	str	r0, [r4, #16]
  404158:	6161      	str	r1, [r4, #20]
  40415a:	b91a      	cbnz	r2, 404164 <__smakebuf_r+0x54>
  40415c:	432b      	orrs	r3, r5
  40415e:	81a3      	strh	r3, [r4, #12]
  404160:	b003      	add	sp, #12
  404162:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404164:	4630      	mov	r0, r6
  404166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40416a:	f001 fd4b 	bl	405c04 <_isatty_r>
  40416e:	b1a0      	cbz	r0, 40419a <__smakebuf_r+0x8a>
  404170:	89a3      	ldrh	r3, [r4, #12]
  404172:	f023 0303 	bic.w	r3, r3, #3
  404176:	f043 0301 	orr.w	r3, r3, #1
  40417a:	b21b      	sxth	r3, r3
  40417c:	e7ee      	b.n	40415c <__smakebuf_r+0x4c>
  40417e:	059a      	lsls	r2, r3, #22
  404180:	d4ee      	bmi.n	404160 <__smakebuf_r+0x50>
  404182:	f023 0303 	bic.w	r3, r3, #3
  404186:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40418a:	f043 0302 	orr.w	r3, r3, #2
  40418e:	2101      	movs	r1, #1
  404190:	81a3      	strh	r3, [r4, #12]
  404192:	6022      	str	r2, [r4, #0]
  404194:	6122      	str	r2, [r4, #16]
  404196:	6161      	str	r1, [r4, #20]
  404198:	e7e2      	b.n	404160 <__smakebuf_r+0x50>
  40419a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40419e:	e7dd      	b.n	40415c <__smakebuf_r+0x4c>
  4041a0:	00403681 	.word	0x00403681

004041a4 <malloc>:
  4041a4:	4b02      	ldr	r3, [pc, #8]	; (4041b0 <malloc+0xc>)
  4041a6:	4601      	mov	r1, r0
  4041a8:	6818      	ldr	r0, [r3, #0]
  4041aa:	f000 b803 	b.w	4041b4 <_malloc_r>
  4041ae:	bf00      	nop
  4041b0:	20400058 	.word	0x20400058

004041b4 <_malloc_r>:
  4041b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041b8:	f101 060b 	add.w	r6, r1, #11
  4041bc:	2e16      	cmp	r6, #22
  4041be:	b083      	sub	sp, #12
  4041c0:	4605      	mov	r5, r0
  4041c2:	f240 809e 	bls.w	404302 <_malloc_r+0x14e>
  4041c6:	f036 0607 	bics.w	r6, r6, #7
  4041ca:	f100 80bd 	bmi.w	404348 <_malloc_r+0x194>
  4041ce:	42b1      	cmp	r1, r6
  4041d0:	f200 80ba 	bhi.w	404348 <_malloc_r+0x194>
  4041d4:	f000 fc32 	bl	404a3c <__malloc_lock>
  4041d8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4041dc:	f0c0 8293 	bcc.w	404706 <_malloc_r+0x552>
  4041e0:	0a73      	lsrs	r3, r6, #9
  4041e2:	f000 80b8 	beq.w	404356 <_malloc_r+0x1a2>
  4041e6:	2b04      	cmp	r3, #4
  4041e8:	f200 8179 	bhi.w	4044de <_malloc_r+0x32a>
  4041ec:	09b3      	lsrs	r3, r6, #6
  4041ee:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4041f2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4041f6:	00c3      	lsls	r3, r0, #3
  4041f8:	4fbf      	ldr	r7, [pc, #764]	; (4044f8 <_malloc_r+0x344>)
  4041fa:	443b      	add	r3, r7
  4041fc:	f1a3 0108 	sub.w	r1, r3, #8
  404200:	685c      	ldr	r4, [r3, #4]
  404202:	42a1      	cmp	r1, r4
  404204:	d106      	bne.n	404214 <_malloc_r+0x60>
  404206:	e00c      	b.n	404222 <_malloc_r+0x6e>
  404208:	2a00      	cmp	r2, #0
  40420a:	f280 80aa 	bge.w	404362 <_malloc_r+0x1ae>
  40420e:	68e4      	ldr	r4, [r4, #12]
  404210:	42a1      	cmp	r1, r4
  404212:	d006      	beq.n	404222 <_malloc_r+0x6e>
  404214:	6863      	ldr	r3, [r4, #4]
  404216:	f023 0303 	bic.w	r3, r3, #3
  40421a:	1b9a      	subs	r2, r3, r6
  40421c:	2a0f      	cmp	r2, #15
  40421e:	ddf3      	ble.n	404208 <_malloc_r+0x54>
  404220:	4670      	mov	r0, lr
  404222:	693c      	ldr	r4, [r7, #16]
  404224:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40450c <_malloc_r+0x358>
  404228:	4574      	cmp	r4, lr
  40422a:	f000 81ab 	beq.w	404584 <_malloc_r+0x3d0>
  40422e:	6863      	ldr	r3, [r4, #4]
  404230:	f023 0303 	bic.w	r3, r3, #3
  404234:	1b9a      	subs	r2, r3, r6
  404236:	2a0f      	cmp	r2, #15
  404238:	f300 8190 	bgt.w	40455c <_malloc_r+0x3a8>
  40423c:	2a00      	cmp	r2, #0
  40423e:	f8c7 e014 	str.w	lr, [r7, #20]
  404242:	f8c7 e010 	str.w	lr, [r7, #16]
  404246:	f280 809d 	bge.w	404384 <_malloc_r+0x1d0>
  40424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40424e:	f080 8161 	bcs.w	404514 <_malloc_r+0x360>
  404252:	08db      	lsrs	r3, r3, #3
  404254:	f103 0c01 	add.w	ip, r3, #1
  404258:	1099      	asrs	r1, r3, #2
  40425a:	687a      	ldr	r2, [r7, #4]
  40425c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404260:	f8c4 8008 	str.w	r8, [r4, #8]
  404264:	2301      	movs	r3, #1
  404266:	408b      	lsls	r3, r1
  404268:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40426c:	4313      	orrs	r3, r2
  40426e:	3908      	subs	r1, #8
  404270:	60e1      	str	r1, [r4, #12]
  404272:	607b      	str	r3, [r7, #4]
  404274:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404278:	f8c8 400c 	str.w	r4, [r8, #12]
  40427c:	1082      	asrs	r2, r0, #2
  40427e:	2401      	movs	r4, #1
  404280:	4094      	lsls	r4, r2
  404282:	429c      	cmp	r4, r3
  404284:	f200 808b 	bhi.w	40439e <_malloc_r+0x1ea>
  404288:	421c      	tst	r4, r3
  40428a:	d106      	bne.n	40429a <_malloc_r+0xe6>
  40428c:	f020 0003 	bic.w	r0, r0, #3
  404290:	0064      	lsls	r4, r4, #1
  404292:	421c      	tst	r4, r3
  404294:	f100 0004 	add.w	r0, r0, #4
  404298:	d0fa      	beq.n	404290 <_malloc_r+0xdc>
  40429a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40429e:	46cc      	mov	ip, r9
  4042a0:	4680      	mov	r8, r0
  4042a2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4042a6:	459c      	cmp	ip, r3
  4042a8:	d107      	bne.n	4042ba <_malloc_r+0x106>
  4042aa:	e16d      	b.n	404588 <_malloc_r+0x3d4>
  4042ac:	2a00      	cmp	r2, #0
  4042ae:	f280 817b 	bge.w	4045a8 <_malloc_r+0x3f4>
  4042b2:	68db      	ldr	r3, [r3, #12]
  4042b4:	459c      	cmp	ip, r3
  4042b6:	f000 8167 	beq.w	404588 <_malloc_r+0x3d4>
  4042ba:	6859      	ldr	r1, [r3, #4]
  4042bc:	f021 0103 	bic.w	r1, r1, #3
  4042c0:	1b8a      	subs	r2, r1, r6
  4042c2:	2a0f      	cmp	r2, #15
  4042c4:	ddf2      	ble.n	4042ac <_malloc_r+0xf8>
  4042c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4042ca:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4042ce:	9300      	str	r3, [sp, #0]
  4042d0:	199c      	adds	r4, r3, r6
  4042d2:	4628      	mov	r0, r5
  4042d4:	f046 0601 	orr.w	r6, r6, #1
  4042d8:	f042 0501 	orr.w	r5, r2, #1
  4042dc:	605e      	str	r6, [r3, #4]
  4042de:	f8c8 c00c 	str.w	ip, [r8, #12]
  4042e2:	f8cc 8008 	str.w	r8, [ip, #8]
  4042e6:	617c      	str	r4, [r7, #20]
  4042e8:	613c      	str	r4, [r7, #16]
  4042ea:	f8c4 e00c 	str.w	lr, [r4, #12]
  4042ee:	f8c4 e008 	str.w	lr, [r4, #8]
  4042f2:	6065      	str	r5, [r4, #4]
  4042f4:	505a      	str	r2, [r3, r1]
  4042f6:	f000 fba7 	bl	404a48 <__malloc_unlock>
  4042fa:	9b00      	ldr	r3, [sp, #0]
  4042fc:	f103 0408 	add.w	r4, r3, #8
  404300:	e01e      	b.n	404340 <_malloc_r+0x18c>
  404302:	2910      	cmp	r1, #16
  404304:	d820      	bhi.n	404348 <_malloc_r+0x194>
  404306:	f000 fb99 	bl	404a3c <__malloc_lock>
  40430a:	2610      	movs	r6, #16
  40430c:	2318      	movs	r3, #24
  40430e:	2002      	movs	r0, #2
  404310:	4f79      	ldr	r7, [pc, #484]	; (4044f8 <_malloc_r+0x344>)
  404312:	443b      	add	r3, r7
  404314:	f1a3 0208 	sub.w	r2, r3, #8
  404318:	685c      	ldr	r4, [r3, #4]
  40431a:	4294      	cmp	r4, r2
  40431c:	f000 813d 	beq.w	40459a <_malloc_r+0x3e6>
  404320:	6863      	ldr	r3, [r4, #4]
  404322:	68e1      	ldr	r1, [r4, #12]
  404324:	68a6      	ldr	r6, [r4, #8]
  404326:	f023 0303 	bic.w	r3, r3, #3
  40432a:	4423      	add	r3, r4
  40432c:	4628      	mov	r0, r5
  40432e:	685a      	ldr	r2, [r3, #4]
  404330:	60f1      	str	r1, [r6, #12]
  404332:	f042 0201 	orr.w	r2, r2, #1
  404336:	608e      	str	r6, [r1, #8]
  404338:	605a      	str	r2, [r3, #4]
  40433a:	f000 fb85 	bl	404a48 <__malloc_unlock>
  40433e:	3408      	adds	r4, #8
  404340:	4620      	mov	r0, r4
  404342:	b003      	add	sp, #12
  404344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404348:	2400      	movs	r4, #0
  40434a:	230c      	movs	r3, #12
  40434c:	4620      	mov	r0, r4
  40434e:	602b      	str	r3, [r5, #0]
  404350:	b003      	add	sp, #12
  404352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404356:	2040      	movs	r0, #64	; 0x40
  404358:	f44f 7300 	mov.w	r3, #512	; 0x200
  40435c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404360:	e74a      	b.n	4041f8 <_malloc_r+0x44>
  404362:	4423      	add	r3, r4
  404364:	68e1      	ldr	r1, [r4, #12]
  404366:	685a      	ldr	r2, [r3, #4]
  404368:	68a6      	ldr	r6, [r4, #8]
  40436a:	f042 0201 	orr.w	r2, r2, #1
  40436e:	60f1      	str	r1, [r6, #12]
  404370:	4628      	mov	r0, r5
  404372:	608e      	str	r6, [r1, #8]
  404374:	605a      	str	r2, [r3, #4]
  404376:	f000 fb67 	bl	404a48 <__malloc_unlock>
  40437a:	3408      	adds	r4, #8
  40437c:	4620      	mov	r0, r4
  40437e:	b003      	add	sp, #12
  404380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404384:	4423      	add	r3, r4
  404386:	4628      	mov	r0, r5
  404388:	685a      	ldr	r2, [r3, #4]
  40438a:	f042 0201 	orr.w	r2, r2, #1
  40438e:	605a      	str	r2, [r3, #4]
  404390:	f000 fb5a 	bl	404a48 <__malloc_unlock>
  404394:	3408      	adds	r4, #8
  404396:	4620      	mov	r0, r4
  404398:	b003      	add	sp, #12
  40439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40439e:	68bc      	ldr	r4, [r7, #8]
  4043a0:	6863      	ldr	r3, [r4, #4]
  4043a2:	f023 0803 	bic.w	r8, r3, #3
  4043a6:	45b0      	cmp	r8, r6
  4043a8:	d304      	bcc.n	4043b4 <_malloc_r+0x200>
  4043aa:	eba8 0306 	sub.w	r3, r8, r6
  4043ae:	2b0f      	cmp	r3, #15
  4043b0:	f300 8085 	bgt.w	4044be <_malloc_r+0x30a>
  4043b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404510 <_malloc_r+0x35c>
  4043b8:	4b50      	ldr	r3, [pc, #320]	; (4044fc <_malloc_r+0x348>)
  4043ba:	f8d9 2000 	ldr.w	r2, [r9]
  4043be:	681b      	ldr	r3, [r3, #0]
  4043c0:	3201      	adds	r2, #1
  4043c2:	4433      	add	r3, r6
  4043c4:	eb04 0a08 	add.w	sl, r4, r8
  4043c8:	f000 8155 	beq.w	404676 <_malloc_r+0x4c2>
  4043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4043d0:	330f      	adds	r3, #15
  4043d2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4043d6:	f02b 0b0f 	bic.w	fp, fp, #15
  4043da:	4659      	mov	r1, fp
  4043dc:	4628      	mov	r0, r5
  4043de:	f000 fd73 	bl	404ec8 <_sbrk_r>
  4043e2:	1c41      	adds	r1, r0, #1
  4043e4:	4602      	mov	r2, r0
  4043e6:	f000 80fc 	beq.w	4045e2 <_malloc_r+0x42e>
  4043ea:	4582      	cmp	sl, r0
  4043ec:	f200 80f7 	bhi.w	4045de <_malloc_r+0x42a>
  4043f0:	4b43      	ldr	r3, [pc, #268]	; (404500 <_malloc_r+0x34c>)
  4043f2:	6819      	ldr	r1, [r3, #0]
  4043f4:	4459      	add	r1, fp
  4043f6:	6019      	str	r1, [r3, #0]
  4043f8:	f000 814d 	beq.w	404696 <_malloc_r+0x4e2>
  4043fc:	f8d9 0000 	ldr.w	r0, [r9]
  404400:	3001      	adds	r0, #1
  404402:	bf1b      	ittet	ne
  404404:	eba2 0a0a 	subne.w	sl, r2, sl
  404408:	4451      	addne	r1, sl
  40440a:	f8c9 2000 	streq.w	r2, [r9]
  40440e:	6019      	strne	r1, [r3, #0]
  404410:	f012 0107 	ands.w	r1, r2, #7
  404414:	f000 8115 	beq.w	404642 <_malloc_r+0x48e>
  404418:	f1c1 0008 	rsb	r0, r1, #8
  40441c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404420:	4402      	add	r2, r0
  404422:	3108      	adds	r1, #8
  404424:	eb02 090b 	add.w	r9, r2, fp
  404428:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40442c:	eba1 0909 	sub.w	r9, r1, r9
  404430:	4649      	mov	r1, r9
  404432:	4628      	mov	r0, r5
  404434:	9301      	str	r3, [sp, #4]
  404436:	9200      	str	r2, [sp, #0]
  404438:	f000 fd46 	bl	404ec8 <_sbrk_r>
  40443c:	1c43      	adds	r3, r0, #1
  40443e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404442:	f000 8143 	beq.w	4046cc <_malloc_r+0x518>
  404446:	1a80      	subs	r0, r0, r2
  404448:	4448      	add	r0, r9
  40444a:	f040 0001 	orr.w	r0, r0, #1
  40444e:	6819      	ldr	r1, [r3, #0]
  404450:	60ba      	str	r2, [r7, #8]
  404452:	4449      	add	r1, r9
  404454:	42bc      	cmp	r4, r7
  404456:	6050      	str	r0, [r2, #4]
  404458:	6019      	str	r1, [r3, #0]
  40445a:	d017      	beq.n	40448c <_malloc_r+0x2d8>
  40445c:	f1b8 0f0f 	cmp.w	r8, #15
  404460:	f240 80fb 	bls.w	40465a <_malloc_r+0x4a6>
  404464:	6860      	ldr	r0, [r4, #4]
  404466:	f1a8 020c 	sub.w	r2, r8, #12
  40446a:	f022 0207 	bic.w	r2, r2, #7
  40446e:	eb04 0e02 	add.w	lr, r4, r2
  404472:	f000 0001 	and.w	r0, r0, #1
  404476:	f04f 0c05 	mov.w	ip, #5
  40447a:	4310      	orrs	r0, r2
  40447c:	2a0f      	cmp	r2, #15
  40447e:	6060      	str	r0, [r4, #4]
  404480:	f8ce c004 	str.w	ip, [lr, #4]
  404484:	f8ce c008 	str.w	ip, [lr, #8]
  404488:	f200 8117 	bhi.w	4046ba <_malloc_r+0x506>
  40448c:	4b1d      	ldr	r3, [pc, #116]	; (404504 <_malloc_r+0x350>)
  40448e:	68bc      	ldr	r4, [r7, #8]
  404490:	681a      	ldr	r2, [r3, #0]
  404492:	4291      	cmp	r1, r2
  404494:	bf88      	it	hi
  404496:	6019      	strhi	r1, [r3, #0]
  404498:	4b1b      	ldr	r3, [pc, #108]	; (404508 <_malloc_r+0x354>)
  40449a:	681a      	ldr	r2, [r3, #0]
  40449c:	4291      	cmp	r1, r2
  40449e:	6862      	ldr	r2, [r4, #4]
  4044a0:	bf88      	it	hi
  4044a2:	6019      	strhi	r1, [r3, #0]
  4044a4:	f022 0203 	bic.w	r2, r2, #3
  4044a8:	4296      	cmp	r6, r2
  4044aa:	eba2 0306 	sub.w	r3, r2, r6
  4044ae:	d801      	bhi.n	4044b4 <_malloc_r+0x300>
  4044b0:	2b0f      	cmp	r3, #15
  4044b2:	dc04      	bgt.n	4044be <_malloc_r+0x30a>
  4044b4:	4628      	mov	r0, r5
  4044b6:	f000 fac7 	bl	404a48 <__malloc_unlock>
  4044ba:	2400      	movs	r4, #0
  4044bc:	e740      	b.n	404340 <_malloc_r+0x18c>
  4044be:	19a2      	adds	r2, r4, r6
  4044c0:	f043 0301 	orr.w	r3, r3, #1
  4044c4:	f046 0601 	orr.w	r6, r6, #1
  4044c8:	6066      	str	r6, [r4, #4]
  4044ca:	4628      	mov	r0, r5
  4044cc:	60ba      	str	r2, [r7, #8]
  4044ce:	6053      	str	r3, [r2, #4]
  4044d0:	f000 faba 	bl	404a48 <__malloc_unlock>
  4044d4:	3408      	adds	r4, #8
  4044d6:	4620      	mov	r0, r4
  4044d8:	b003      	add	sp, #12
  4044da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044de:	2b14      	cmp	r3, #20
  4044e0:	d971      	bls.n	4045c6 <_malloc_r+0x412>
  4044e2:	2b54      	cmp	r3, #84	; 0x54
  4044e4:	f200 80a3 	bhi.w	40462e <_malloc_r+0x47a>
  4044e8:	0b33      	lsrs	r3, r6, #12
  4044ea:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4044ee:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4044f2:	00c3      	lsls	r3, r0, #3
  4044f4:	e680      	b.n	4041f8 <_malloc_r+0x44>
  4044f6:	bf00      	nop
  4044f8:	204005f8 	.word	0x204005f8
  4044fc:	20400b20 	.word	0x20400b20
  404500:	20400af0 	.word	0x20400af0
  404504:	20400b18 	.word	0x20400b18
  404508:	20400b1c 	.word	0x20400b1c
  40450c:	20400600 	.word	0x20400600
  404510:	20400a00 	.word	0x20400a00
  404514:	0a5a      	lsrs	r2, r3, #9
  404516:	2a04      	cmp	r2, #4
  404518:	d95b      	bls.n	4045d2 <_malloc_r+0x41e>
  40451a:	2a14      	cmp	r2, #20
  40451c:	f200 80ae 	bhi.w	40467c <_malloc_r+0x4c8>
  404520:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404524:	00c9      	lsls	r1, r1, #3
  404526:	325b      	adds	r2, #91	; 0x5b
  404528:	eb07 0c01 	add.w	ip, r7, r1
  40452c:	5879      	ldr	r1, [r7, r1]
  40452e:	f1ac 0c08 	sub.w	ip, ip, #8
  404532:	458c      	cmp	ip, r1
  404534:	f000 8088 	beq.w	404648 <_malloc_r+0x494>
  404538:	684a      	ldr	r2, [r1, #4]
  40453a:	f022 0203 	bic.w	r2, r2, #3
  40453e:	4293      	cmp	r3, r2
  404540:	d273      	bcs.n	40462a <_malloc_r+0x476>
  404542:	6889      	ldr	r1, [r1, #8]
  404544:	458c      	cmp	ip, r1
  404546:	d1f7      	bne.n	404538 <_malloc_r+0x384>
  404548:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40454c:	687b      	ldr	r3, [r7, #4]
  40454e:	60e2      	str	r2, [r4, #12]
  404550:	f8c4 c008 	str.w	ip, [r4, #8]
  404554:	6094      	str	r4, [r2, #8]
  404556:	f8cc 400c 	str.w	r4, [ip, #12]
  40455a:	e68f      	b.n	40427c <_malloc_r+0xc8>
  40455c:	19a1      	adds	r1, r4, r6
  40455e:	f046 0c01 	orr.w	ip, r6, #1
  404562:	f042 0601 	orr.w	r6, r2, #1
  404566:	f8c4 c004 	str.w	ip, [r4, #4]
  40456a:	4628      	mov	r0, r5
  40456c:	6179      	str	r1, [r7, #20]
  40456e:	6139      	str	r1, [r7, #16]
  404570:	f8c1 e00c 	str.w	lr, [r1, #12]
  404574:	f8c1 e008 	str.w	lr, [r1, #8]
  404578:	604e      	str	r6, [r1, #4]
  40457a:	50e2      	str	r2, [r4, r3]
  40457c:	f000 fa64 	bl	404a48 <__malloc_unlock>
  404580:	3408      	adds	r4, #8
  404582:	e6dd      	b.n	404340 <_malloc_r+0x18c>
  404584:	687b      	ldr	r3, [r7, #4]
  404586:	e679      	b.n	40427c <_malloc_r+0xc8>
  404588:	f108 0801 	add.w	r8, r8, #1
  40458c:	f018 0f03 	tst.w	r8, #3
  404590:	f10c 0c08 	add.w	ip, ip, #8
  404594:	f47f ae85 	bne.w	4042a2 <_malloc_r+0xee>
  404598:	e02d      	b.n	4045f6 <_malloc_r+0x442>
  40459a:	68dc      	ldr	r4, [r3, #12]
  40459c:	42a3      	cmp	r3, r4
  40459e:	bf08      	it	eq
  4045a0:	3002      	addeq	r0, #2
  4045a2:	f43f ae3e 	beq.w	404222 <_malloc_r+0x6e>
  4045a6:	e6bb      	b.n	404320 <_malloc_r+0x16c>
  4045a8:	4419      	add	r1, r3
  4045aa:	461c      	mov	r4, r3
  4045ac:	684a      	ldr	r2, [r1, #4]
  4045ae:	68db      	ldr	r3, [r3, #12]
  4045b0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4045b4:	f042 0201 	orr.w	r2, r2, #1
  4045b8:	604a      	str	r2, [r1, #4]
  4045ba:	4628      	mov	r0, r5
  4045bc:	60f3      	str	r3, [r6, #12]
  4045be:	609e      	str	r6, [r3, #8]
  4045c0:	f000 fa42 	bl	404a48 <__malloc_unlock>
  4045c4:	e6bc      	b.n	404340 <_malloc_r+0x18c>
  4045c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4045ca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4045ce:	00c3      	lsls	r3, r0, #3
  4045d0:	e612      	b.n	4041f8 <_malloc_r+0x44>
  4045d2:	099a      	lsrs	r2, r3, #6
  4045d4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4045d8:	00c9      	lsls	r1, r1, #3
  4045da:	3238      	adds	r2, #56	; 0x38
  4045dc:	e7a4      	b.n	404528 <_malloc_r+0x374>
  4045de:	42bc      	cmp	r4, r7
  4045e0:	d054      	beq.n	40468c <_malloc_r+0x4d8>
  4045e2:	68bc      	ldr	r4, [r7, #8]
  4045e4:	6862      	ldr	r2, [r4, #4]
  4045e6:	f022 0203 	bic.w	r2, r2, #3
  4045ea:	e75d      	b.n	4044a8 <_malloc_r+0x2f4>
  4045ec:	f859 3908 	ldr.w	r3, [r9], #-8
  4045f0:	4599      	cmp	r9, r3
  4045f2:	f040 8086 	bne.w	404702 <_malloc_r+0x54e>
  4045f6:	f010 0f03 	tst.w	r0, #3
  4045fa:	f100 30ff 	add.w	r0, r0, #4294967295
  4045fe:	d1f5      	bne.n	4045ec <_malloc_r+0x438>
  404600:	687b      	ldr	r3, [r7, #4]
  404602:	ea23 0304 	bic.w	r3, r3, r4
  404606:	607b      	str	r3, [r7, #4]
  404608:	0064      	lsls	r4, r4, #1
  40460a:	429c      	cmp	r4, r3
  40460c:	f63f aec7 	bhi.w	40439e <_malloc_r+0x1ea>
  404610:	2c00      	cmp	r4, #0
  404612:	f43f aec4 	beq.w	40439e <_malloc_r+0x1ea>
  404616:	421c      	tst	r4, r3
  404618:	4640      	mov	r0, r8
  40461a:	f47f ae3e 	bne.w	40429a <_malloc_r+0xe6>
  40461e:	0064      	lsls	r4, r4, #1
  404620:	421c      	tst	r4, r3
  404622:	f100 0004 	add.w	r0, r0, #4
  404626:	d0fa      	beq.n	40461e <_malloc_r+0x46a>
  404628:	e637      	b.n	40429a <_malloc_r+0xe6>
  40462a:	468c      	mov	ip, r1
  40462c:	e78c      	b.n	404548 <_malloc_r+0x394>
  40462e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404632:	d815      	bhi.n	404660 <_malloc_r+0x4ac>
  404634:	0bf3      	lsrs	r3, r6, #15
  404636:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40463a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40463e:	00c3      	lsls	r3, r0, #3
  404640:	e5da      	b.n	4041f8 <_malloc_r+0x44>
  404642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404646:	e6ed      	b.n	404424 <_malloc_r+0x270>
  404648:	687b      	ldr	r3, [r7, #4]
  40464a:	1092      	asrs	r2, r2, #2
  40464c:	2101      	movs	r1, #1
  40464e:	fa01 f202 	lsl.w	r2, r1, r2
  404652:	4313      	orrs	r3, r2
  404654:	607b      	str	r3, [r7, #4]
  404656:	4662      	mov	r2, ip
  404658:	e779      	b.n	40454e <_malloc_r+0x39a>
  40465a:	2301      	movs	r3, #1
  40465c:	6053      	str	r3, [r2, #4]
  40465e:	e729      	b.n	4044b4 <_malloc_r+0x300>
  404660:	f240 5254 	movw	r2, #1364	; 0x554
  404664:	4293      	cmp	r3, r2
  404666:	d822      	bhi.n	4046ae <_malloc_r+0x4fa>
  404668:	0cb3      	lsrs	r3, r6, #18
  40466a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40466e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404672:	00c3      	lsls	r3, r0, #3
  404674:	e5c0      	b.n	4041f8 <_malloc_r+0x44>
  404676:	f103 0b10 	add.w	fp, r3, #16
  40467a:	e6ae      	b.n	4043da <_malloc_r+0x226>
  40467c:	2a54      	cmp	r2, #84	; 0x54
  40467e:	d829      	bhi.n	4046d4 <_malloc_r+0x520>
  404680:	0b1a      	lsrs	r2, r3, #12
  404682:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404686:	00c9      	lsls	r1, r1, #3
  404688:	326e      	adds	r2, #110	; 0x6e
  40468a:	e74d      	b.n	404528 <_malloc_r+0x374>
  40468c:	4b20      	ldr	r3, [pc, #128]	; (404710 <_malloc_r+0x55c>)
  40468e:	6819      	ldr	r1, [r3, #0]
  404690:	4459      	add	r1, fp
  404692:	6019      	str	r1, [r3, #0]
  404694:	e6b2      	b.n	4043fc <_malloc_r+0x248>
  404696:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40469a:	2800      	cmp	r0, #0
  40469c:	f47f aeae 	bne.w	4043fc <_malloc_r+0x248>
  4046a0:	eb08 030b 	add.w	r3, r8, fp
  4046a4:	68ba      	ldr	r2, [r7, #8]
  4046a6:	f043 0301 	orr.w	r3, r3, #1
  4046aa:	6053      	str	r3, [r2, #4]
  4046ac:	e6ee      	b.n	40448c <_malloc_r+0x2d8>
  4046ae:	207f      	movs	r0, #127	; 0x7f
  4046b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4046b4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4046b8:	e59e      	b.n	4041f8 <_malloc_r+0x44>
  4046ba:	f104 0108 	add.w	r1, r4, #8
  4046be:	4628      	mov	r0, r5
  4046c0:	9300      	str	r3, [sp, #0]
  4046c2:	f7ff fa13 	bl	403aec <_free_r>
  4046c6:	9b00      	ldr	r3, [sp, #0]
  4046c8:	6819      	ldr	r1, [r3, #0]
  4046ca:	e6df      	b.n	40448c <_malloc_r+0x2d8>
  4046cc:	2001      	movs	r0, #1
  4046ce:	f04f 0900 	mov.w	r9, #0
  4046d2:	e6bc      	b.n	40444e <_malloc_r+0x29a>
  4046d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4046d8:	d805      	bhi.n	4046e6 <_malloc_r+0x532>
  4046da:	0bda      	lsrs	r2, r3, #15
  4046dc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4046e0:	00c9      	lsls	r1, r1, #3
  4046e2:	3277      	adds	r2, #119	; 0x77
  4046e4:	e720      	b.n	404528 <_malloc_r+0x374>
  4046e6:	f240 5154 	movw	r1, #1364	; 0x554
  4046ea:	428a      	cmp	r2, r1
  4046ec:	d805      	bhi.n	4046fa <_malloc_r+0x546>
  4046ee:	0c9a      	lsrs	r2, r3, #18
  4046f0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4046f4:	00c9      	lsls	r1, r1, #3
  4046f6:	327c      	adds	r2, #124	; 0x7c
  4046f8:	e716      	b.n	404528 <_malloc_r+0x374>
  4046fa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4046fe:	227e      	movs	r2, #126	; 0x7e
  404700:	e712      	b.n	404528 <_malloc_r+0x374>
  404702:	687b      	ldr	r3, [r7, #4]
  404704:	e780      	b.n	404608 <_malloc_r+0x454>
  404706:	08f0      	lsrs	r0, r6, #3
  404708:	f106 0308 	add.w	r3, r6, #8
  40470c:	e600      	b.n	404310 <_malloc_r+0x15c>
  40470e:	bf00      	nop
  404710:	20400af0 	.word	0x20400af0

00404714 <_mbrtowc_r>:
  404714:	b5f0      	push	{r4, r5, r6, r7, lr}
  404716:	b083      	sub	sp, #12
  404718:	4607      	mov	r7, r0
  40471a:	9d08      	ldr	r5, [sp, #32]
  40471c:	b192      	cbz	r2, 404744 <_mbrtowc_r+0x30>
  40471e:	4c11      	ldr	r4, [pc, #68]	; (404764 <_mbrtowc_r+0x50>)
  404720:	4e11      	ldr	r6, [pc, #68]	; (404768 <_mbrtowc_r+0x54>)
  404722:	6824      	ldr	r4, [r4, #0]
  404724:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404726:	9500      	str	r5, [sp, #0]
  404728:	2c00      	cmp	r4, #0
  40472a:	bf08      	it	eq
  40472c:	4634      	moveq	r4, r6
  40472e:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
  404732:	47a0      	blx	r4
  404734:	1c43      	adds	r3, r0, #1
  404736:	d103      	bne.n	404740 <_mbrtowc_r+0x2c>
  404738:	2200      	movs	r2, #0
  40473a:	238a      	movs	r3, #138	; 0x8a
  40473c:	602a      	str	r2, [r5, #0]
  40473e:	603b      	str	r3, [r7, #0]
  404740:	b003      	add	sp, #12
  404742:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404744:	4b07      	ldr	r3, [pc, #28]	; (404764 <_mbrtowc_r+0x50>)
  404746:	4908      	ldr	r1, [pc, #32]	; (404768 <_mbrtowc_r+0x54>)
  404748:	681b      	ldr	r3, [r3, #0]
  40474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40474c:	9500      	str	r5, [sp, #0]
  40474e:	2b00      	cmp	r3, #0
  404750:	bf08      	it	eq
  404752:	460b      	moveq	r3, r1
  404754:	4614      	mov	r4, r2
  404756:	4621      	mov	r1, r4
  404758:	4a04      	ldr	r2, [pc, #16]	; (40476c <_mbrtowc_r+0x58>)
  40475a:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
  40475e:	2301      	movs	r3, #1
  404760:	47a0      	blx	r4
  404762:	e7e7      	b.n	404734 <_mbrtowc_r+0x20>
  404764:	20400058 	.word	0x20400058
  404768:	2040048c 	.word	0x2040048c
  40476c:	004062e0 	.word	0x004062e0

00404770 <__ascii_mbtowc>:
  404770:	b082      	sub	sp, #8
  404772:	b149      	cbz	r1, 404788 <__ascii_mbtowc+0x18>
  404774:	b15a      	cbz	r2, 40478e <__ascii_mbtowc+0x1e>
  404776:	b16b      	cbz	r3, 404794 <__ascii_mbtowc+0x24>
  404778:	7813      	ldrb	r3, [r2, #0]
  40477a:	600b      	str	r3, [r1, #0]
  40477c:	7812      	ldrb	r2, [r2, #0]
  40477e:	1c10      	adds	r0, r2, #0
  404780:	bf18      	it	ne
  404782:	2001      	movne	r0, #1
  404784:	b002      	add	sp, #8
  404786:	4770      	bx	lr
  404788:	a901      	add	r1, sp, #4
  40478a:	2a00      	cmp	r2, #0
  40478c:	d1f3      	bne.n	404776 <__ascii_mbtowc+0x6>
  40478e:	4610      	mov	r0, r2
  404790:	b002      	add	sp, #8
  404792:	4770      	bx	lr
  404794:	f06f 0001 	mvn.w	r0, #1
  404798:	e7f4      	b.n	404784 <__ascii_mbtowc+0x14>
  40479a:	bf00      	nop
  40479c:	0000      	movs	r0, r0
	...

004047a0 <memchr>:
  4047a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4047a4:	2a10      	cmp	r2, #16
  4047a6:	db2b      	blt.n	404800 <memchr+0x60>
  4047a8:	f010 0f07 	tst.w	r0, #7
  4047ac:	d008      	beq.n	4047c0 <memchr+0x20>
  4047ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4047b2:	3a01      	subs	r2, #1
  4047b4:	428b      	cmp	r3, r1
  4047b6:	d02d      	beq.n	404814 <memchr+0x74>
  4047b8:	f010 0f07 	tst.w	r0, #7
  4047bc:	b342      	cbz	r2, 404810 <memchr+0x70>
  4047be:	d1f6      	bne.n	4047ae <memchr+0xe>
  4047c0:	b4f0      	push	{r4, r5, r6, r7}
  4047c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4047c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4047ca:	f022 0407 	bic.w	r4, r2, #7
  4047ce:	f07f 0700 	mvns.w	r7, #0
  4047d2:	2300      	movs	r3, #0
  4047d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4047d8:	3c08      	subs	r4, #8
  4047da:	ea85 0501 	eor.w	r5, r5, r1
  4047de:	ea86 0601 	eor.w	r6, r6, r1
  4047e2:	fa85 f547 	uadd8	r5, r5, r7
  4047e6:	faa3 f587 	sel	r5, r3, r7
  4047ea:	fa86 f647 	uadd8	r6, r6, r7
  4047ee:	faa5 f687 	sel	r6, r5, r7
  4047f2:	b98e      	cbnz	r6, 404818 <memchr+0x78>
  4047f4:	d1ee      	bne.n	4047d4 <memchr+0x34>
  4047f6:	bcf0      	pop	{r4, r5, r6, r7}
  4047f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4047fc:	f002 0207 	and.w	r2, r2, #7
  404800:	b132      	cbz	r2, 404810 <memchr+0x70>
  404802:	f810 3b01 	ldrb.w	r3, [r0], #1
  404806:	3a01      	subs	r2, #1
  404808:	ea83 0301 	eor.w	r3, r3, r1
  40480c:	b113      	cbz	r3, 404814 <memchr+0x74>
  40480e:	d1f8      	bne.n	404802 <memchr+0x62>
  404810:	2000      	movs	r0, #0
  404812:	4770      	bx	lr
  404814:	3801      	subs	r0, #1
  404816:	4770      	bx	lr
  404818:	2d00      	cmp	r5, #0
  40481a:	bf06      	itte	eq
  40481c:	4635      	moveq	r5, r6
  40481e:	3803      	subeq	r0, #3
  404820:	3807      	subne	r0, #7
  404822:	f015 0f01 	tst.w	r5, #1
  404826:	d107      	bne.n	404838 <memchr+0x98>
  404828:	3001      	adds	r0, #1
  40482a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40482e:	bf02      	ittt	eq
  404830:	3001      	addeq	r0, #1
  404832:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404836:	3001      	addeq	r0, #1
  404838:	bcf0      	pop	{r4, r5, r6, r7}
  40483a:	3801      	subs	r0, #1
  40483c:	4770      	bx	lr
  40483e:	bf00      	nop

00404840 <memcpy>:
  404840:	4684      	mov	ip, r0
  404842:	ea41 0300 	orr.w	r3, r1, r0
  404846:	f013 0303 	ands.w	r3, r3, #3
  40484a:	d16d      	bne.n	404928 <memcpy+0xe8>
  40484c:	3a40      	subs	r2, #64	; 0x40
  40484e:	d341      	bcc.n	4048d4 <memcpy+0x94>
  404850:	f851 3b04 	ldr.w	r3, [r1], #4
  404854:	f840 3b04 	str.w	r3, [r0], #4
  404858:	f851 3b04 	ldr.w	r3, [r1], #4
  40485c:	f840 3b04 	str.w	r3, [r0], #4
  404860:	f851 3b04 	ldr.w	r3, [r1], #4
  404864:	f840 3b04 	str.w	r3, [r0], #4
  404868:	f851 3b04 	ldr.w	r3, [r1], #4
  40486c:	f840 3b04 	str.w	r3, [r0], #4
  404870:	f851 3b04 	ldr.w	r3, [r1], #4
  404874:	f840 3b04 	str.w	r3, [r0], #4
  404878:	f851 3b04 	ldr.w	r3, [r1], #4
  40487c:	f840 3b04 	str.w	r3, [r0], #4
  404880:	f851 3b04 	ldr.w	r3, [r1], #4
  404884:	f840 3b04 	str.w	r3, [r0], #4
  404888:	f851 3b04 	ldr.w	r3, [r1], #4
  40488c:	f840 3b04 	str.w	r3, [r0], #4
  404890:	f851 3b04 	ldr.w	r3, [r1], #4
  404894:	f840 3b04 	str.w	r3, [r0], #4
  404898:	f851 3b04 	ldr.w	r3, [r1], #4
  40489c:	f840 3b04 	str.w	r3, [r0], #4
  4048a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048a4:	f840 3b04 	str.w	r3, [r0], #4
  4048a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4048ac:	f840 3b04 	str.w	r3, [r0], #4
  4048b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048b4:	f840 3b04 	str.w	r3, [r0], #4
  4048b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4048bc:	f840 3b04 	str.w	r3, [r0], #4
  4048c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048c4:	f840 3b04 	str.w	r3, [r0], #4
  4048c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4048cc:	f840 3b04 	str.w	r3, [r0], #4
  4048d0:	3a40      	subs	r2, #64	; 0x40
  4048d2:	d2bd      	bcs.n	404850 <memcpy+0x10>
  4048d4:	3230      	adds	r2, #48	; 0x30
  4048d6:	d311      	bcc.n	4048fc <memcpy+0xbc>
  4048d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4048dc:	f840 3b04 	str.w	r3, [r0], #4
  4048e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048e4:	f840 3b04 	str.w	r3, [r0], #4
  4048e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4048ec:	f840 3b04 	str.w	r3, [r0], #4
  4048f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4048f4:	f840 3b04 	str.w	r3, [r0], #4
  4048f8:	3a10      	subs	r2, #16
  4048fa:	d2ed      	bcs.n	4048d8 <memcpy+0x98>
  4048fc:	320c      	adds	r2, #12
  4048fe:	d305      	bcc.n	40490c <memcpy+0xcc>
  404900:	f851 3b04 	ldr.w	r3, [r1], #4
  404904:	f840 3b04 	str.w	r3, [r0], #4
  404908:	3a04      	subs	r2, #4
  40490a:	d2f9      	bcs.n	404900 <memcpy+0xc0>
  40490c:	3204      	adds	r2, #4
  40490e:	d008      	beq.n	404922 <memcpy+0xe2>
  404910:	07d2      	lsls	r2, r2, #31
  404912:	bf1c      	itt	ne
  404914:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404918:	f800 3b01 	strbne.w	r3, [r0], #1
  40491c:	d301      	bcc.n	404922 <memcpy+0xe2>
  40491e:	880b      	ldrh	r3, [r1, #0]
  404920:	8003      	strh	r3, [r0, #0]
  404922:	4660      	mov	r0, ip
  404924:	4770      	bx	lr
  404926:	bf00      	nop
  404928:	2a08      	cmp	r2, #8
  40492a:	d313      	bcc.n	404954 <memcpy+0x114>
  40492c:	078b      	lsls	r3, r1, #30
  40492e:	d08d      	beq.n	40484c <memcpy+0xc>
  404930:	f010 0303 	ands.w	r3, r0, #3
  404934:	d08a      	beq.n	40484c <memcpy+0xc>
  404936:	f1c3 0304 	rsb	r3, r3, #4
  40493a:	1ad2      	subs	r2, r2, r3
  40493c:	07db      	lsls	r3, r3, #31
  40493e:	bf1c      	itt	ne
  404940:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404944:	f800 3b01 	strbne.w	r3, [r0], #1
  404948:	d380      	bcc.n	40484c <memcpy+0xc>
  40494a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40494e:	f820 3b02 	strh.w	r3, [r0], #2
  404952:	e77b      	b.n	40484c <memcpy+0xc>
  404954:	3a04      	subs	r2, #4
  404956:	d3d9      	bcc.n	40490c <memcpy+0xcc>
  404958:	3a01      	subs	r2, #1
  40495a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40495e:	f800 3b01 	strb.w	r3, [r0], #1
  404962:	d2f9      	bcs.n	404958 <memcpy+0x118>
  404964:	780b      	ldrb	r3, [r1, #0]
  404966:	7003      	strb	r3, [r0, #0]
  404968:	784b      	ldrb	r3, [r1, #1]
  40496a:	7043      	strb	r3, [r0, #1]
  40496c:	788b      	ldrb	r3, [r1, #2]
  40496e:	7083      	strb	r3, [r0, #2]
  404970:	4660      	mov	r0, ip
  404972:	4770      	bx	lr

00404974 <memmove>:
  404974:	4288      	cmp	r0, r1
  404976:	b5f0      	push	{r4, r5, r6, r7, lr}
  404978:	d90d      	bls.n	404996 <memmove+0x22>
  40497a:	188b      	adds	r3, r1, r2
  40497c:	4298      	cmp	r0, r3
  40497e:	d20a      	bcs.n	404996 <memmove+0x22>
  404980:	1884      	adds	r4, r0, r2
  404982:	2a00      	cmp	r2, #0
  404984:	d051      	beq.n	404a2a <memmove+0xb6>
  404986:	4622      	mov	r2, r4
  404988:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40498c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404990:	4299      	cmp	r1, r3
  404992:	d1f9      	bne.n	404988 <memmove+0x14>
  404994:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404996:	2a0f      	cmp	r2, #15
  404998:	d948      	bls.n	404a2c <memmove+0xb8>
  40499a:	ea41 0300 	orr.w	r3, r1, r0
  40499e:	079b      	lsls	r3, r3, #30
  4049a0:	d146      	bne.n	404a30 <memmove+0xbc>
  4049a2:	f100 0410 	add.w	r4, r0, #16
  4049a6:	f101 0310 	add.w	r3, r1, #16
  4049aa:	4615      	mov	r5, r2
  4049ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4049b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4049b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4049b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4049bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4049c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4049c4:	3d10      	subs	r5, #16
  4049c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4049ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4049ce:	2d0f      	cmp	r5, #15
  4049d0:	f103 0310 	add.w	r3, r3, #16
  4049d4:	f104 0410 	add.w	r4, r4, #16
  4049d8:	d8e8      	bhi.n	4049ac <memmove+0x38>
  4049da:	f1a2 0310 	sub.w	r3, r2, #16
  4049de:	f023 030f 	bic.w	r3, r3, #15
  4049e2:	f002 0e0f 	and.w	lr, r2, #15
  4049e6:	3310      	adds	r3, #16
  4049e8:	f1be 0f03 	cmp.w	lr, #3
  4049ec:	4419      	add	r1, r3
  4049ee:	4403      	add	r3, r0
  4049f0:	d921      	bls.n	404a36 <memmove+0xc2>
  4049f2:	1f1e      	subs	r6, r3, #4
  4049f4:	460d      	mov	r5, r1
  4049f6:	4674      	mov	r4, lr
  4049f8:	3c04      	subs	r4, #4
  4049fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4049fe:	f846 7f04 	str.w	r7, [r6, #4]!
  404a02:	2c03      	cmp	r4, #3
  404a04:	d8f8      	bhi.n	4049f8 <memmove+0x84>
  404a06:	f1ae 0404 	sub.w	r4, lr, #4
  404a0a:	f024 0403 	bic.w	r4, r4, #3
  404a0e:	3404      	adds	r4, #4
  404a10:	4421      	add	r1, r4
  404a12:	4423      	add	r3, r4
  404a14:	f002 0203 	and.w	r2, r2, #3
  404a18:	b162      	cbz	r2, 404a34 <memmove+0xc0>
  404a1a:	3b01      	subs	r3, #1
  404a1c:	440a      	add	r2, r1
  404a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  404a22:	f803 4f01 	strb.w	r4, [r3, #1]!
  404a26:	428a      	cmp	r2, r1
  404a28:	d1f9      	bne.n	404a1e <memmove+0xaa>
  404a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404a2c:	4603      	mov	r3, r0
  404a2e:	e7f3      	b.n	404a18 <memmove+0xa4>
  404a30:	4603      	mov	r3, r0
  404a32:	e7f2      	b.n	404a1a <memmove+0xa6>
  404a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404a36:	4672      	mov	r2, lr
  404a38:	e7ee      	b.n	404a18 <memmove+0xa4>
  404a3a:	bf00      	nop

00404a3c <__malloc_lock>:
  404a3c:	4801      	ldr	r0, [pc, #4]	; (404a44 <__malloc_lock+0x8>)
  404a3e:	f7ff bb35 	b.w	4040ac <__retarget_lock_acquire_recursive>
  404a42:	bf00      	nop
  404a44:	20400e80 	.word	0x20400e80

00404a48 <__malloc_unlock>:
  404a48:	4801      	ldr	r0, [pc, #4]	; (404a50 <__malloc_unlock+0x8>)
  404a4a:	f7ff bb31 	b.w	4040b0 <__retarget_lock_release_recursive>
  404a4e:	bf00      	nop
  404a50:	20400e80 	.word	0x20400e80

00404a54 <_realloc_r>:
  404a54:	2900      	cmp	r1, #0
  404a56:	f000 8095 	beq.w	404b84 <_realloc_r+0x130>
  404a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a5e:	460d      	mov	r5, r1
  404a60:	4616      	mov	r6, r2
  404a62:	b083      	sub	sp, #12
  404a64:	4680      	mov	r8, r0
  404a66:	f106 070b 	add.w	r7, r6, #11
  404a6a:	f7ff ffe7 	bl	404a3c <__malloc_lock>
  404a6e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  404a72:	2f16      	cmp	r7, #22
  404a74:	f02e 0403 	bic.w	r4, lr, #3
  404a78:	f1a5 0908 	sub.w	r9, r5, #8
  404a7c:	d83c      	bhi.n	404af8 <_realloc_r+0xa4>
  404a7e:	2210      	movs	r2, #16
  404a80:	4617      	mov	r7, r2
  404a82:	42be      	cmp	r6, r7
  404a84:	d83d      	bhi.n	404b02 <_realloc_r+0xae>
  404a86:	4294      	cmp	r4, r2
  404a88:	da43      	bge.n	404b12 <_realloc_r+0xbe>
  404a8a:	4bc4      	ldr	r3, [pc, #784]	; (404d9c <_realloc_r+0x348>)
  404a8c:	6899      	ldr	r1, [r3, #8]
  404a8e:	eb09 0004 	add.w	r0, r9, r4
  404a92:	4288      	cmp	r0, r1
  404a94:	f000 80b4 	beq.w	404c00 <_realloc_r+0x1ac>
  404a98:	6843      	ldr	r3, [r0, #4]
  404a9a:	f023 0101 	bic.w	r1, r3, #1
  404a9e:	4401      	add	r1, r0
  404aa0:	6849      	ldr	r1, [r1, #4]
  404aa2:	07c9      	lsls	r1, r1, #31
  404aa4:	d54c      	bpl.n	404b40 <_realloc_r+0xec>
  404aa6:	f01e 0f01 	tst.w	lr, #1
  404aaa:	f000 809b 	beq.w	404be4 <_realloc_r+0x190>
  404aae:	4631      	mov	r1, r6
  404ab0:	4640      	mov	r0, r8
  404ab2:	f7ff fb7f 	bl	4041b4 <_malloc_r>
  404ab6:	4606      	mov	r6, r0
  404ab8:	2800      	cmp	r0, #0
  404aba:	d03a      	beq.n	404b32 <_realloc_r+0xde>
  404abc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404ac0:	f023 0301 	bic.w	r3, r3, #1
  404ac4:	444b      	add	r3, r9
  404ac6:	f1a0 0208 	sub.w	r2, r0, #8
  404aca:	429a      	cmp	r2, r3
  404acc:	f000 8121 	beq.w	404d12 <_realloc_r+0x2be>
  404ad0:	1f22      	subs	r2, r4, #4
  404ad2:	2a24      	cmp	r2, #36	; 0x24
  404ad4:	f200 8107 	bhi.w	404ce6 <_realloc_r+0x292>
  404ad8:	2a13      	cmp	r2, #19
  404ada:	f200 80db 	bhi.w	404c94 <_realloc_r+0x240>
  404ade:	4603      	mov	r3, r0
  404ae0:	462a      	mov	r2, r5
  404ae2:	6811      	ldr	r1, [r2, #0]
  404ae4:	6019      	str	r1, [r3, #0]
  404ae6:	6851      	ldr	r1, [r2, #4]
  404ae8:	6059      	str	r1, [r3, #4]
  404aea:	6892      	ldr	r2, [r2, #8]
  404aec:	609a      	str	r2, [r3, #8]
  404aee:	4629      	mov	r1, r5
  404af0:	4640      	mov	r0, r8
  404af2:	f7fe fffb 	bl	403aec <_free_r>
  404af6:	e01c      	b.n	404b32 <_realloc_r+0xde>
  404af8:	f027 0707 	bic.w	r7, r7, #7
  404afc:	2f00      	cmp	r7, #0
  404afe:	463a      	mov	r2, r7
  404b00:	dabf      	bge.n	404a82 <_realloc_r+0x2e>
  404b02:	2600      	movs	r6, #0
  404b04:	230c      	movs	r3, #12
  404b06:	4630      	mov	r0, r6
  404b08:	f8c8 3000 	str.w	r3, [r8]
  404b0c:	b003      	add	sp, #12
  404b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b12:	462e      	mov	r6, r5
  404b14:	1be3      	subs	r3, r4, r7
  404b16:	2b0f      	cmp	r3, #15
  404b18:	d81e      	bhi.n	404b58 <_realloc_r+0x104>
  404b1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404b1e:	f003 0301 	and.w	r3, r3, #1
  404b22:	4323      	orrs	r3, r4
  404b24:	444c      	add	r4, r9
  404b26:	f8c9 3004 	str.w	r3, [r9, #4]
  404b2a:	6863      	ldr	r3, [r4, #4]
  404b2c:	f043 0301 	orr.w	r3, r3, #1
  404b30:	6063      	str	r3, [r4, #4]
  404b32:	4640      	mov	r0, r8
  404b34:	f7ff ff88 	bl	404a48 <__malloc_unlock>
  404b38:	4630      	mov	r0, r6
  404b3a:	b003      	add	sp, #12
  404b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b40:	f023 0303 	bic.w	r3, r3, #3
  404b44:	18e1      	adds	r1, r4, r3
  404b46:	4291      	cmp	r1, r2
  404b48:	db1f      	blt.n	404b8a <_realloc_r+0x136>
  404b4a:	68c3      	ldr	r3, [r0, #12]
  404b4c:	6882      	ldr	r2, [r0, #8]
  404b4e:	462e      	mov	r6, r5
  404b50:	60d3      	str	r3, [r2, #12]
  404b52:	460c      	mov	r4, r1
  404b54:	609a      	str	r2, [r3, #8]
  404b56:	e7dd      	b.n	404b14 <_realloc_r+0xc0>
  404b58:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404b5c:	eb09 0107 	add.w	r1, r9, r7
  404b60:	f002 0201 	and.w	r2, r2, #1
  404b64:	444c      	add	r4, r9
  404b66:	f043 0301 	orr.w	r3, r3, #1
  404b6a:	4317      	orrs	r7, r2
  404b6c:	f8c9 7004 	str.w	r7, [r9, #4]
  404b70:	604b      	str	r3, [r1, #4]
  404b72:	6863      	ldr	r3, [r4, #4]
  404b74:	f043 0301 	orr.w	r3, r3, #1
  404b78:	3108      	adds	r1, #8
  404b7a:	6063      	str	r3, [r4, #4]
  404b7c:	4640      	mov	r0, r8
  404b7e:	f7fe ffb5 	bl	403aec <_free_r>
  404b82:	e7d6      	b.n	404b32 <_realloc_r+0xde>
  404b84:	4611      	mov	r1, r2
  404b86:	f7ff bb15 	b.w	4041b4 <_malloc_r>
  404b8a:	f01e 0f01 	tst.w	lr, #1
  404b8e:	d18e      	bne.n	404aae <_realloc_r+0x5a>
  404b90:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404b94:	eba9 0a01 	sub.w	sl, r9, r1
  404b98:	f8da 1004 	ldr.w	r1, [sl, #4]
  404b9c:	f021 0103 	bic.w	r1, r1, #3
  404ba0:	440b      	add	r3, r1
  404ba2:	4423      	add	r3, r4
  404ba4:	4293      	cmp	r3, r2
  404ba6:	db25      	blt.n	404bf4 <_realloc_r+0x1a0>
  404ba8:	68c2      	ldr	r2, [r0, #12]
  404baa:	6881      	ldr	r1, [r0, #8]
  404bac:	4656      	mov	r6, sl
  404bae:	60ca      	str	r2, [r1, #12]
  404bb0:	6091      	str	r1, [r2, #8]
  404bb2:	f8da 100c 	ldr.w	r1, [sl, #12]
  404bb6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404bba:	1f22      	subs	r2, r4, #4
  404bbc:	2a24      	cmp	r2, #36	; 0x24
  404bbe:	60c1      	str	r1, [r0, #12]
  404bc0:	6088      	str	r0, [r1, #8]
  404bc2:	f200 8094 	bhi.w	404cee <_realloc_r+0x29a>
  404bc6:	2a13      	cmp	r2, #19
  404bc8:	d96f      	bls.n	404caa <_realloc_r+0x256>
  404bca:	6829      	ldr	r1, [r5, #0]
  404bcc:	f8ca 1008 	str.w	r1, [sl, #8]
  404bd0:	6869      	ldr	r1, [r5, #4]
  404bd2:	f8ca 100c 	str.w	r1, [sl, #12]
  404bd6:	2a1b      	cmp	r2, #27
  404bd8:	f200 80a2 	bhi.w	404d20 <_realloc_r+0x2cc>
  404bdc:	3508      	adds	r5, #8
  404bde:	f10a 0210 	add.w	r2, sl, #16
  404be2:	e063      	b.n	404cac <_realloc_r+0x258>
  404be4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404be8:	eba9 0a03 	sub.w	sl, r9, r3
  404bec:	f8da 1004 	ldr.w	r1, [sl, #4]
  404bf0:	f021 0103 	bic.w	r1, r1, #3
  404bf4:	1863      	adds	r3, r4, r1
  404bf6:	4293      	cmp	r3, r2
  404bf8:	f6ff af59 	blt.w	404aae <_realloc_r+0x5a>
  404bfc:	4656      	mov	r6, sl
  404bfe:	e7d8      	b.n	404bb2 <_realloc_r+0x15e>
  404c00:	6841      	ldr	r1, [r0, #4]
  404c02:	f021 0b03 	bic.w	fp, r1, #3
  404c06:	44a3      	add	fp, r4
  404c08:	f107 0010 	add.w	r0, r7, #16
  404c0c:	4583      	cmp	fp, r0
  404c0e:	da56      	bge.n	404cbe <_realloc_r+0x26a>
  404c10:	f01e 0f01 	tst.w	lr, #1
  404c14:	f47f af4b 	bne.w	404aae <_realloc_r+0x5a>
  404c18:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404c1c:	eba9 0a01 	sub.w	sl, r9, r1
  404c20:	f8da 1004 	ldr.w	r1, [sl, #4]
  404c24:	f021 0103 	bic.w	r1, r1, #3
  404c28:	448b      	add	fp, r1
  404c2a:	4558      	cmp	r0, fp
  404c2c:	dce2      	bgt.n	404bf4 <_realloc_r+0x1a0>
  404c2e:	4656      	mov	r6, sl
  404c30:	f8da 100c 	ldr.w	r1, [sl, #12]
  404c34:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404c38:	1f22      	subs	r2, r4, #4
  404c3a:	2a24      	cmp	r2, #36	; 0x24
  404c3c:	60c1      	str	r1, [r0, #12]
  404c3e:	6088      	str	r0, [r1, #8]
  404c40:	f200 808f 	bhi.w	404d62 <_realloc_r+0x30e>
  404c44:	2a13      	cmp	r2, #19
  404c46:	f240 808a 	bls.w	404d5e <_realloc_r+0x30a>
  404c4a:	6829      	ldr	r1, [r5, #0]
  404c4c:	f8ca 1008 	str.w	r1, [sl, #8]
  404c50:	6869      	ldr	r1, [r5, #4]
  404c52:	f8ca 100c 	str.w	r1, [sl, #12]
  404c56:	2a1b      	cmp	r2, #27
  404c58:	f200 808a 	bhi.w	404d70 <_realloc_r+0x31c>
  404c5c:	3508      	adds	r5, #8
  404c5e:	f10a 0210 	add.w	r2, sl, #16
  404c62:	6829      	ldr	r1, [r5, #0]
  404c64:	6011      	str	r1, [r2, #0]
  404c66:	6869      	ldr	r1, [r5, #4]
  404c68:	6051      	str	r1, [r2, #4]
  404c6a:	68a9      	ldr	r1, [r5, #8]
  404c6c:	6091      	str	r1, [r2, #8]
  404c6e:	eb0a 0107 	add.w	r1, sl, r7
  404c72:	ebab 0207 	sub.w	r2, fp, r7
  404c76:	f042 0201 	orr.w	r2, r2, #1
  404c7a:	6099      	str	r1, [r3, #8]
  404c7c:	604a      	str	r2, [r1, #4]
  404c7e:	f8da 3004 	ldr.w	r3, [sl, #4]
  404c82:	f003 0301 	and.w	r3, r3, #1
  404c86:	431f      	orrs	r7, r3
  404c88:	4640      	mov	r0, r8
  404c8a:	f8ca 7004 	str.w	r7, [sl, #4]
  404c8e:	f7ff fedb 	bl	404a48 <__malloc_unlock>
  404c92:	e751      	b.n	404b38 <_realloc_r+0xe4>
  404c94:	682b      	ldr	r3, [r5, #0]
  404c96:	6003      	str	r3, [r0, #0]
  404c98:	686b      	ldr	r3, [r5, #4]
  404c9a:	6043      	str	r3, [r0, #4]
  404c9c:	2a1b      	cmp	r2, #27
  404c9e:	d82d      	bhi.n	404cfc <_realloc_r+0x2a8>
  404ca0:	f100 0308 	add.w	r3, r0, #8
  404ca4:	f105 0208 	add.w	r2, r5, #8
  404ca8:	e71b      	b.n	404ae2 <_realloc_r+0x8e>
  404caa:	4632      	mov	r2, r6
  404cac:	6829      	ldr	r1, [r5, #0]
  404cae:	6011      	str	r1, [r2, #0]
  404cb0:	6869      	ldr	r1, [r5, #4]
  404cb2:	6051      	str	r1, [r2, #4]
  404cb4:	68a9      	ldr	r1, [r5, #8]
  404cb6:	6091      	str	r1, [r2, #8]
  404cb8:	461c      	mov	r4, r3
  404cba:	46d1      	mov	r9, sl
  404cbc:	e72a      	b.n	404b14 <_realloc_r+0xc0>
  404cbe:	eb09 0107 	add.w	r1, r9, r7
  404cc2:	ebab 0b07 	sub.w	fp, fp, r7
  404cc6:	f04b 0201 	orr.w	r2, fp, #1
  404cca:	6099      	str	r1, [r3, #8]
  404ccc:	604a      	str	r2, [r1, #4]
  404cce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404cd2:	f003 0301 	and.w	r3, r3, #1
  404cd6:	431f      	orrs	r7, r3
  404cd8:	4640      	mov	r0, r8
  404cda:	f845 7c04 	str.w	r7, [r5, #-4]
  404cde:	f7ff feb3 	bl	404a48 <__malloc_unlock>
  404ce2:	462e      	mov	r6, r5
  404ce4:	e728      	b.n	404b38 <_realloc_r+0xe4>
  404ce6:	4629      	mov	r1, r5
  404ce8:	f7ff fe44 	bl	404974 <memmove>
  404cec:	e6ff      	b.n	404aee <_realloc_r+0x9a>
  404cee:	4629      	mov	r1, r5
  404cf0:	4630      	mov	r0, r6
  404cf2:	461c      	mov	r4, r3
  404cf4:	46d1      	mov	r9, sl
  404cf6:	f7ff fe3d 	bl	404974 <memmove>
  404cfa:	e70b      	b.n	404b14 <_realloc_r+0xc0>
  404cfc:	68ab      	ldr	r3, [r5, #8]
  404cfe:	6083      	str	r3, [r0, #8]
  404d00:	68eb      	ldr	r3, [r5, #12]
  404d02:	60c3      	str	r3, [r0, #12]
  404d04:	2a24      	cmp	r2, #36	; 0x24
  404d06:	d017      	beq.n	404d38 <_realloc_r+0x2e4>
  404d08:	f100 0310 	add.w	r3, r0, #16
  404d0c:	f105 0210 	add.w	r2, r5, #16
  404d10:	e6e7      	b.n	404ae2 <_realloc_r+0x8e>
  404d12:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404d16:	f023 0303 	bic.w	r3, r3, #3
  404d1a:	441c      	add	r4, r3
  404d1c:	462e      	mov	r6, r5
  404d1e:	e6f9      	b.n	404b14 <_realloc_r+0xc0>
  404d20:	68a9      	ldr	r1, [r5, #8]
  404d22:	f8ca 1010 	str.w	r1, [sl, #16]
  404d26:	68e9      	ldr	r1, [r5, #12]
  404d28:	f8ca 1014 	str.w	r1, [sl, #20]
  404d2c:	2a24      	cmp	r2, #36	; 0x24
  404d2e:	d00c      	beq.n	404d4a <_realloc_r+0x2f6>
  404d30:	3510      	adds	r5, #16
  404d32:	f10a 0218 	add.w	r2, sl, #24
  404d36:	e7b9      	b.n	404cac <_realloc_r+0x258>
  404d38:	692b      	ldr	r3, [r5, #16]
  404d3a:	6103      	str	r3, [r0, #16]
  404d3c:	696b      	ldr	r3, [r5, #20]
  404d3e:	6143      	str	r3, [r0, #20]
  404d40:	f105 0218 	add.w	r2, r5, #24
  404d44:	f100 0318 	add.w	r3, r0, #24
  404d48:	e6cb      	b.n	404ae2 <_realloc_r+0x8e>
  404d4a:	692a      	ldr	r2, [r5, #16]
  404d4c:	f8ca 2018 	str.w	r2, [sl, #24]
  404d50:	696a      	ldr	r2, [r5, #20]
  404d52:	f8ca 201c 	str.w	r2, [sl, #28]
  404d56:	3518      	adds	r5, #24
  404d58:	f10a 0220 	add.w	r2, sl, #32
  404d5c:	e7a6      	b.n	404cac <_realloc_r+0x258>
  404d5e:	4632      	mov	r2, r6
  404d60:	e77f      	b.n	404c62 <_realloc_r+0x20e>
  404d62:	4629      	mov	r1, r5
  404d64:	4630      	mov	r0, r6
  404d66:	9301      	str	r3, [sp, #4]
  404d68:	f7ff fe04 	bl	404974 <memmove>
  404d6c:	9b01      	ldr	r3, [sp, #4]
  404d6e:	e77e      	b.n	404c6e <_realloc_r+0x21a>
  404d70:	68a9      	ldr	r1, [r5, #8]
  404d72:	f8ca 1010 	str.w	r1, [sl, #16]
  404d76:	68e9      	ldr	r1, [r5, #12]
  404d78:	f8ca 1014 	str.w	r1, [sl, #20]
  404d7c:	2a24      	cmp	r2, #36	; 0x24
  404d7e:	d003      	beq.n	404d88 <_realloc_r+0x334>
  404d80:	3510      	adds	r5, #16
  404d82:	f10a 0218 	add.w	r2, sl, #24
  404d86:	e76c      	b.n	404c62 <_realloc_r+0x20e>
  404d88:	692a      	ldr	r2, [r5, #16]
  404d8a:	f8ca 2018 	str.w	r2, [sl, #24]
  404d8e:	696a      	ldr	r2, [r5, #20]
  404d90:	f8ca 201c 	str.w	r2, [sl, #28]
  404d94:	3518      	adds	r5, #24
  404d96:	f10a 0220 	add.w	r2, sl, #32
  404d9a:	e762      	b.n	404c62 <_realloc_r+0x20e>
  404d9c:	204005f8 	.word	0x204005f8

00404da0 <lflush>:
  404da0:	8983      	ldrh	r3, [r0, #12]
  404da2:	f003 0309 	and.w	r3, r3, #9
  404da6:	2b09      	cmp	r3, #9
  404da8:	d001      	beq.n	404dae <lflush+0xe>
  404daa:	2000      	movs	r0, #0
  404dac:	4770      	bx	lr
  404dae:	f7fe bc55 	b.w	40365c <fflush>
  404db2:	bf00      	nop

00404db4 <__srefill_r>:
  404db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404db6:	460c      	mov	r4, r1
  404db8:	4605      	mov	r5, r0
  404dba:	b110      	cbz	r0, 404dc2 <__srefill_r+0xe>
  404dbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404dbe:	2b00      	cmp	r3, #0
  404dc0:	d045      	beq.n	404e4e <__srefill_r+0x9a>
  404dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404dc6:	b29a      	uxth	r2, r3
  404dc8:	0497      	lsls	r7, r2, #18
  404dca:	d407      	bmi.n	404ddc <__srefill_r+0x28>
  404dcc:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404dd6:	6662      	str	r2, [r4, #100]	; 0x64
  404dd8:	81a3      	strh	r3, [r4, #12]
  404dda:	b29a      	uxth	r2, r3
  404ddc:	2100      	movs	r1, #0
  404dde:	0696      	lsls	r6, r2, #26
  404de0:	6061      	str	r1, [r4, #4]
  404de2:	d431      	bmi.n	404e48 <__srefill_r+0x94>
  404de4:	0750      	lsls	r0, r2, #29
  404de6:	d522      	bpl.n	404e2e <__srefill_r+0x7a>
  404de8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404dea:	b161      	cbz	r1, 404e06 <__srefill_r+0x52>
  404dec:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404df0:	4299      	cmp	r1, r3
  404df2:	d002      	beq.n	404dfa <__srefill_r+0x46>
  404df4:	4628      	mov	r0, r5
  404df6:	f7fe fe79 	bl	403aec <_free_r>
  404dfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  404dfc:	6063      	str	r3, [r4, #4]
  404dfe:	2000      	movs	r0, #0
  404e00:	6320      	str	r0, [r4, #48]	; 0x30
  404e02:	2b00      	cmp	r3, #0
  404e04:	d13f      	bne.n	404e86 <__srefill_r+0xd2>
  404e06:	6923      	ldr	r3, [r4, #16]
  404e08:	2b00      	cmp	r3, #0
  404e0a:	d04c      	beq.n	404ea6 <__srefill_r+0xf2>
  404e0c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  404e10:	b2be      	uxth	r6, r7
  404e12:	07b3      	lsls	r3, r6, #30
  404e14:	d11e      	bne.n	404e54 <__srefill_r+0xa0>
  404e16:	6922      	ldr	r2, [r4, #16]
  404e18:	6022      	str	r2, [r4, #0]
  404e1a:	4628      	mov	r0, r5
  404e1c:	6963      	ldr	r3, [r4, #20]
  404e1e:	6a25      	ldr	r5, [r4, #32]
  404e20:	69e1      	ldr	r1, [r4, #28]
  404e22:	47a8      	blx	r5
  404e24:	2800      	cmp	r0, #0
  404e26:	6060      	str	r0, [r4, #4]
  404e28:	dd09      	ble.n	404e3e <__srefill_r+0x8a>
  404e2a:	2000      	movs	r0, #0
  404e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e2e:	06d1      	lsls	r1, r2, #27
  404e30:	d53e      	bpl.n	404eb0 <__srefill_r+0xfc>
  404e32:	0712      	lsls	r2, r2, #28
  404e34:	d42a      	bmi.n	404e8c <__srefill_r+0xd8>
  404e36:	f043 0304 	orr.w	r3, r3, #4
  404e3a:	81a3      	strh	r3, [r4, #12]
  404e3c:	e7e3      	b.n	404e06 <__srefill_r+0x52>
  404e3e:	89a3      	ldrh	r3, [r4, #12]
  404e40:	d119      	bne.n	404e76 <__srefill_r+0xc2>
  404e42:	f043 0320 	orr.w	r3, r3, #32
  404e46:	81a3      	strh	r3, [r4, #12]
  404e48:	f04f 30ff 	mov.w	r0, #4294967295
  404e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e4e:	f7fe fc45 	bl	4036dc <__sinit>
  404e52:	e7b6      	b.n	404dc2 <__srefill_r+0xe>
  404e54:	4b1a      	ldr	r3, [pc, #104]	; (404ec0 <__srefill_r+0x10c>)
  404e56:	491b      	ldr	r1, [pc, #108]	; (404ec4 <__srefill_r+0x110>)
  404e58:	6818      	ldr	r0, [r3, #0]
  404e5a:	2301      	movs	r3, #1
  404e5c:	81a3      	strh	r3, [r4, #12]
  404e5e:	f006 0609 	and.w	r6, r6, #9
  404e62:	f7ff f8a1 	bl	403fa8 <_fwalk>
  404e66:	2e09      	cmp	r6, #9
  404e68:	81a7      	strh	r7, [r4, #12]
  404e6a:	d1d4      	bne.n	404e16 <__srefill_r+0x62>
  404e6c:	4621      	mov	r1, r4
  404e6e:	4628      	mov	r0, r5
  404e70:	f7fe fb2a 	bl	4034c8 <__sflush_r>
  404e74:	e7cf      	b.n	404e16 <__srefill_r+0x62>
  404e76:	2200      	movs	r2, #0
  404e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404e7c:	81a3      	strh	r3, [r4, #12]
  404e7e:	6062      	str	r2, [r4, #4]
  404e80:	f04f 30ff 	mov.w	r0, #4294967295
  404e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404e88:	6023      	str	r3, [r4, #0]
  404e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e8c:	4621      	mov	r1, r4
  404e8e:	4628      	mov	r0, r5
  404e90:	f7fe fbba 	bl	403608 <_fflush_r>
  404e94:	2800      	cmp	r0, #0
  404e96:	d1d7      	bne.n	404e48 <__srefill_r+0x94>
  404e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e9c:	60a0      	str	r0, [r4, #8]
  404e9e:	61a0      	str	r0, [r4, #24]
  404ea0:	f023 0308 	bic.w	r3, r3, #8
  404ea4:	e7c7      	b.n	404e36 <__srefill_r+0x82>
  404ea6:	4621      	mov	r1, r4
  404ea8:	4628      	mov	r0, r5
  404eaa:	f7ff f931 	bl	404110 <__smakebuf_r>
  404eae:	e7ad      	b.n	404e0c <__srefill_r+0x58>
  404eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404eb4:	2209      	movs	r2, #9
  404eb6:	602a      	str	r2, [r5, #0]
  404eb8:	f04f 30ff 	mov.w	r0, #4294967295
  404ebc:	81a3      	strh	r3, [r4, #12]
  404ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ec0:	004063c4 	.word	0x004063c4
  404ec4:	00404da1 	.word	0x00404da1

00404ec8 <_sbrk_r>:
  404ec8:	b538      	push	{r3, r4, r5, lr}
  404eca:	4c07      	ldr	r4, [pc, #28]	; (404ee8 <_sbrk_r+0x20>)
  404ecc:	2300      	movs	r3, #0
  404ece:	4605      	mov	r5, r0
  404ed0:	4608      	mov	r0, r1
  404ed2:	6023      	str	r3, [r4, #0]
  404ed4:	f7fc fd1a 	bl	40190c <_sbrk>
  404ed8:	1c43      	adds	r3, r0, #1
  404eda:	d000      	beq.n	404ede <_sbrk_r+0x16>
  404edc:	bd38      	pop	{r3, r4, r5, pc}
  404ede:	6823      	ldr	r3, [r4, #0]
  404ee0:	2b00      	cmp	r3, #0
  404ee2:	d0fb      	beq.n	404edc <_sbrk_r+0x14>
  404ee4:	602b      	str	r3, [r5, #0]
  404ee6:	bd38      	pop	{r3, r4, r5, pc}
  404ee8:	20400e94 	.word	0x20400e94

00404eec <__sccl>:
  404eec:	b470      	push	{r4, r5, r6}
  404eee:	780c      	ldrb	r4, [r1, #0]
  404ef0:	2c5e      	cmp	r4, #94	; 0x5e
  404ef2:	d02f      	beq.n	404f54 <__sccl+0x68>
  404ef4:	2200      	movs	r2, #0
  404ef6:	1c4d      	adds	r5, r1, #1
  404ef8:	4616      	mov	r6, r2
  404efa:	1e43      	subs	r3, r0, #1
  404efc:	f100 01ff 	add.w	r1, r0, #255	; 0xff
  404f00:	f803 2f01 	strb.w	r2, [r3, #1]!
  404f04:	428b      	cmp	r3, r1
  404f06:	d1fb      	bne.n	404f00 <__sccl+0x14>
  404f08:	b174      	cbz	r4, 404f28 <__sccl+0x3c>
  404f0a:	f086 0201 	eor.w	r2, r6, #1
  404f0e:	5502      	strb	r2, [r0, r4]
  404f10:	1c6e      	adds	r6, r5, #1
  404f12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  404f16:	2b2d      	cmp	r3, #45	; 0x2d
  404f18:	4631      	mov	r1, r6
  404f1a:	d00d      	beq.n	404f38 <__sccl+0x4c>
  404f1c:	2b5d      	cmp	r3, #93	; 0x5d
  404f1e:	d004      	beq.n	404f2a <__sccl+0x3e>
  404f20:	b133      	cbz	r3, 404f30 <__sccl+0x44>
  404f22:	461c      	mov	r4, r3
  404f24:	4635      	mov	r5, r6
  404f26:	e7f2      	b.n	404f0e <__sccl+0x22>
  404f28:	1e69      	subs	r1, r5, #1
  404f2a:	4608      	mov	r0, r1
  404f2c:	bc70      	pop	{r4, r5, r6}
  404f2e:	4770      	bx	lr
  404f30:	4629      	mov	r1, r5
  404f32:	4608      	mov	r0, r1
  404f34:	bc70      	pop	{r4, r5, r6}
  404f36:	4770      	bx	lr
  404f38:	7869      	ldrb	r1, [r5, #1]
  404f3a:	295d      	cmp	r1, #93	; 0x5d
  404f3c:	d0f1      	beq.n	404f22 <__sccl+0x36>
  404f3e:	428c      	cmp	r4, r1
  404f40:	dcef      	bgt.n	404f22 <__sccl+0x36>
  404f42:	3502      	adds	r5, #2
  404f44:	1903      	adds	r3, r0, r4
  404f46:	3401      	adds	r4, #1
  404f48:	42a1      	cmp	r1, r4
  404f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
  404f4e:	dcfa      	bgt.n	404f46 <__sccl+0x5a>
  404f50:	3602      	adds	r6, #2
  404f52:	e7de      	b.n	404f12 <__sccl+0x26>
  404f54:	2201      	movs	r2, #1
  404f56:	784c      	ldrb	r4, [r1, #1]
  404f58:	4616      	mov	r6, r2
  404f5a:	1c8d      	adds	r5, r1, #2
  404f5c:	e7cd      	b.n	404efa <__sccl+0xe>
  404f5e:	bf00      	nop

00404f60 <__sread>:
  404f60:	b510      	push	{r4, lr}
  404f62:	460c      	mov	r4, r1
  404f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f68:	f000 fe74 	bl	405c54 <_read_r>
  404f6c:	2800      	cmp	r0, #0
  404f6e:	db03      	blt.n	404f78 <__sread+0x18>
  404f70:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404f72:	4403      	add	r3, r0
  404f74:	6523      	str	r3, [r4, #80]	; 0x50
  404f76:	bd10      	pop	{r4, pc}
  404f78:	89a3      	ldrh	r3, [r4, #12]
  404f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404f7e:	81a3      	strh	r3, [r4, #12]
  404f80:	bd10      	pop	{r4, pc}
  404f82:	bf00      	nop

00404f84 <__swrite>:
  404f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f88:	4616      	mov	r6, r2
  404f8a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404f8e:	461f      	mov	r7, r3
  404f90:	05d3      	lsls	r3, r2, #23
  404f92:	460c      	mov	r4, r1
  404f94:	4605      	mov	r5, r0
  404f96:	d507      	bpl.n	404fa8 <__swrite+0x24>
  404f98:	2200      	movs	r2, #0
  404f9a:	2302      	movs	r3, #2
  404f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fa0:	f000 fe42 	bl	405c28 <_lseek_r>
  404fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404fac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404fb0:	81a2      	strh	r2, [r4, #12]
  404fb2:	463b      	mov	r3, r7
  404fb4:	4632      	mov	r2, r6
  404fb6:	4628      	mov	r0, r5
  404fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404fbc:	f000 bd22 	b.w	405a04 <_write_r>

00404fc0 <__sseek>:
  404fc0:	b510      	push	{r4, lr}
  404fc2:	460c      	mov	r4, r1
  404fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fc8:	f000 fe2e 	bl	405c28 <_lseek_r>
  404fcc:	89a3      	ldrh	r3, [r4, #12]
  404fce:	1c42      	adds	r2, r0, #1
  404fd0:	bf0e      	itee	eq
  404fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404fda:	6520      	strne	r0, [r4, #80]	; 0x50
  404fdc:	81a3      	strh	r3, [r4, #12]
  404fde:	bd10      	pop	{r4, pc}

00404fe0 <__sclose>:
  404fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fe4:	f000 bd86 	b.w	405af4 <_close_r>
	...

00405000 <strlen>:
  405000:	f890 f000 	pld	[r0]
  405004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405008:	f020 0107 	bic.w	r1, r0, #7
  40500c:	f06f 0c00 	mvn.w	ip, #0
  405010:	f010 0407 	ands.w	r4, r0, #7
  405014:	f891 f020 	pld	[r1, #32]
  405018:	f040 8049 	bne.w	4050ae <strlen+0xae>
  40501c:	f04f 0400 	mov.w	r4, #0
  405020:	f06f 0007 	mvn.w	r0, #7
  405024:	e9d1 2300 	ldrd	r2, r3, [r1]
  405028:	f891 f040 	pld	[r1, #64]	; 0x40
  40502c:	f100 0008 	add.w	r0, r0, #8
  405030:	fa82 f24c 	uadd8	r2, r2, ip
  405034:	faa4 f28c 	sel	r2, r4, ip
  405038:	fa83 f34c 	uadd8	r3, r3, ip
  40503c:	faa2 f38c 	sel	r3, r2, ip
  405040:	bb4b      	cbnz	r3, 405096 <strlen+0x96>
  405042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405046:	fa82 f24c 	uadd8	r2, r2, ip
  40504a:	f100 0008 	add.w	r0, r0, #8
  40504e:	faa4 f28c 	sel	r2, r4, ip
  405052:	fa83 f34c 	uadd8	r3, r3, ip
  405056:	faa2 f38c 	sel	r3, r2, ip
  40505a:	b9e3      	cbnz	r3, 405096 <strlen+0x96>
  40505c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405060:	fa82 f24c 	uadd8	r2, r2, ip
  405064:	f100 0008 	add.w	r0, r0, #8
  405068:	faa4 f28c 	sel	r2, r4, ip
  40506c:	fa83 f34c 	uadd8	r3, r3, ip
  405070:	faa2 f38c 	sel	r3, r2, ip
  405074:	b97b      	cbnz	r3, 405096 <strlen+0x96>
  405076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40507a:	f101 0120 	add.w	r1, r1, #32
  40507e:	fa82 f24c 	uadd8	r2, r2, ip
  405082:	f100 0008 	add.w	r0, r0, #8
  405086:	faa4 f28c 	sel	r2, r4, ip
  40508a:	fa83 f34c 	uadd8	r3, r3, ip
  40508e:	faa2 f38c 	sel	r3, r2, ip
  405092:	2b00      	cmp	r3, #0
  405094:	d0c6      	beq.n	405024 <strlen+0x24>
  405096:	2a00      	cmp	r2, #0
  405098:	bf04      	itt	eq
  40509a:	3004      	addeq	r0, #4
  40509c:	461a      	moveq	r2, r3
  40509e:	ba12      	rev	r2, r2
  4050a0:	fab2 f282 	clz	r2, r2
  4050a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4050a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4050ac:	4770      	bx	lr
  4050ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4050b2:	f004 0503 	and.w	r5, r4, #3
  4050b6:	f1c4 0000 	rsb	r0, r4, #0
  4050ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4050be:	f014 0f04 	tst.w	r4, #4
  4050c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4050c6:	fa0c f505 	lsl.w	r5, ip, r5
  4050ca:	ea62 0205 	orn	r2, r2, r5
  4050ce:	bf1c      	itt	ne
  4050d0:	ea63 0305 	ornne	r3, r3, r5
  4050d4:	4662      	movne	r2, ip
  4050d6:	f04f 0400 	mov.w	r4, #0
  4050da:	e7a9      	b.n	405030 <strlen+0x30>

004050dc <_strtol_l.isra.0>:
  4050dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4050e4:	460f      	mov	r7, r1
  4050e6:	4680      	mov	r8, r0
  4050e8:	4616      	mov	r6, r2
  4050ea:	461d      	mov	r5, r3
  4050ec:	468a      	mov	sl, r1
  4050ee:	e000      	b.n	4050f2 <_strtol_l.isra.0+0x16>
  4050f0:	46a2      	mov	sl, r4
  4050f2:	4654      	mov	r4, sl
  4050f4:	4648      	mov	r0, r9
  4050f6:	f814 bb01 	ldrb.w	fp, [r4], #1
  4050fa:	f7fe ffc1 	bl	404080 <__locale_ctype_ptr_l>
  4050fe:	4458      	add	r0, fp
  405100:	7842      	ldrb	r2, [r0, #1]
  405102:	f012 0208 	ands.w	r2, r2, #8
  405106:	d1f3      	bne.n	4050f0 <_strtol_l.isra.0+0x14>
  405108:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  40510c:	d04f      	beq.n	4051ae <_strtol_l.isra.0+0xd2>
  40510e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  405112:	bf04      	itt	eq
  405114:	f894 b000 	ldrbeq.w	fp, [r4]
  405118:	f10a 0402 	addeq.w	r4, sl, #2
  40511c:	b11d      	cbz	r5, 405126 <_strtol_l.isra.0+0x4a>
  40511e:	2d10      	cmp	r5, #16
  405120:	d056      	beq.n	4051d0 <_strtol_l.isra.0+0xf4>
  405122:	46ac      	mov	ip, r5
  405124:	e004      	b.n	405130 <_strtol_l.isra.0+0x54>
  405126:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  40512a:	d060      	beq.n	4051ee <_strtol_l.isra.0+0x112>
  40512c:	250a      	movs	r5, #10
  40512e:	46ac      	mov	ip, r5
  405130:	2a00      	cmp	r2, #0
  405132:	bf0c      	ite	eq
  405134:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  405138:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  40513c:	2100      	movs	r1, #0
  40513e:	fbb9 fefc 	udiv	lr, r9, ip
  405142:	4608      	mov	r0, r1
  405144:	fb0c 9a1e 	mls	sl, ip, lr, r9
  405148:	e005      	b.n	405156 <_strtol_l.isra.0+0x7a>
  40514a:	d029      	beq.n	4051a0 <_strtol_l.isra.0+0xc4>
  40514c:	fb0c 3000 	mla	r0, ip, r0, r3
  405150:	2101      	movs	r1, #1
  405152:	f814 bb01 	ldrb.w	fp, [r4], #1
  405156:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  40515a:	2b09      	cmp	r3, #9
  40515c:	d905      	bls.n	40516a <_strtol_l.isra.0+0x8e>
  40515e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  405162:	2b19      	cmp	r3, #25
  405164:	d80b      	bhi.n	40517e <_strtol_l.isra.0+0xa2>
  405166:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  40516a:	429d      	cmp	r5, r3
  40516c:	dd0f      	ble.n	40518e <_strtol_l.isra.0+0xb2>
  40516e:	f1b1 3fff 	cmp.w	r1, #4294967295
  405172:	d0ee      	beq.n	405152 <_strtol_l.isra.0+0x76>
  405174:	4586      	cmp	lr, r0
  405176:	d2e8      	bcs.n	40514a <_strtol_l.isra.0+0x6e>
  405178:	f04f 31ff 	mov.w	r1, #4294967295
  40517c:	e7e9      	b.n	405152 <_strtol_l.isra.0+0x76>
  40517e:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  405182:	2b19      	cmp	r3, #25
  405184:	d803      	bhi.n	40518e <_strtol_l.isra.0+0xb2>
  405186:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  40518a:	429d      	cmp	r5, r3
  40518c:	dcef      	bgt.n	40516e <_strtol_l.isra.0+0x92>
  40518e:	1c4b      	adds	r3, r1, #1
  405190:	d013      	beq.n	4051ba <_strtol_l.isra.0+0xde>
  405192:	b102      	cbz	r2, 405196 <_strtol_l.isra.0+0xba>
  405194:	4240      	negs	r0, r0
  405196:	b146      	cbz	r6, 4051aa <_strtol_l.isra.0+0xce>
  405198:	b9c1      	cbnz	r1, 4051cc <_strtol_l.isra.0+0xf0>
  40519a:	6037      	str	r7, [r6, #0]
  40519c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051a0:	459a      	cmp	sl, r3
  4051a2:	dad3      	bge.n	40514c <_strtol_l.isra.0+0x70>
  4051a4:	f04f 31ff 	mov.w	r1, #4294967295
  4051a8:	e7d3      	b.n	405152 <_strtol_l.isra.0+0x76>
  4051aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051ae:	f894 b000 	ldrb.w	fp, [r4]
  4051b2:	2201      	movs	r2, #1
  4051b4:	f10a 0402 	add.w	r4, sl, #2
  4051b8:	e7b0      	b.n	40511c <_strtol_l.isra.0+0x40>
  4051ba:	2322      	movs	r3, #34	; 0x22
  4051bc:	f8c8 3000 	str.w	r3, [r8]
  4051c0:	b1ee      	cbz	r6, 4051fe <_strtol_l.isra.0+0x122>
  4051c2:	1e67      	subs	r7, r4, #1
  4051c4:	4648      	mov	r0, r9
  4051c6:	6037      	str	r7, [r6, #0]
  4051c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051cc:	4681      	mov	r9, r0
  4051ce:	e7f8      	b.n	4051c2 <_strtol_l.isra.0+0xe6>
  4051d0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  4051d4:	d1a5      	bne.n	405122 <_strtol_l.isra.0+0x46>
  4051d6:	7823      	ldrb	r3, [r4, #0]
  4051d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4051dc:	2b58      	cmp	r3, #88	; 0x58
  4051de:	d1a0      	bne.n	405122 <_strtol_l.isra.0+0x46>
  4051e0:	f04f 0c10 	mov.w	ip, #16
  4051e4:	f894 b001 	ldrb.w	fp, [r4, #1]
  4051e8:	4665      	mov	r5, ip
  4051ea:	3402      	adds	r4, #2
  4051ec:	e7a0      	b.n	405130 <_strtol_l.isra.0+0x54>
  4051ee:	7823      	ldrb	r3, [r4, #0]
  4051f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4051f4:	2b58      	cmp	r3, #88	; 0x58
  4051f6:	d0f3      	beq.n	4051e0 <_strtol_l.isra.0+0x104>
  4051f8:	2508      	movs	r5, #8
  4051fa:	46ac      	mov	ip, r5
  4051fc:	e798      	b.n	405130 <_strtol_l.isra.0+0x54>
  4051fe:	4648      	mov	r0, r9
  405200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405204 <_strtol_r>:
  405204:	b530      	push	{r4, r5, lr}
  405206:	4c06      	ldr	r4, [pc, #24]	; (405220 <_strtol_r+0x1c>)
  405208:	4d06      	ldr	r5, [pc, #24]	; (405224 <_strtol_r+0x20>)
  40520a:	6824      	ldr	r4, [r4, #0]
  40520c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40520e:	b083      	sub	sp, #12
  405210:	2c00      	cmp	r4, #0
  405212:	bf08      	it	eq
  405214:	462c      	moveq	r4, r5
  405216:	9400      	str	r4, [sp, #0]
  405218:	f7ff ff60 	bl	4050dc <_strtol_l.isra.0>
  40521c:	b003      	add	sp, #12
  40521e:	bd30      	pop	{r4, r5, pc}
  405220:	20400058 	.word	0x20400058
  405224:	2040048c 	.word	0x2040048c

00405228 <_strtoll_l.isra.0>:
  405228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40522c:	b085      	sub	sp, #20
  40522e:	461e      	mov	r6, r3
  405230:	9102      	str	r1, [sp, #8]
  405232:	9003      	str	r0, [sp, #12]
  405234:	9200      	str	r2, [sp, #0]
  405236:	4688      	mov	r8, r1
  405238:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40523a:	e000      	b.n	40523e <_strtoll_l.isra.0+0x16>
  40523c:	46a8      	mov	r8, r5
  40523e:	4645      	mov	r5, r8
  405240:	4638      	mov	r0, r7
  405242:	f815 4b01 	ldrb.w	r4, [r5], #1
  405246:	f7fe ff1b 	bl	404080 <__locale_ctype_ptr_l>
  40524a:	4420      	add	r0, r4
  40524c:	7843      	ldrb	r3, [r0, #1]
  40524e:	f013 0308 	ands.w	r3, r3, #8
  405252:	d1f3      	bne.n	40523c <_strtoll_l.isra.0+0x14>
  405254:	2c2d      	cmp	r4, #45	; 0x2d
  405256:	f000 8081 	beq.w	40535c <_strtoll_l.isra.0+0x134>
  40525a:	2c2b      	cmp	r4, #43	; 0x2b
  40525c:	bf03      	ittte	eq
  40525e:	782c      	ldrbeq	r4, [r5, #0]
  405260:	9301      	streq	r3, [sp, #4]
  405262:	f108 0502 	addeq.w	r5, r8, #2
  405266:	9301      	strne	r3, [sp, #4]
  405268:	b166      	cbz	r6, 405284 <_strtoll_l.isra.0+0x5c>
  40526a:	2e10      	cmp	r6, #16
  40526c:	f000 8088 	beq.w	405380 <_strtoll_l.isra.0+0x158>
  405270:	9b01      	ldr	r3, [sp, #4]
  405272:	46b0      	mov	r8, r6
  405274:	ea4f 79e6 	mov.w	r9, r6, asr #31
  405278:	b97b      	cbnz	r3, 40529a <_strtoll_l.isra.0+0x72>
  40527a:	f04f 3aff 	mov.w	sl, #4294967295
  40527e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  405282:	e00e      	b.n	4052a2 <_strtoll_l.isra.0+0x7a>
  405284:	2c30      	cmp	r4, #48	; 0x30
  405286:	f000 808a 	beq.w	40539e <_strtoll_l.isra.0+0x176>
  40528a:	f04f 080a 	mov.w	r8, #10
  40528e:	f04f 0900 	mov.w	r9, #0
  405292:	260a      	movs	r6, #10
  405294:	9b01      	ldr	r3, [sp, #4]
  405296:	2b00      	cmp	r3, #0
  405298:	d0ef      	beq.n	40527a <_strtoll_l.isra.0+0x52>
  40529a:	f04f 0a00 	mov.w	sl, #0
  40529e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  4052a2:	4642      	mov	r2, r8
  4052a4:	464b      	mov	r3, r9
  4052a6:	4650      	mov	r0, sl
  4052a8:	4639      	mov	r1, r7
  4052aa:	f000 fce9 	bl	405c80 <__aeabi_uldivmod>
  4052ae:	464b      	mov	r3, r9
  4052b0:	4693      	mov	fp, r2
  4052b2:	4650      	mov	r0, sl
  4052b4:	4642      	mov	r2, r8
  4052b6:	4639      	mov	r1, r7
  4052b8:	f000 fce2 	bl	405c80 <__aeabi_uldivmod>
  4052bc:	f04f 0e00 	mov.w	lr, #0
  4052c0:	2200      	movs	r2, #0
  4052c2:	2300      	movs	r3, #0
  4052c4:	e00f      	b.n	4052e6 <_strtoll_l.isra.0+0xbe>
  4052c6:	d044      	beq.n	405352 <_strtoll_l.isra.0+0x12a>
  4052c8:	fb02 f409 	mul.w	r4, r2, r9
  4052cc:	fb08 4403 	mla	r4, r8, r3, r4
  4052d0:	fba2 2308 	umull	r2, r3, r2, r8
  4052d4:	4423      	add	r3, r4
  4052d6:	eb12 020c 	adds.w	r2, r2, ip
  4052da:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
  4052de:	f04f 0e01 	mov.w	lr, #1
  4052e2:	f815 4b01 	ldrb.w	r4, [r5], #1
  4052e6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  4052ea:	f1bc 0f09 	cmp.w	ip, #9
  4052ee:	d906      	bls.n	4052fe <_strtoll_l.isra.0+0xd6>
  4052f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
  4052f4:	f1bc 0f19 	cmp.w	ip, #25
  4052f8:	d80d      	bhi.n	405316 <_strtoll_l.isra.0+0xee>
  4052fa:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
  4052fe:	4566      	cmp	r6, ip
  405300:	dd12      	ble.n	405328 <_strtoll_l.isra.0+0x100>
  405302:	f1be 3fff 	cmp.w	lr, #4294967295
  405306:	d0ec      	beq.n	4052e2 <_strtoll_l.isra.0+0xba>
  405308:	4299      	cmp	r1, r3
  40530a:	bf08      	it	eq
  40530c:	4290      	cmpeq	r0, r2
  40530e:	d2da      	bcs.n	4052c6 <_strtoll_l.isra.0+0x9e>
  405310:	f04f 3eff 	mov.w	lr, #4294967295
  405314:	e7e5      	b.n	4052e2 <_strtoll_l.isra.0+0xba>
  405316:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
  40531a:	f1bc 0f19 	cmp.w	ip, #25
  40531e:	d803      	bhi.n	405328 <_strtoll_l.isra.0+0x100>
  405320:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
  405324:	4566      	cmp	r6, ip
  405326:	dcec      	bgt.n	405302 <_strtoll_l.isra.0+0xda>
  405328:	f1be 3fff 	cmp.w	lr, #4294967295
  40532c:	d01c      	beq.n	405368 <_strtoll_l.isra.0+0x140>
  40532e:	9901      	ldr	r1, [sp, #4]
  405330:	b111      	cbz	r1, 405338 <_strtoll_l.isra.0+0x110>
  405332:	4252      	negs	r2, r2
  405334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405338:	9900      	ldr	r1, [sp, #0]
  40533a:	b129      	cbz	r1, 405348 <_strtoll_l.isra.0+0x120>
  40533c:	f1be 0f00 	cmp.w	lr, #0
  405340:	d11b      	bne.n	40537a <_strtoll_l.isra.0+0x152>
  405342:	9d02      	ldr	r5, [sp, #8]
  405344:	9900      	ldr	r1, [sp, #0]
  405346:	600d      	str	r5, [r1, #0]
  405348:	4610      	mov	r0, r2
  40534a:	4619      	mov	r1, r3
  40534c:	b005      	add	sp, #20
  40534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405352:	45e3      	cmp	fp, ip
  405354:	dab8      	bge.n	4052c8 <_strtoll_l.isra.0+0xa0>
  405356:	f04f 3eff 	mov.w	lr, #4294967295
  40535a:	e7c2      	b.n	4052e2 <_strtoll_l.isra.0+0xba>
  40535c:	2301      	movs	r3, #1
  40535e:	782c      	ldrb	r4, [r5, #0]
  405360:	9301      	str	r3, [sp, #4]
  405362:	f108 0502 	add.w	r5, r8, #2
  405366:	e77f      	b.n	405268 <_strtoll_l.isra.0+0x40>
  405368:	9a03      	ldr	r2, [sp, #12]
  40536a:	2322      	movs	r3, #34	; 0x22
  40536c:	6013      	str	r3, [r2, #0]
  40536e:	9b00      	ldr	r3, [sp, #0]
  405370:	b32b      	cbz	r3, 4053be <_strtoll_l.isra.0+0x196>
  405372:	4652      	mov	r2, sl
  405374:	463b      	mov	r3, r7
  405376:	3d01      	subs	r5, #1
  405378:	e7e4      	b.n	405344 <_strtoll_l.isra.0+0x11c>
  40537a:	4692      	mov	sl, r2
  40537c:	461f      	mov	r7, r3
  40537e:	e7f8      	b.n	405372 <_strtoll_l.isra.0+0x14a>
  405380:	2c30      	cmp	r4, #48	; 0x30
  405382:	d117      	bne.n	4053b4 <_strtoll_l.isra.0+0x18c>
  405384:	782b      	ldrb	r3, [r5, #0]
  405386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  40538a:	2b58      	cmp	r3, #88	; 0x58
  40538c:	d112      	bne.n	4053b4 <_strtoll_l.isra.0+0x18c>
  40538e:	786c      	ldrb	r4, [r5, #1]
  405390:	f04f 0810 	mov.w	r8, #16
  405394:	f04f 0900 	mov.w	r9, #0
  405398:	3502      	adds	r5, #2
  40539a:	2610      	movs	r6, #16
  40539c:	e77a      	b.n	405294 <_strtoll_l.isra.0+0x6c>
  40539e:	782b      	ldrb	r3, [r5, #0]
  4053a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4053a4:	2b58      	cmp	r3, #88	; 0x58
  4053a6:	d0f2      	beq.n	40538e <_strtoll_l.isra.0+0x166>
  4053a8:	f04f 0808 	mov.w	r8, #8
  4053ac:	f04f 0900 	mov.w	r9, #0
  4053b0:	2608      	movs	r6, #8
  4053b2:	e76f      	b.n	405294 <_strtoll_l.isra.0+0x6c>
  4053b4:	f04f 0810 	mov.w	r8, #16
  4053b8:	f04f 0900 	mov.w	r9, #0
  4053bc:	e76a      	b.n	405294 <_strtoll_l.isra.0+0x6c>
  4053be:	4652      	mov	r2, sl
  4053c0:	463b      	mov	r3, r7
  4053c2:	e7c1      	b.n	405348 <_strtoll_l.isra.0+0x120>

004053c4 <_strtoll_r>:
  4053c4:	b530      	push	{r4, r5, lr}
  4053c6:	4c06      	ldr	r4, [pc, #24]	; (4053e0 <_strtoll_r+0x1c>)
  4053c8:	4d06      	ldr	r5, [pc, #24]	; (4053e4 <_strtoll_r+0x20>)
  4053ca:	6824      	ldr	r4, [r4, #0]
  4053cc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4053ce:	b083      	sub	sp, #12
  4053d0:	2c00      	cmp	r4, #0
  4053d2:	bf08      	it	eq
  4053d4:	462c      	moveq	r4, r5
  4053d6:	9400      	str	r4, [sp, #0]
  4053d8:	f7ff ff26 	bl	405228 <_strtoll_l.isra.0>
  4053dc:	b003      	add	sp, #12
  4053de:	bd30      	pop	{r4, r5, pc}
  4053e0:	20400058 	.word	0x20400058
  4053e4:	2040048c 	.word	0x2040048c

004053e8 <_strtoul_l.isra.0>:
  4053e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053ec:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4053f0:	460e      	mov	r6, r1
  4053f2:	4607      	mov	r7, r0
  4053f4:	4615      	mov	r5, r2
  4053f6:	4698      	mov	r8, r3
  4053f8:	468a      	mov	sl, r1
  4053fa:	e000      	b.n	4053fe <_strtoul_l.isra.0+0x16>
  4053fc:	46a2      	mov	sl, r4
  4053fe:	4654      	mov	r4, sl
  405400:	4648      	mov	r0, r9
  405402:	f814 bb01 	ldrb.w	fp, [r4], #1
  405406:	f7fe fe3b 	bl	404080 <__locale_ctype_ptr_l>
  40540a:	4458      	add	r0, fp
  40540c:	7840      	ldrb	r0, [r0, #1]
  40540e:	f010 0008 	ands.w	r0, r0, #8
  405412:	d1f3      	bne.n	4053fc <_strtoul_l.isra.0+0x14>
  405414:	4659      	mov	r1, fp
  405416:	292d      	cmp	r1, #45	; 0x2d
  405418:	d059      	beq.n	4054ce <_strtoul_l.isra.0+0xe6>
  40541a:	292b      	cmp	r1, #43	; 0x2b
  40541c:	bf04      	itt	eq
  40541e:	7821      	ldrbeq	r1, [r4, #0]
  405420:	f10a 0402 	addeq.w	r4, sl, #2
  405424:	f1b8 0f00 	cmp.w	r8, #0
  405428:	d00c      	beq.n	405444 <_strtoul_l.isra.0+0x5c>
  40542a:	f1b8 0f10 	cmp.w	r8, #16
  40542e:	d053      	beq.n	4054d8 <_strtoul_l.isra.0+0xf0>
  405430:	f04f 3cff 	mov.w	ip, #4294967295
  405434:	fbbc fcf8 	udiv	ip, ip, r8
  405438:	fb08 fa0c 	mul.w	sl, r8, ip
  40543c:	ea6f 0a0a 	mvn.w	sl, sl
  405440:	46c1      	mov	r9, r8
  405442:	e008      	b.n	405456 <_strtoul_l.isra.0+0x6e>
  405444:	2930      	cmp	r1, #48	; 0x30
  405446:	d058      	beq.n	4054fa <_strtoul_l.isra.0+0x112>
  405448:	f04f 080a 	mov.w	r8, #10
  40544c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 40552c <_strtoul_l.isra.0+0x144>
  405450:	46c1      	mov	r9, r8
  405452:	f04f 0a05 	mov.w	sl, #5
  405456:	2300      	movs	r3, #0
  405458:	469e      	mov	lr, r3
  40545a:	e005      	b.n	405468 <_strtoul_l.isra.0+0x80>
  40545c:	d02a      	beq.n	4054b4 <_strtoul_l.isra.0+0xcc>
  40545e:	fb09 2e0e 	mla	lr, r9, lr, r2
  405462:	2301      	movs	r3, #1
  405464:	f814 1b01 	ldrb.w	r1, [r4], #1
  405468:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
  40546c:	2a09      	cmp	r2, #9
  40546e:	d905      	bls.n	40547c <_strtoul_l.isra.0+0x94>
  405470:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
  405474:	2a19      	cmp	r2, #25
  405476:	d80a      	bhi.n	40548e <_strtoul_l.isra.0+0xa6>
  405478:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
  40547c:	4590      	cmp	r8, r2
  40547e:	dd0e      	ble.n	40549e <_strtoul_l.isra.0+0xb6>
  405480:	2b00      	cmp	r3, #0
  405482:	db01      	blt.n	405488 <_strtoul_l.isra.0+0xa0>
  405484:	45e6      	cmp	lr, ip
  405486:	d9e9      	bls.n	40545c <_strtoul_l.isra.0+0x74>
  405488:	f04f 33ff 	mov.w	r3, #4294967295
  40548c:	e7ea      	b.n	405464 <_strtoul_l.isra.0+0x7c>
  40548e:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
  405492:	2a19      	cmp	r2, #25
  405494:	d803      	bhi.n	40549e <_strtoul_l.isra.0+0xb6>
  405496:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
  40549a:	4590      	cmp	r8, r2
  40549c:	dcf0      	bgt.n	405480 <_strtoul_l.isra.0+0x98>
  40549e:	2b00      	cmp	r3, #0
  4054a0:	db0d      	blt.n	4054be <_strtoul_l.isra.0+0xd6>
  4054a2:	b108      	cbz	r0, 4054a8 <_strtoul_l.isra.0+0xc0>
  4054a4:	f1ce 0e00 	rsb	lr, lr, #0
  4054a8:	b10d      	cbz	r5, 4054ae <_strtoul_l.isra.0+0xc6>
  4054aa:	b973      	cbnz	r3, 4054ca <_strtoul_l.isra.0+0xe2>
  4054ac:	602e      	str	r6, [r5, #0]
  4054ae:	4670      	mov	r0, lr
  4054b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054b4:	4552      	cmp	r2, sl
  4054b6:	ddd2      	ble.n	40545e <_strtoul_l.isra.0+0x76>
  4054b8:	f04f 33ff 	mov.w	r3, #4294967295
  4054bc:	e7d2      	b.n	405464 <_strtoul_l.isra.0+0x7c>
  4054be:	2322      	movs	r3, #34	; 0x22
  4054c0:	603b      	str	r3, [r7, #0]
  4054c2:	f04f 3eff 	mov.w	lr, #4294967295
  4054c6:	2d00      	cmp	r5, #0
  4054c8:	d0f1      	beq.n	4054ae <_strtoul_l.isra.0+0xc6>
  4054ca:	1e66      	subs	r6, r4, #1
  4054cc:	e7ee      	b.n	4054ac <_strtoul_l.isra.0+0xc4>
  4054ce:	7821      	ldrb	r1, [r4, #0]
  4054d0:	2001      	movs	r0, #1
  4054d2:	f10a 0402 	add.w	r4, sl, #2
  4054d6:	e7a5      	b.n	405424 <_strtoul_l.isra.0+0x3c>
  4054d8:	2930      	cmp	r1, #48	; 0x30
  4054da:	d11b      	bne.n	405514 <_strtoul_l.isra.0+0x12c>
  4054dc:	7823      	ldrb	r3, [r4, #0]
  4054de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4054e2:	2b58      	cmp	r3, #88	; 0x58
  4054e4:	d11c      	bne.n	405520 <_strtoul_l.isra.0+0x138>
  4054e6:	f04f 0910 	mov.w	r9, #16
  4054ea:	7861      	ldrb	r1, [r4, #1]
  4054ec:	46c8      	mov	r8, r9
  4054ee:	f04f 0a0f 	mov.w	sl, #15
  4054f2:	3402      	adds	r4, #2
  4054f4:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  4054f8:	e7ad      	b.n	405456 <_strtoul_l.isra.0+0x6e>
  4054fa:	7823      	ldrb	r3, [r4, #0]
  4054fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  405500:	2b58      	cmp	r3, #88	; 0x58
  405502:	d0f0      	beq.n	4054e6 <_strtoul_l.isra.0+0xfe>
  405504:	f04f 0808 	mov.w	r8, #8
  405508:	46c1      	mov	r9, r8
  40550a:	f04f 0a07 	mov.w	sl, #7
  40550e:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
  405512:	e7a0      	b.n	405456 <_strtoul_l.isra.0+0x6e>
  405514:	f04f 0a0f 	mov.w	sl, #15
  405518:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  40551c:	46c1      	mov	r9, r8
  40551e:	e79a      	b.n	405456 <_strtoul_l.isra.0+0x6e>
  405520:	46c1      	mov	r9, r8
  405522:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  405526:	f04f 0a0f 	mov.w	sl, #15
  40552a:	e794      	b.n	405456 <_strtoul_l.isra.0+0x6e>
  40552c:	19999999 	.word	0x19999999

00405530 <_strtoul_r>:
  405530:	b530      	push	{r4, r5, lr}
  405532:	4c06      	ldr	r4, [pc, #24]	; (40554c <_strtoul_r+0x1c>)
  405534:	4d06      	ldr	r5, [pc, #24]	; (405550 <_strtoul_r+0x20>)
  405536:	6824      	ldr	r4, [r4, #0]
  405538:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40553a:	b083      	sub	sp, #12
  40553c:	2c00      	cmp	r4, #0
  40553e:	bf08      	it	eq
  405540:	462c      	moveq	r4, r5
  405542:	9400      	str	r4, [sp, #0]
  405544:	f7ff ff50 	bl	4053e8 <_strtoul_l.isra.0>
  405548:	b003      	add	sp, #12
  40554a:	bd30      	pop	{r4, r5, pc}
  40554c:	20400058 	.word	0x20400058
  405550:	2040048c 	.word	0x2040048c

00405554 <_strtoull_l.isra.0>:
  405554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405558:	b085      	sub	sp, #20
  40555a:	4693      	mov	fp, r2
  40555c:	9102      	str	r1, [sp, #8]
  40555e:	9003      	str	r0, [sp, #12]
  405560:	469a      	mov	sl, r3
  405562:	460f      	mov	r7, r1
  405564:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  405566:	e000      	b.n	40556a <_strtoull_l.isra.0+0x16>
  405568:	462f      	mov	r7, r5
  40556a:	463d      	mov	r5, r7
  40556c:	4630      	mov	r0, r6
  40556e:	f815 4b01 	ldrb.w	r4, [r5], #1
  405572:	f7fe fd85 	bl	404080 <__locale_ctype_ptr_l>
  405576:	4420      	add	r0, r4
  405578:	7843      	ldrb	r3, [r0, #1]
  40557a:	f013 0308 	ands.w	r3, r3, #8
  40557e:	d1f3      	bne.n	405568 <_strtoull_l.isra.0+0x14>
  405580:	2c2d      	cmp	r4, #45	; 0x2d
  405582:	f000 8089 	beq.w	405698 <_strtoull_l.isra.0+0x144>
  405586:	2c2b      	cmp	r4, #43	; 0x2b
  405588:	bf03      	ittte	eq
  40558a:	782c      	ldrbeq	r4, [r5, #0]
  40558c:	9301      	streq	r3, [sp, #4]
  40558e:	1cbd      	addeq	r5, r7, #2
  405590:	9301      	strne	r3, [sp, #4]
  405592:	f1ba 0f00 	cmp.w	sl, #0
  405596:	d019      	beq.n	4055cc <_strtoull_l.isra.0+0x78>
  405598:	f1ba 0f10 	cmp.w	sl, #16
  40559c:	f000 8081 	beq.w	4056a2 <_strtoull_l.isra.0+0x14e>
  4055a0:	46d0      	mov	r8, sl
  4055a2:	ea4f 79ea 	mov.w	r9, sl, asr #31
  4055a6:	4642      	mov	r2, r8
  4055a8:	464b      	mov	r3, r9
  4055aa:	f04f 30ff 	mov.w	r0, #4294967295
  4055ae:	f04f 31ff 	mov.w	r1, #4294967295
  4055b2:	f000 fb65 	bl	405c80 <__aeabi_uldivmod>
  4055b6:	4642      	mov	r2, r8
  4055b8:	4606      	mov	r6, r0
  4055ba:	460f      	mov	r7, r1
  4055bc:	464b      	mov	r3, r9
  4055be:	f04f 30ff 	mov.w	r0, #4294967295
  4055c2:	f04f 31ff 	mov.w	r1, #4294967295
  4055c6:	f000 fb5b 	bl	405c80 <__aeabi_uldivmod>
  4055ca:	e00b      	b.n	4055e4 <_strtoull_l.isra.0+0x90>
  4055cc:	2c30      	cmp	r4, #48	; 0x30
  4055ce:	d07d      	beq.n	4056cc <_strtoull_l.isra.0+0x178>
  4055d0:	4f4e      	ldr	r7, [pc, #312]	; (40570c <_strtoull_l.isra.0+0x1b8>)
  4055d2:	2205      	movs	r2, #5
  4055d4:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
  4055d8:	f04f 080a 	mov.w	r8, #10
  4055dc:	f04f 0900 	mov.w	r9, #0
  4055e0:	f04f 0a0a 	mov.w	sl, #10
  4055e4:	f04f 0e00 	mov.w	lr, #0
  4055e8:	2000      	movs	r0, #0
  4055ea:	2100      	movs	r1, #0
  4055ec:	e011      	b.n	405612 <_strtoull_l.isra.0+0xbe>
  4055ee:	42b9      	cmp	r1, r7
  4055f0:	bf08      	it	eq
  4055f2:	42b0      	cmpeq	r0, r6
  4055f4:	d03f      	beq.n	405676 <_strtoull_l.isra.0+0x122>
  4055f6:	fb00 f409 	mul.w	r4, r0, r9
  4055fa:	fb08 4401 	mla	r4, r8, r1, r4
  4055fe:	fba0 0108 	umull	r0, r1, r0, r8
  405602:	4421      	add	r1, r4
  405604:	18c0      	adds	r0, r0, r3
  405606:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
  40560a:	f04f 0e01 	mov.w	lr, #1
  40560e:	f815 4b01 	ldrb.w	r4, [r5], #1
  405612:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  405616:	2b09      	cmp	r3, #9
  405618:	d905      	bls.n	405626 <_strtoull_l.isra.0+0xd2>
  40561a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  40561e:	2b19      	cmp	r3, #25
  405620:	d80d      	bhi.n	40563e <_strtoull_l.isra.0+0xea>
  405622:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
  405626:	459a      	cmp	sl, r3
  405628:	dd11      	ble.n	40564e <_strtoull_l.isra.0+0xfa>
  40562a:	f1be 0f00 	cmp.w	lr, #0
  40562e:	db03      	blt.n	405638 <_strtoull_l.isra.0+0xe4>
  405630:	428f      	cmp	r7, r1
  405632:	bf08      	it	eq
  405634:	4286      	cmpeq	r6, r0
  405636:	d2da      	bcs.n	4055ee <_strtoull_l.isra.0+0x9a>
  405638:	f04f 3eff 	mov.w	lr, #4294967295
  40563c:	e7e7      	b.n	40560e <_strtoull_l.isra.0+0xba>
  40563e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
  405642:	2b19      	cmp	r3, #25
  405644:	d803      	bhi.n	40564e <_strtoull_l.isra.0+0xfa>
  405646:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
  40564a:	459a      	cmp	sl, r3
  40564c:	dced      	bgt.n	40562a <_strtoull_l.isra.0+0xd6>
  40564e:	f1be 0f00 	cmp.w	lr, #0
  405652:	db15      	blt.n	405680 <_strtoull_l.isra.0+0x12c>
  405654:	9b01      	ldr	r3, [sp, #4]
  405656:	b113      	cbz	r3, 40565e <_strtoull_l.isra.0+0x10a>
  405658:	4240      	negs	r0, r0
  40565a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40565e:	f1bb 0f00 	cmp.w	fp, #0
  405662:	d005      	beq.n	405670 <_strtoull_l.isra.0+0x11c>
  405664:	f1be 0f00 	cmp.w	lr, #0
  405668:	d114      	bne.n	405694 <_strtoull_l.isra.0+0x140>
  40566a:	9d02      	ldr	r5, [sp, #8]
  40566c:	f8cb 5000 	str.w	r5, [fp]
  405670:	b005      	add	sp, #20
  405672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405676:	4293      	cmp	r3, r2
  405678:	ddbd      	ble.n	4055f6 <_strtoull_l.isra.0+0xa2>
  40567a:	f04f 3eff 	mov.w	lr, #4294967295
  40567e:	e7c6      	b.n	40560e <_strtoull_l.isra.0+0xba>
  405680:	9a03      	ldr	r2, [sp, #12]
  405682:	2322      	movs	r3, #34	; 0x22
  405684:	6013      	str	r3, [r2, #0]
  405686:	f04f 30ff 	mov.w	r0, #4294967295
  40568a:	f04f 31ff 	mov.w	r1, #4294967295
  40568e:	f1bb 0f00 	cmp.w	fp, #0
  405692:	d0ed      	beq.n	405670 <_strtoull_l.isra.0+0x11c>
  405694:	3d01      	subs	r5, #1
  405696:	e7e9      	b.n	40566c <_strtoull_l.isra.0+0x118>
  405698:	2301      	movs	r3, #1
  40569a:	782c      	ldrb	r4, [r5, #0]
  40569c:	9301      	str	r3, [sp, #4]
  40569e:	1cbd      	adds	r5, r7, #2
  4056a0:	e777      	b.n	405592 <_strtoull_l.isra.0+0x3e>
  4056a2:	2c30      	cmp	r4, #48	; 0x30
  4056a4:	d123      	bne.n	4056ee <_strtoull_l.isra.0+0x19a>
  4056a6:	782b      	ldrb	r3, [r5, #0]
  4056a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4056ac:	2b58      	cmp	r3, #88	; 0x58
  4056ae:	d128      	bne.n	405702 <_strtoull_l.isra.0+0x1ae>
  4056b0:	786c      	ldrb	r4, [r5, #1]
  4056b2:	220f      	movs	r2, #15
  4056b4:	3502      	adds	r5, #2
  4056b6:	f04f 36ff 	mov.w	r6, #4294967295
  4056ba:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  4056be:	f04f 0810 	mov.w	r8, #16
  4056c2:	f04f 0900 	mov.w	r9, #0
  4056c6:	f04f 0a10 	mov.w	sl, #16
  4056ca:	e78b      	b.n	4055e4 <_strtoull_l.isra.0+0x90>
  4056cc:	782b      	ldrb	r3, [r5, #0]
  4056ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  4056d2:	2b58      	cmp	r3, #88	; 0x58
  4056d4:	d0ec      	beq.n	4056b0 <_strtoull_l.isra.0+0x15c>
  4056d6:	2207      	movs	r2, #7
  4056d8:	f04f 36ff 	mov.w	r6, #4294967295
  4056dc:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
  4056e0:	f04f 0808 	mov.w	r8, #8
  4056e4:	f04f 0900 	mov.w	r9, #0
  4056e8:	f04f 0a08 	mov.w	sl, #8
  4056ec:	e77a      	b.n	4055e4 <_strtoull_l.isra.0+0x90>
  4056ee:	220f      	movs	r2, #15
  4056f0:	f04f 36ff 	mov.w	r6, #4294967295
  4056f4:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  4056f8:	f04f 0810 	mov.w	r8, #16
  4056fc:	f04f 0900 	mov.w	r9, #0
  405700:	e770      	b.n	4055e4 <_strtoull_l.isra.0+0x90>
  405702:	f04f 0810 	mov.w	r8, #16
  405706:	f04f 0900 	mov.w	r9, #0
  40570a:	e74c      	b.n	4055a6 <_strtoull_l.isra.0+0x52>
  40570c:	19999999 	.word	0x19999999

00405710 <_strtoull_r>:
  405710:	b530      	push	{r4, r5, lr}
  405712:	4c06      	ldr	r4, [pc, #24]	; (40572c <_strtoull_r+0x1c>)
  405714:	4d06      	ldr	r5, [pc, #24]	; (405730 <_strtoull_r+0x20>)
  405716:	6824      	ldr	r4, [r4, #0]
  405718:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40571a:	b083      	sub	sp, #12
  40571c:	2c00      	cmp	r4, #0
  40571e:	bf08      	it	eq
  405720:	462c      	moveq	r4, r5
  405722:	9400      	str	r4, [sp, #0]
  405724:	f7ff ff16 	bl	405554 <_strtoull_l.isra.0>
  405728:	b003      	add	sp, #12
  40572a:	bd30      	pop	{r4, r5, pc}
  40572c:	20400058 	.word	0x20400058
  405730:	2040048c 	.word	0x2040048c

00405734 <__submore>:
  405734:	f101 0340 	add.w	r3, r1, #64	; 0x40
  405738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40573c:	460c      	mov	r4, r1
  40573e:	6b09      	ldr	r1, [r1, #48]	; 0x30
  405740:	4299      	cmp	r1, r3
  405742:	d014      	beq.n	40576e <__submore+0x3a>
  405744:	6b66      	ldr	r6, [r4, #52]	; 0x34
  405746:	0077      	lsls	r7, r6, #1
  405748:	463a      	mov	r2, r7
  40574a:	f7ff f983 	bl	404a54 <_realloc_r>
  40574e:	4605      	mov	r5, r0
  405750:	b340      	cbz	r0, 4057a4 <__submore+0x70>
  405752:	eb00 0806 	add.w	r8, r0, r6
  405756:	4632      	mov	r2, r6
  405758:	4640      	mov	r0, r8
  40575a:	4629      	mov	r1, r5
  40575c:	f7ff f870 	bl	404840 <memcpy>
  405760:	f8c4 8000 	str.w	r8, [r4]
  405764:	6325      	str	r5, [r4, #48]	; 0x30
  405766:	6367      	str	r7, [r4, #52]	; 0x34
  405768:	2000      	movs	r0, #0
  40576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40576e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405772:	f7fe fd1f 	bl	4041b4 <_malloc_r>
  405776:	b1a8      	cbz	r0, 4057a4 <__submore+0x70>
  405778:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  40577c:	6320      	str	r0, [r4, #48]	; 0x30
  40577e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405782:	6362      	str	r2, [r4, #52]	; 0x34
  405784:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  405788:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  40578c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  405790:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  405794:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  405798:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  40579c:	6020      	str	r0, [r4, #0]
  40579e:	2000      	movs	r0, #0
  4057a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057a4:	f04f 30ff 	mov.w	r0, #4294967295
  4057a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004057ac <_ungetc_r>:
  4057ac:	b570      	push	{r4, r5, r6, lr}
  4057ae:	1c4c      	adds	r4, r1, #1
  4057b0:	d024      	beq.n	4057fc <_ungetc_r+0x50>
  4057b2:	4606      	mov	r6, r0
  4057b4:	4614      	mov	r4, r2
  4057b6:	460d      	mov	r5, r1
  4057b8:	b110      	cbz	r0, 4057c0 <_ungetc_r+0x14>
  4057ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4057bc:	2b00      	cmp	r3, #0
  4057be:	d04d      	beq.n	40585c <_ungetc_r+0xb0>
  4057c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4057c2:	f013 0f01 	tst.w	r3, #1
  4057c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4057ca:	b29a      	uxth	r2, r3
  4057cc:	d101      	bne.n	4057d2 <_ungetc_r+0x26>
  4057ce:	0591      	lsls	r1, r2, #22
  4057d0:	d559      	bpl.n	405886 <_ungetc_r+0xda>
  4057d2:	0492      	lsls	r2, r2, #18
  4057d4:	d405      	bmi.n	4057e2 <_ungetc_r+0x36>
  4057d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4057d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4057dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4057e0:	6662      	str	r2, [r4, #100]	; 0x64
  4057e2:	f023 0320 	bic.w	r3, r3, #32
  4057e6:	b29a      	uxth	r2, r3
  4057e8:	0750      	lsls	r0, r2, #29
  4057ea:	81a3      	strh	r3, [r4, #12]
  4057ec:	d41b      	bmi.n	405826 <_ungetc_r+0x7a>
  4057ee:	06d1      	lsls	r1, r2, #27
  4057f0:	d408      	bmi.n	405804 <_ungetc_r+0x58>
  4057f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4057f4:	07d8      	lsls	r0, r3, #31
  4057f6:	d401      	bmi.n	4057fc <_ungetc_r+0x50>
  4057f8:	0591      	lsls	r1, r2, #22
  4057fa:	d53e      	bpl.n	40587a <_ungetc_r+0xce>
  4057fc:	f04f 35ff 	mov.w	r5, #4294967295
  405800:	4628      	mov	r0, r5
  405802:	bd70      	pop	{r4, r5, r6, pc}
  405804:	0712      	lsls	r2, r2, #28
  405806:	d50b      	bpl.n	405820 <_ungetc_r+0x74>
  405808:	4621      	mov	r1, r4
  40580a:	4630      	mov	r0, r6
  40580c:	f7fd fefc 	bl	403608 <_fflush_r>
  405810:	2800      	cmp	r0, #0
  405812:	d12c      	bne.n	40586e <_ungetc_r+0xc2>
  405814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405818:	60a0      	str	r0, [r4, #8]
  40581a:	61a0      	str	r0, [r4, #24]
  40581c:	f023 0308 	bic.w	r3, r3, #8
  405820:	f043 0304 	orr.w	r3, r3, #4
  405824:	81a3      	strh	r3, [r4, #12]
  405826:	6b23      	ldr	r3, [r4, #48]	; 0x30
  405828:	b2ed      	uxtb	r5, r5
  40582a:	2b00      	cmp	r3, #0
  40582c:	d034      	beq.n	405898 <_ungetc_r+0xec>
  40582e:	6862      	ldr	r2, [r4, #4]
  405830:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405832:	429a      	cmp	r2, r3
  405834:	da15      	bge.n	405862 <_ungetc_r+0xb6>
  405836:	6823      	ldr	r3, [r4, #0]
  405838:	1e5a      	subs	r2, r3, #1
  40583a:	6022      	str	r2, [r4, #0]
  40583c:	f803 5c01 	strb.w	r5, [r3, #-1]
  405840:	6863      	ldr	r3, [r4, #4]
  405842:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405844:	3301      	adds	r3, #1
  405846:	07d0      	lsls	r0, r2, #31
  405848:	6063      	str	r3, [r4, #4]
  40584a:	d4d9      	bmi.n	405800 <_ungetc_r+0x54>
  40584c:	89a3      	ldrh	r3, [r4, #12]
  40584e:	059b      	lsls	r3, r3, #22
  405850:	d4d6      	bmi.n	405800 <_ungetc_r+0x54>
  405852:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405854:	f7fe fc2c 	bl	4040b0 <__retarget_lock_release_recursive>
  405858:	4628      	mov	r0, r5
  40585a:	bd70      	pop	{r4, r5, r6, pc}
  40585c:	f7fd ff3e 	bl	4036dc <__sinit>
  405860:	e7ae      	b.n	4057c0 <_ungetc_r+0x14>
  405862:	4630      	mov	r0, r6
  405864:	4621      	mov	r1, r4
  405866:	f7ff ff65 	bl	405734 <__submore>
  40586a:	2800      	cmp	r0, #0
  40586c:	d0e3      	beq.n	405836 <_ungetc_r+0x8a>
  40586e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405870:	07de      	lsls	r6, r3, #31
  405872:	d4c3      	bmi.n	4057fc <_ungetc_r+0x50>
  405874:	89a3      	ldrh	r3, [r4, #12]
  405876:	059d      	lsls	r5, r3, #22
  405878:	d4c0      	bmi.n	4057fc <_ungetc_r+0x50>
  40587a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40587c:	f7fe fc18 	bl	4040b0 <__retarget_lock_release_recursive>
  405880:	f04f 35ff 	mov.w	r5, #4294967295
  405884:	e7bc      	b.n	405800 <_ungetc_r+0x54>
  405886:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405888:	f7fe fc10 	bl	4040ac <__retarget_lock_acquire_recursive>
  40588c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405890:	b29a      	uxth	r2, r3
  405892:	0492      	lsls	r2, r2, #18
  405894:	d4a5      	bmi.n	4057e2 <_ungetc_r+0x36>
  405896:	e79e      	b.n	4057d6 <_ungetc_r+0x2a>
  405898:	6922      	ldr	r2, [r4, #16]
  40589a:	6823      	ldr	r3, [r4, #0]
  40589c:	b172      	cbz	r2, 4058bc <_ungetc_r+0x110>
  40589e:	429a      	cmp	r2, r3
  4058a0:	d20c      	bcs.n	4058bc <_ungetc_r+0x110>
  4058a2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4058a6:	42aa      	cmp	r2, r5
  4058a8:	d108      	bne.n	4058bc <_ungetc_r+0x110>
  4058aa:	6862      	ldr	r2, [r4, #4]
  4058ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4058ae:	3b01      	subs	r3, #1
  4058b0:	3201      	adds	r2, #1
  4058b2:	07c9      	lsls	r1, r1, #31
  4058b4:	6023      	str	r3, [r4, #0]
  4058b6:	6062      	str	r2, [r4, #4]
  4058b8:	d5c8      	bpl.n	40584c <_ungetc_r+0xa0>
  4058ba:	e7a1      	b.n	405800 <_ungetc_r+0x54>
  4058bc:	63a3      	str	r3, [r4, #56]	; 0x38
  4058be:	4623      	mov	r3, r4
  4058c0:	6860      	ldr	r0, [r4, #4]
  4058c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4058c4:	2203      	movs	r2, #3
  4058c6:	f104 0140 	add.w	r1, r4, #64	; 0x40
  4058ca:	6362      	str	r2, [r4, #52]	; 0x34
  4058cc:	6321      	str	r1, [r4, #48]	; 0x30
  4058ce:	f803 5f42 	strb.w	r5, [r3, #66]!
  4058d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4058d4:	6023      	str	r3, [r4, #0]
  4058d6:	07d2      	lsls	r2, r2, #31
  4058d8:	f04f 0301 	mov.w	r3, #1
  4058dc:	6063      	str	r3, [r4, #4]
  4058de:	d48f      	bmi.n	405800 <_ungetc_r+0x54>
  4058e0:	e7b4      	b.n	40584c <_ungetc_r+0xa0>
  4058e2:	bf00      	nop

004058e4 <__swbuf_r>:
  4058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058e6:	460d      	mov	r5, r1
  4058e8:	4614      	mov	r4, r2
  4058ea:	4606      	mov	r6, r0
  4058ec:	b110      	cbz	r0, 4058f4 <__swbuf_r+0x10>
  4058ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4058f0:	2b00      	cmp	r3, #0
  4058f2:	d04b      	beq.n	40598c <__swbuf_r+0xa8>
  4058f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4058f8:	69a3      	ldr	r3, [r4, #24]
  4058fa:	60a3      	str	r3, [r4, #8]
  4058fc:	b291      	uxth	r1, r2
  4058fe:	0708      	lsls	r0, r1, #28
  405900:	d539      	bpl.n	405976 <__swbuf_r+0x92>
  405902:	6923      	ldr	r3, [r4, #16]
  405904:	2b00      	cmp	r3, #0
  405906:	d036      	beq.n	405976 <__swbuf_r+0x92>
  405908:	b2ed      	uxtb	r5, r5
  40590a:	0489      	lsls	r1, r1, #18
  40590c:	462f      	mov	r7, r5
  40590e:	d515      	bpl.n	40593c <__swbuf_r+0x58>
  405910:	6822      	ldr	r2, [r4, #0]
  405912:	6961      	ldr	r1, [r4, #20]
  405914:	1ad3      	subs	r3, r2, r3
  405916:	428b      	cmp	r3, r1
  405918:	da1c      	bge.n	405954 <__swbuf_r+0x70>
  40591a:	3301      	adds	r3, #1
  40591c:	68a1      	ldr	r1, [r4, #8]
  40591e:	1c50      	adds	r0, r2, #1
  405920:	3901      	subs	r1, #1
  405922:	60a1      	str	r1, [r4, #8]
  405924:	6020      	str	r0, [r4, #0]
  405926:	7015      	strb	r5, [r2, #0]
  405928:	6962      	ldr	r2, [r4, #20]
  40592a:	429a      	cmp	r2, r3
  40592c:	d01a      	beq.n	405964 <__swbuf_r+0x80>
  40592e:	89a3      	ldrh	r3, [r4, #12]
  405930:	07db      	lsls	r3, r3, #31
  405932:	d501      	bpl.n	405938 <__swbuf_r+0x54>
  405934:	2d0a      	cmp	r5, #10
  405936:	d015      	beq.n	405964 <__swbuf_r+0x80>
  405938:	4638      	mov	r0, r7
  40593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40593c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40593e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405942:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  405946:	81a2      	strh	r2, [r4, #12]
  405948:	6822      	ldr	r2, [r4, #0]
  40594a:	6661      	str	r1, [r4, #100]	; 0x64
  40594c:	6961      	ldr	r1, [r4, #20]
  40594e:	1ad3      	subs	r3, r2, r3
  405950:	428b      	cmp	r3, r1
  405952:	dbe2      	blt.n	40591a <__swbuf_r+0x36>
  405954:	4621      	mov	r1, r4
  405956:	4630      	mov	r0, r6
  405958:	f7fd fe56 	bl	403608 <_fflush_r>
  40595c:	b940      	cbnz	r0, 405970 <__swbuf_r+0x8c>
  40595e:	6822      	ldr	r2, [r4, #0]
  405960:	2301      	movs	r3, #1
  405962:	e7db      	b.n	40591c <__swbuf_r+0x38>
  405964:	4621      	mov	r1, r4
  405966:	4630      	mov	r0, r6
  405968:	f7fd fe4e 	bl	403608 <_fflush_r>
  40596c:	2800      	cmp	r0, #0
  40596e:	d0e3      	beq.n	405938 <__swbuf_r+0x54>
  405970:	f04f 37ff 	mov.w	r7, #4294967295
  405974:	e7e0      	b.n	405938 <__swbuf_r+0x54>
  405976:	4621      	mov	r1, r4
  405978:	4630      	mov	r0, r6
  40597a:	f7fd fd31 	bl	4033e0 <__swsetup_r>
  40597e:	2800      	cmp	r0, #0
  405980:	d1f6      	bne.n	405970 <__swbuf_r+0x8c>
  405982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405986:	6923      	ldr	r3, [r4, #16]
  405988:	b291      	uxth	r1, r2
  40598a:	e7bd      	b.n	405908 <__swbuf_r+0x24>
  40598c:	f7fd fea6 	bl	4036dc <__sinit>
  405990:	e7b0      	b.n	4058f4 <__swbuf_r+0x10>
  405992:	bf00      	nop

00405994 <_wcrtomb_r>:
  405994:	b5f0      	push	{r4, r5, r6, r7, lr}
  405996:	4606      	mov	r6, r0
  405998:	b085      	sub	sp, #20
  40599a:	461f      	mov	r7, r3
  40599c:	b189      	cbz	r1, 4059c2 <_wcrtomb_r+0x2e>
  40599e:	4c10      	ldr	r4, [pc, #64]	; (4059e0 <_wcrtomb_r+0x4c>)
  4059a0:	4d10      	ldr	r5, [pc, #64]	; (4059e4 <_wcrtomb_r+0x50>)
  4059a2:	6824      	ldr	r4, [r4, #0]
  4059a4:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4059a6:	2c00      	cmp	r4, #0
  4059a8:	bf08      	it	eq
  4059aa:	462c      	moveq	r4, r5
  4059ac:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4059b0:	47a0      	blx	r4
  4059b2:	1c43      	adds	r3, r0, #1
  4059b4:	d103      	bne.n	4059be <_wcrtomb_r+0x2a>
  4059b6:	2200      	movs	r2, #0
  4059b8:	238a      	movs	r3, #138	; 0x8a
  4059ba:	603a      	str	r2, [r7, #0]
  4059bc:	6033      	str	r3, [r6, #0]
  4059be:	b005      	add	sp, #20
  4059c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4059c2:	460c      	mov	r4, r1
  4059c4:	4906      	ldr	r1, [pc, #24]	; (4059e0 <_wcrtomb_r+0x4c>)
  4059c6:	4a07      	ldr	r2, [pc, #28]	; (4059e4 <_wcrtomb_r+0x50>)
  4059c8:	6809      	ldr	r1, [r1, #0]
  4059ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4059cc:	2900      	cmp	r1, #0
  4059ce:	bf08      	it	eq
  4059d0:	4611      	moveq	r1, r2
  4059d2:	4622      	mov	r2, r4
  4059d4:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4059d8:	a901      	add	r1, sp, #4
  4059da:	47a0      	blx	r4
  4059dc:	e7e9      	b.n	4059b2 <_wcrtomb_r+0x1e>
  4059de:	bf00      	nop
  4059e0:	20400058 	.word	0x20400058
  4059e4:	2040048c 	.word	0x2040048c

004059e8 <__ascii_wctomb>:
  4059e8:	b121      	cbz	r1, 4059f4 <__ascii_wctomb+0xc>
  4059ea:	2aff      	cmp	r2, #255	; 0xff
  4059ec:	d804      	bhi.n	4059f8 <__ascii_wctomb+0x10>
  4059ee:	700a      	strb	r2, [r1, #0]
  4059f0:	2001      	movs	r0, #1
  4059f2:	4770      	bx	lr
  4059f4:	4608      	mov	r0, r1
  4059f6:	4770      	bx	lr
  4059f8:	238a      	movs	r3, #138	; 0x8a
  4059fa:	6003      	str	r3, [r0, #0]
  4059fc:	f04f 30ff 	mov.w	r0, #4294967295
  405a00:	4770      	bx	lr
  405a02:	bf00      	nop

00405a04 <_write_r>:
  405a04:	b570      	push	{r4, r5, r6, lr}
  405a06:	460d      	mov	r5, r1
  405a08:	4c08      	ldr	r4, [pc, #32]	; (405a2c <_write_r+0x28>)
  405a0a:	4611      	mov	r1, r2
  405a0c:	4606      	mov	r6, r0
  405a0e:	461a      	mov	r2, r3
  405a10:	4628      	mov	r0, r5
  405a12:	2300      	movs	r3, #0
  405a14:	6023      	str	r3, [r4, #0]
  405a16:	f7fb fa6f 	bl	400ef8 <_write>
  405a1a:	1c43      	adds	r3, r0, #1
  405a1c:	d000      	beq.n	405a20 <_write_r+0x1c>
  405a1e:	bd70      	pop	{r4, r5, r6, pc}
  405a20:	6823      	ldr	r3, [r4, #0]
  405a22:	2b00      	cmp	r3, #0
  405a24:	d0fb      	beq.n	405a1e <_write_r+0x1a>
  405a26:	6033      	str	r3, [r6, #0]
  405a28:	bd70      	pop	{r4, r5, r6, pc}
  405a2a:	bf00      	nop
  405a2c:	20400e94 	.word	0x20400e94

00405a30 <__register_exitproc>:
  405a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405a34:	4d2c      	ldr	r5, [pc, #176]	; (405ae8 <__register_exitproc+0xb8>)
  405a36:	4606      	mov	r6, r0
  405a38:	6828      	ldr	r0, [r5, #0]
  405a3a:	4698      	mov	r8, r3
  405a3c:	460f      	mov	r7, r1
  405a3e:	4691      	mov	r9, r2
  405a40:	f7fe fb34 	bl	4040ac <__retarget_lock_acquire_recursive>
  405a44:	4b29      	ldr	r3, [pc, #164]	; (405aec <__register_exitproc+0xbc>)
  405a46:	681c      	ldr	r4, [r3, #0]
  405a48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405a4c:	2b00      	cmp	r3, #0
  405a4e:	d03e      	beq.n	405ace <__register_exitproc+0x9e>
  405a50:	685a      	ldr	r2, [r3, #4]
  405a52:	2a1f      	cmp	r2, #31
  405a54:	dc1c      	bgt.n	405a90 <__register_exitproc+0x60>
  405a56:	f102 0e01 	add.w	lr, r2, #1
  405a5a:	b176      	cbz	r6, 405a7a <__register_exitproc+0x4a>
  405a5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405a60:	2401      	movs	r4, #1
  405a62:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405a66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405a6a:	4094      	lsls	r4, r2
  405a6c:	4320      	orrs	r0, r4
  405a6e:	2e02      	cmp	r6, #2
  405a70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405a74:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405a78:	d023      	beq.n	405ac2 <__register_exitproc+0x92>
  405a7a:	3202      	adds	r2, #2
  405a7c:	f8c3 e004 	str.w	lr, [r3, #4]
  405a80:	6828      	ldr	r0, [r5, #0]
  405a82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405a86:	f7fe fb13 	bl	4040b0 <__retarget_lock_release_recursive>
  405a8a:	2000      	movs	r0, #0
  405a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a90:	4b17      	ldr	r3, [pc, #92]	; (405af0 <__register_exitproc+0xc0>)
  405a92:	b30b      	cbz	r3, 405ad8 <__register_exitproc+0xa8>
  405a94:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405a98:	f7fe fb84 	bl	4041a4 <malloc>
  405a9c:	4603      	mov	r3, r0
  405a9e:	b1d8      	cbz	r0, 405ad8 <__register_exitproc+0xa8>
  405aa0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405aa4:	6002      	str	r2, [r0, #0]
  405aa6:	2100      	movs	r1, #0
  405aa8:	6041      	str	r1, [r0, #4]
  405aaa:	460a      	mov	r2, r1
  405aac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405ab0:	f04f 0e01 	mov.w	lr, #1
  405ab4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405ab8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405abc:	2e00      	cmp	r6, #0
  405abe:	d0dc      	beq.n	405a7a <__register_exitproc+0x4a>
  405ac0:	e7cc      	b.n	405a5c <__register_exitproc+0x2c>
  405ac2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405ac6:	430c      	orrs	r4, r1
  405ac8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405acc:	e7d5      	b.n	405a7a <__register_exitproc+0x4a>
  405ace:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405ad2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405ad6:	e7bb      	b.n	405a50 <__register_exitproc+0x20>
  405ad8:	6828      	ldr	r0, [r5, #0]
  405ada:	f7fe fae9 	bl	4040b0 <__retarget_lock_release_recursive>
  405ade:	f04f 30ff 	mov.w	r0, #4294967295
  405ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ae6:	bf00      	nop
  405ae8:	20400488 	.word	0x20400488
  405aec:	004063c4 	.word	0x004063c4
  405af0:	004041a5 	.word	0x004041a5

00405af4 <_close_r>:
  405af4:	b538      	push	{r3, r4, r5, lr}
  405af6:	4c07      	ldr	r4, [pc, #28]	; (405b14 <_close_r+0x20>)
  405af8:	2300      	movs	r3, #0
  405afa:	4605      	mov	r5, r0
  405afc:	4608      	mov	r0, r1
  405afe:	6023      	str	r3, [r4, #0]
  405b00:	f7fb ff20 	bl	401944 <_close>
  405b04:	1c43      	adds	r3, r0, #1
  405b06:	d000      	beq.n	405b0a <_close_r+0x16>
  405b08:	bd38      	pop	{r3, r4, r5, pc}
  405b0a:	6823      	ldr	r3, [r4, #0]
  405b0c:	2b00      	cmp	r3, #0
  405b0e:	d0fb      	beq.n	405b08 <_close_r+0x14>
  405b10:	602b      	str	r3, [r5, #0]
  405b12:	bd38      	pop	{r3, r4, r5, pc}
  405b14:	20400e94 	.word	0x20400e94

00405b18 <_fclose_r>:
  405b18:	b570      	push	{r4, r5, r6, lr}
  405b1a:	b159      	cbz	r1, 405b34 <_fclose_r+0x1c>
  405b1c:	4605      	mov	r5, r0
  405b1e:	460c      	mov	r4, r1
  405b20:	b110      	cbz	r0, 405b28 <_fclose_r+0x10>
  405b22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b24:	2b00      	cmp	r3, #0
  405b26:	d03c      	beq.n	405ba2 <_fclose_r+0x8a>
  405b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405b2a:	07d8      	lsls	r0, r3, #31
  405b2c:	d505      	bpl.n	405b3a <_fclose_r+0x22>
  405b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b32:	b92b      	cbnz	r3, 405b40 <_fclose_r+0x28>
  405b34:	2600      	movs	r6, #0
  405b36:	4630      	mov	r0, r6
  405b38:	bd70      	pop	{r4, r5, r6, pc}
  405b3a:	89a3      	ldrh	r3, [r4, #12]
  405b3c:	0599      	lsls	r1, r3, #22
  405b3e:	d53c      	bpl.n	405bba <_fclose_r+0xa2>
  405b40:	4621      	mov	r1, r4
  405b42:	4628      	mov	r0, r5
  405b44:	f7fd fcc0 	bl	4034c8 <__sflush_r>
  405b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405b4a:	4606      	mov	r6, r0
  405b4c:	b133      	cbz	r3, 405b5c <_fclose_r+0x44>
  405b4e:	69e1      	ldr	r1, [r4, #28]
  405b50:	4628      	mov	r0, r5
  405b52:	4798      	blx	r3
  405b54:	2800      	cmp	r0, #0
  405b56:	bfb8      	it	lt
  405b58:	f04f 36ff 	movlt.w	r6, #4294967295
  405b5c:	89a3      	ldrh	r3, [r4, #12]
  405b5e:	061a      	lsls	r2, r3, #24
  405b60:	d422      	bmi.n	405ba8 <_fclose_r+0x90>
  405b62:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405b64:	b141      	cbz	r1, 405b78 <_fclose_r+0x60>
  405b66:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405b6a:	4299      	cmp	r1, r3
  405b6c:	d002      	beq.n	405b74 <_fclose_r+0x5c>
  405b6e:	4628      	mov	r0, r5
  405b70:	f7fd ffbc 	bl	403aec <_free_r>
  405b74:	2300      	movs	r3, #0
  405b76:	6323      	str	r3, [r4, #48]	; 0x30
  405b78:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405b7a:	b121      	cbz	r1, 405b86 <_fclose_r+0x6e>
  405b7c:	4628      	mov	r0, r5
  405b7e:	f7fd ffb5 	bl	403aec <_free_r>
  405b82:	2300      	movs	r3, #0
  405b84:	6463      	str	r3, [r4, #68]	; 0x44
  405b86:	f7fd fdd5 	bl	403734 <__sfp_lock_acquire>
  405b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405b8c:	2200      	movs	r2, #0
  405b8e:	07db      	lsls	r3, r3, #31
  405b90:	81a2      	strh	r2, [r4, #12]
  405b92:	d50e      	bpl.n	405bb2 <_fclose_r+0x9a>
  405b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b96:	f7fe fa87 	bl	4040a8 <__retarget_lock_close_recursive>
  405b9a:	f7fd fdd1 	bl	403740 <__sfp_lock_release>
  405b9e:	4630      	mov	r0, r6
  405ba0:	bd70      	pop	{r4, r5, r6, pc}
  405ba2:	f7fd fd9b 	bl	4036dc <__sinit>
  405ba6:	e7bf      	b.n	405b28 <_fclose_r+0x10>
  405ba8:	6921      	ldr	r1, [r4, #16]
  405baa:	4628      	mov	r0, r5
  405bac:	f7fd ff9e 	bl	403aec <_free_r>
  405bb0:	e7d7      	b.n	405b62 <_fclose_r+0x4a>
  405bb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405bb4:	f7fe fa7c 	bl	4040b0 <__retarget_lock_release_recursive>
  405bb8:	e7ec      	b.n	405b94 <_fclose_r+0x7c>
  405bba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405bbc:	f7fe fa76 	bl	4040ac <__retarget_lock_acquire_recursive>
  405bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405bc4:	2b00      	cmp	r3, #0
  405bc6:	d1bb      	bne.n	405b40 <_fclose_r+0x28>
  405bc8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405bca:	f016 0601 	ands.w	r6, r6, #1
  405bce:	d1b1      	bne.n	405b34 <_fclose_r+0x1c>
  405bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405bd2:	f7fe fa6d 	bl	4040b0 <__retarget_lock_release_recursive>
  405bd6:	4630      	mov	r0, r6
  405bd8:	bd70      	pop	{r4, r5, r6, pc}
  405bda:	bf00      	nop

00405bdc <_fstat_r>:
  405bdc:	b538      	push	{r3, r4, r5, lr}
  405bde:	460b      	mov	r3, r1
  405be0:	4c07      	ldr	r4, [pc, #28]	; (405c00 <_fstat_r+0x24>)
  405be2:	4605      	mov	r5, r0
  405be4:	4611      	mov	r1, r2
  405be6:	4618      	mov	r0, r3
  405be8:	2300      	movs	r3, #0
  405bea:	6023      	str	r3, [r4, #0]
  405bec:	f7fb fead 	bl	40194a <_fstat>
  405bf0:	1c43      	adds	r3, r0, #1
  405bf2:	d000      	beq.n	405bf6 <_fstat_r+0x1a>
  405bf4:	bd38      	pop	{r3, r4, r5, pc}
  405bf6:	6823      	ldr	r3, [r4, #0]
  405bf8:	2b00      	cmp	r3, #0
  405bfa:	d0fb      	beq.n	405bf4 <_fstat_r+0x18>
  405bfc:	602b      	str	r3, [r5, #0]
  405bfe:	bd38      	pop	{r3, r4, r5, pc}
  405c00:	20400e94 	.word	0x20400e94

00405c04 <_isatty_r>:
  405c04:	b538      	push	{r3, r4, r5, lr}
  405c06:	4c07      	ldr	r4, [pc, #28]	; (405c24 <_isatty_r+0x20>)
  405c08:	2300      	movs	r3, #0
  405c0a:	4605      	mov	r5, r0
  405c0c:	4608      	mov	r0, r1
  405c0e:	6023      	str	r3, [r4, #0]
  405c10:	f7fb fea0 	bl	401954 <_isatty>
  405c14:	1c43      	adds	r3, r0, #1
  405c16:	d000      	beq.n	405c1a <_isatty_r+0x16>
  405c18:	bd38      	pop	{r3, r4, r5, pc}
  405c1a:	6823      	ldr	r3, [r4, #0]
  405c1c:	2b00      	cmp	r3, #0
  405c1e:	d0fb      	beq.n	405c18 <_isatty_r+0x14>
  405c20:	602b      	str	r3, [r5, #0]
  405c22:	bd38      	pop	{r3, r4, r5, pc}
  405c24:	20400e94 	.word	0x20400e94

00405c28 <_lseek_r>:
  405c28:	b570      	push	{r4, r5, r6, lr}
  405c2a:	460d      	mov	r5, r1
  405c2c:	4c08      	ldr	r4, [pc, #32]	; (405c50 <_lseek_r+0x28>)
  405c2e:	4611      	mov	r1, r2
  405c30:	4606      	mov	r6, r0
  405c32:	461a      	mov	r2, r3
  405c34:	4628      	mov	r0, r5
  405c36:	2300      	movs	r3, #0
  405c38:	6023      	str	r3, [r4, #0]
  405c3a:	f7fb fe8d 	bl	401958 <_lseek>
  405c3e:	1c43      	adds	r3, r0, #1
  405c40:	d000      	beq.n	405c44 <_lseek_r+0x1c>
  405c42:	bd70      	pop	{r4, r5, r6, pc}
  405c44:	6823      	ldr	r3, [r4, #0]
  405c46:	2b00      	cmp	r3, #0
  405c48:	d0fb      	beq.n	405c42 <_lseek_r+0x1a>
  405c4a:	6033      	str	r3, [r6, #0]
  405c4c:	bd70      	pop	{r4, r5, r6, pc}
  405c4e:	bf00      	nop
  405c50:	20400e94 	.word	0x20400e94

00405c54 <_read_r>:
  405c54:	b570      	push	{r4, r5, r6, lr}
  405c56:	460d      	mov	r5, r1
  405c58:	4c08      	ldr	r4, [pc, #32]	; (405c7c <_read_r+0x28>)
  405c5a:	4611      	mov	r1, r2
  405c5c:	4606      	mov	r6, r0
  405c5e:	461a      	mov	r2, r3
  405c60:	4628      	mov	r0, r5
  405c62:	2300      	movs	r3, #0
  405c64:	6023      	str	r3, [r4, #0]
  405c66:	f7fb f929 	bl	400ebc <_read>
  405c6a:	1c43      	adds	r3, r0, #1
  405c6c:	d000      	beq.n	405c70 <_read_r+0x1c>
  405c6e:	bd70      	pop	{r4, r5, r6, pc}
  405c70:	6823      	ldr	r3, [r4, #0]
  405c72:	2b00      	cmp	r3, #0
  405c74:	d0fb      	beq.n	405c6e <_read_r+0x1a>
  405c76:	6033      	str	r3, [r6, #0]
  405c78:	bd70      	pop	{r4, r5, r6, pc}
  405c7a:	bf00      	nop
  405c7c:	20400e94 	.word	0x20400e94

00405c80 <__aeabi_uldivmod>:
  405c80:	b953      	cbnz	r3, 405c98 <__aeabi_uldivmod+0x18>
  405c82:	b94a      	cbnz	r2, 405c98 <__aeabi_uldivmod+0x18>
  405c84:	2900      	cmp	r1, #0
  405c86:	bf08      	it	eq
  405c88:	2800      	cmpeq	r0, #0
  405c8a:	bf1c      	itt	ne
  405c8c:	f04f 31ff 	movne.w	r1, #4294967295
  405c90:	f04f 30ff 	movne.w	r0, #4294967295
  405c94:	f000 b97a 	b.w	405f8c <__aeabi_idiv0>
  405c98:	f1ad 0c08 	sub.w	ip, sp, #8
  405c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405ca0:	f000 f806 	bl	405cb0 <__udivmoddi4>
  405ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
  405ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405cac:	b004      	add	sp, #16
  405cae:	4770      	bx	lr

00405cb0 <__udivmoddi4>:
  405cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405cb4:	468c      	mov	ip, r1
  405cb6:	460d      	mov	r5, r1
  405cb8:	4604      	mov	r4, r0
  405cba:	9e08      	ldr	r6, [sp, #32]
  405cbc:	2b00      	cmp	r3, #0
  405cbe:	d151      	bne.n	405d64 <__udivmoddi4+0xb4>
  405cc0:	428a      	cmp	r2, r1
  405cc2:	4617      	mov	r7, r2
  405cc4:	d96d      	bls.n	405da2 <__udivmoddi4+0xf2>
  405cc6:	fab2 fe82 	clz	lr, r2
  405cca:	f1be 0f00 	cmp.w	lr, #0
  405cce:	d00b      	beq.n	405ce8 <__udivmoddi4+0x38>
  405cd0:	f1ce 0c20 	rsb	ip, lr, #32
  405cd4:	fa01 f50e 	lsl.w	r5, r1, lr
  405cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
  405cdc:	fa02 f70e 	lsl.w	r7, r2, lr
  405ce0:	ea4c 0c05 	orr.w	ip, ip, r5
  405ce4:	fa00 f40e 	lsl.w	r4, r0, lr
  405ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405cec:	0c25      	lsrs	r5, r4, #16
  405cee:	fbbc f8fa 	udiv	r8, ip, sl
  405cf2:	fa1f f987 	uxth.w	r9, r7
  405cf6:	fb0a cc18 	mls	ip, sl, r8, ip
  405cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405cfe:	fb08 f309 	mul.w	r3, r8, r9
  405d02:	42ab      	cmp	r3, r5
  405d04:	d90a      	bls.n	405d1c <__udivmoddi4+0x6c>
  405d06:	19ed      	adds	r5, r5, r7
  405d08:	f108 32ff 	add.w	r2, r8, #4294967295
  405d0c:	f080 8123 	bcs.w	405f56 <__udivmoddi4+0x2a6>
  405d10:	42ab      	cmp	r3, r5
  405d12:	f240 8120 	bls.w	405f56 <__udivmoddi4+0x2a6>
  405d16:	f1a8 0802 	sub.w	r8, r8, #2
  405d1a:	443d      	add	r5, r7
  405d1c:	1aed      	subs	r5, r5, r3
  405d1e:	b2a4      	uxth	r4, r4
  405d20:	fbb5 f0fa 	udiv	r0, r5, sl
  405d24:	fb0a 5510 	mls	r5, sl, r0, r5
  405d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405d2c:	fb00 f909 	mul.w	r9, r0, r9
  405d30:	45a1      	cmp	r9, r4
  405d32:	d909      	bls.n	405d48 <__udivmoddi4+0x98>
  405d34:	19e4      	adds	r4, r4, r7
  405d36:	f100 33ff 	add.w	r3, r0, #4294967295
  405d3a:	f080 810a 	bcs.w	405f52 <__udivmoddi4+0x2a2>
  405d3e:	45a1      	cmp	r9, r4
  405d40:	f240 8107 	bls.w	405f52 <__udivmoddi4+0x2a2>
  405d44:	3802      	subs	r0, #2
  405d46:	443c      	add	r4, r7
  405d48:	eba4 0409 	sub.w	r4, r4, r9
  405d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405d50:	2100      	movs	r1, #0
  405d52:	2e00      	cmp	r6, #0
  405d54:	d061      	beq.n	405e1a <__udivmoddi4+0x16a>
  405d56:	fa24 f40e 	lsr.w	r4, r4, lr
  405d5a:	2300      	movs	r3, #0
  405d5c:	6034      	str	r4, [r6, #0]
  405d5e:	6073      	str	r3, [r6, #4]
  405d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d64:	428b      	cmp	r3, r1
  405d66:	d907      	bls.n	405d78 <__udivmoddi4+0xc8>
  405d68:	2e00      	cmp	r6, #0
  405d6a:	d054      	beq.n	405e16 <__udivmoddi4+0x166>
  405d6c:	2100      	movs	r1, #0
  405d6e:	e886 0021 	stmia.w	r6, {r0, r5}
  405d72:	4608      	mov	r0, r1
  405d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d78:	fab3 f183 	clz	r1, r3
  405d7c:	2900      	cmp	r1, #0
  405d7e:	f040 808e 	bne.w	405e9e <__udivmoddi4+0x1ee>
  405d82:	42ab      	cmp	r3, r5
  405d84:	d302      	bcc.n	405d8c <__udivmoddi4+0xdc>
  405d86:	4282      	cmp	r2, r0
  405d88:	f200 80fa 	bhi.w	405f80 <__udivmoddi4+0x2d0>
  405d8c:	1a84      	subs	r4, r0, r2
  405d8e:	eb65 0503 	sbc.w	r5, r5, r3
  405d92:	2001      	movs	r0, #1
  405d94:	46ac      	mov	ip, r5
  405d96:	2e00      	cmp	r6, #0
  405d98:	d03f      	beq.n	405e1a <__udivmoddi4+0x16a>
  405d9a:	e886 1010 	stmia.w	r6, {r4, ip}
  405d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405da2:	b912      	cbnz	r2, 405daa <__udivmoddi4+0xfa>
  405da4:	2701      	movs	r7, #1
  405da6:	fbb7 f7f2 	udiv	r7, r7, r2
  405daa:	fab7 fe87 	clz	lr, r7
  405dae:	f1be 0f00 	cmp.w	lr, #0
  405db2:	d134      	bne.n	405e1e <__udivmoddi4+0x16e>
  405db4:	1beb      	subs	r3, r5, r7
  405db6:	0c3a      	lsrs	r2, r7, #16
  405db8:	fa1f fc87 	uxth.w	ip, r7
  405dbc:	2101      	movs	r1, #1
  405dbe:	fbb3 f8f2 	udiv	r8, r3, r2
  405dc2:	0c25      	lsrs	r5, r4, #16
  405dc4:	fb02 3318 	mls	r3, r2, r8, r3
  405dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405dcc:	fb0c f308 	mul.w	r3, ip, r8
  405dd0:	42ab      	cmp	r3, r5
  405dd2:	d907      	bls.n	405de4 <__udivmoddi4+0x134>
  405dd4:	19ed      	adds	r5, r5, r7
  405dd6:	f108 30ff 	add.w	r0, r8, #4294967295
  405dda:	d202      	bcs.n	405de2 <__udivmoddi4+0x132>
  405ddc:	42ab      	cmp	r3, r5
  405dde:	f200 80d1 	bhi.w	405f84 <__udivmoddi4+0x2d4>
  405de2:	4680      	mov	r8, r0
  405de4:	1aed      	subs	r5, r5, r3
  405de6:	b2a3      	uxth	r3, r4
  405de8:	fbb5 f0f2 	udiv	r0, r5, r2
  405dec:	fb02 5510 	mls	r5, r2, r0, r5
  405df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405df4:	fb0c fc00 	mul.w	ip, ip, r0
  405df8:	45a4      	cmp	ip, r4
  405dfa:	d907      	bls.n	405e0c <__udivmoddi4+0x15c>
  405dfc:	19e4      	adds	r4, r4, r7
  405dfe:	f100 33ff 	add.w	r3, r0, #4294967295
  405e02:	d202      	bcs.n	405e0a <__udivmoddi4+0x15a>
  405e04:	45a4      	cmp	ip, r4
  405e06:	f200 80b8 	bhi.w	405f7a <__udivmoddi4+0x2ca>
  405e0a:	4618      	mov	r0, r3
  405e0c:	eba4 040c 	sub.w	r4, r4, ip
  405e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405e14:	e79d      	b.n	405d52 <__udivmoddi4+0xa2>
  405e16:	4631      	mov	r1, r6
  405e18:	4630      	mov	r0, r6
  405e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405e1e:	f1ce 0420 	rsb	r4, lr, #32
  405e22:	fa05 f30e 	lsl.w	r3, r5, lr
  405e26:	fa07 f70e 	lsl.w	r7, r7, lr
  405e2a:	fa20 f804 	lsr.w	r8, r0, r4
  405e2e:	0c3a      	lsrs	r2, r7, #16
  405e30:	fa25 f404 	lsr.w	r4, r5, r4
  405e34:	ea48 0803 	orr.w	r8, r8, r3
  405e38:	fbb4 f1f2 	udiv	r1, r4, r2
  405e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405e40:	fb02 4411 	mls	r4, r2, r1, r4
  405e44:	fa1f fc87 	uxth.w	ip, r7
  405e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  405e4c:	fb01 f30c 	mul.w	r3, r1, ip
  405e50:	42ab      	cmp	r3, r5
  405e52:	fa00 f40e 	lsl.w	r4, r0, lr
  405e56:	d909      	bls.n	405e6c <__udivmoddi4+0x1bc>
  405e58:	19ed      	adds	r5, r5, r7
  405e5a:	f101 30ff 	add.w	r0, r1, #4294967295
  405e5e:	f080 808a 	bcs.w	405f76 <__udivmoddi4+0x2c6>
  405e62:	42ab      	cmp	r3, r5
  405e64:	f240 8087 	bls.w	405f76 <__udivmoddi4+0x2c6>
  405e68:	3902      	subs	r1, #2
  405e6a:	443d      	add	r5, r7
  405e6c:	1aeb      	subs	r3, r5, r3
  405e6e:	fa1f f588 	uxth.w	r5, r8
  405e72:	fbb3 f0f2 	udiv	r0, r3, r2
  405e76:	fb02 3310 	mls	r3, r2, r0, r3
  405e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405e7e:	fb00 f30c 	mul.w	r3, r0, ip
  405e82:	42ab      	cmp	r3, r5
  405e84:	d907      	bls.n	405e96 <__udivmoddi4+0x1e6>
  405e86:	19ed      	adds	r5, r5, r7
  405e88:	f100 38ff 	add.w	r8, r0, #4294967295
  405e8c:	d26f      	bcs.n	405f6e <__udivmoddi4+0x2be>
  405e8e:	42ab      	cmp	r3, r5
  405e90:	d96d      	bls.n	405f6e <__udivmoddi4+0x2be>
  405e92:	3802      	subs	r0, #2
  405e94:	443d      	add	r5, r7
  405e96:	1aeb      	subs	r3, r5, r3
  405e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  405e9c:	e78f      	b.n	405dbe <__udivmoddi4+0x10e>
  405e9e:	f1c1 0720 	rsb	r7, r1, #32
  405ea2:	fa22 f807 	lsr.w	r8, r2, r7
  405ea6:	408b      	lsls	r3, r1
  405ea8:	fa05 f401 	lsl.w	r4, r5, r1
  405eac:	ea48 0303 	orr.w	r3, r8, r3
  405eb0:	fa20 fe07 	lsr.w	lr, r0, r7
  405eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  405eb8:	40fd      	lsrs	r5, r7
  405eba:	ea4e 0e04 	orr.w	lr, lr, r4
  405ebe:	fbb5 f9fc 	udiv	r9, r5, ip
  405ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  405ec6:	fb0c 5519 	mls	r5, ip, r9, r5
  405eca:	fa1f f883 	uxth.w	r8, r3
  405ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  405ed2:	fb09 f408 	mul.w	r4, r9, r8
  405ed6:	42ac      	cmp	r4, r5
  405ed8:	fa02 f201 	lsl.w	r2, r2, r1
  405edc:	fa00 fa01 	lsl.w	sl, r0, r1
  405ee0:	d908      	bls.n	405ef4 <__udivmoddi4+0x244>
  405ee2:	18ed      	adds	r5, r5, r3
  405ee4:	f109 30ff 	add.w	r0, r9, #4294967295
  405ee8:	d243      	bcs.n	405f72 <__udivmoddi4+0x2c2>
  405eea:	42ac      	cmp	r4, r5
  405eec:	d941      	bls.n	405f72 <__udivmoddi4+0x2c2>
  405eee:	f1a9 0902 	sub.w	r9, r9, #2
  405ef2:	441d      	add	r5, r3
  405ef4:	1b2d      	subs	r5, r5, r4
  405ef6:	fa1f fe8e 	uxth.w	lr, lr
  405efa:	fbb5 f0fc 	udiv	r0, r5, ip
  405efe:	fb0c 5510 	mls	r5, ip, r0, r5
  405f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  405f06:	fb00 f808 	mul.w	r8, r0, r8
  405f0a:	45a0      	cmp	r8, r4
  405f0c:	d907      	bls.n	405f1e <__udivmoddi4+0x26e>
  405f0e:	18e4      	adds	r4, r4, r3
  405f10:	f100 35ff 	add.w	r5, r0, #4294967295
  405f14:	d229      	bcs.n	405f6a <__udivmoddi4+0x2ba>
  405f16:	45a0      	cmp	r8, r4
  405f18:	d927      	bls.n	405f6a <__udivmoddi4+0x2ba>
  405f1a:	3802      	subs	r0, #2
  405f1c:	441c      	add	r4, r3
  405f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405f22:	eba4 0408 	sub.w	r4, r4, r8
  405f26:	fba0 8902 	umull	r8, r9, r0, r2
  405f2a:	454c      	cmp	r4, r9
  405f2c:	46c6      	mov	lr, r8
  405f2e:	464d      	mov	r5, r9
  405f30:	d315      	bcc.n	405f5e <__udivmoddi4+0x2ae>
  405f32:	d012      	beq.n	405f5a <__udivmoddi4+0x2aa>
  405f34:	b156      	cbz	r6, 405f4c <__udivmoddi4+0x29c>
  405f36:	ebba 030e 	subs.w	r3, sl, lr
  405f3a:	eb64 0405 	sbc.w	r4, r4, r5
  405f3e:	fa04 f707 	lsl.w	r7, r4, r7
  405f42:	40cb      	lsrs	r3, r1
  405f44:	431f      	orrs	r7, r3
  405f46:	40cc      	lsrs	r4, r1
  405f48:	6037      	str	r7, [r6, #0]
  405f4a:	6074      	str	r4, [r6, #4]
  405f4c:	2100      	movs	r1, #0
  405f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405f52:	4618      	mov	r0, r3
  405f54:	e6f8      	b.n	405d48 <__udivmoddi4+0x98>
  405f56:	4690      	mov	r8, r2
  405f58:	e6e0      	b.n	405d1c <__udivmoddi4+0x6c>
  405f5a:	45c2      	cmp	sl, r8
  405f5c:	d2ea      	bcs.n	405f34 <__udivmoddi4+0x284>
  405f5e:	ebb8 0e02 	subs.w	lr, r8, r2
  405f62:	eb69 0503 	sbc.w	r5, r9, r3
  405f66:	3801      	subs	r0, #1
  405f68:	e7e4      	b.n	405f34 <__udivmoddi4+0x284>
  405f6a:	4628      	mov	r0, r5
  405f6c:	e7d7      	b.n	405f1e <__udivmoddi4+0x26e>
  405f6e:	4640      	mov	r0, r8
  405f70:	e791      	b.n	405e96 <__udivmoddi4+0x1e6>
  405f72:	4681      	mov	r9, r0
  405f74:	e7be      	b.n	405ef4 <__udivmoddi4+0x244>
  405f76:	4601      	mov	r1, r0
  405f78:	e778      	b.n	405e6c <__udivmoddi4+0x1bc>
  405f7a:	3802      	subs	r0, #2
  405f7c:	443c      	add	r4, r7
  405f7e:	e745      	b.n	405e0c <__udivmoddi4+0x15c>
  405f80:	4608      	mov	r0, r1
  405f82:	e708      	b.n	405d96 <__udivmoddi4+0xe6>
  405f84:	f1a8 0802 	sub.w	r8, r8, #2
  405f88:	443d      	add	r5, r7
  405f8a:	e72b      	b.n	405de4 <__udivmoddi4+0x134>

00405f8c <__aeabi_idiv0>:
  405f8c:	4770      	bx	lr
  405f8e:	bf00      	nop
  405f90:	62616341 	.word	0x62616341
  405f94:	2120756f 	.word	0x2120756f
  405f98:	78252021 	.word	0x78252021
  405f9c:	00000a20 	.word	0x00000a20

00405fa0 <init_vector>:
  405fa0:	03020100 07060504 0b0a0908 0f0e0d0c     ................

00405fb0 <init_vector_ctr>:
  405fb0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00405fc0 <key128>:
  405fc0:	16157e2b a6d2ae28 8815f7ab 3c4fcf09     +~..(.........O<
  405fd0:	41202d2d 45205345 706d6178 2d20656c     -- AES Example -
  405fe0:	000a0d2d 454d4153 582d3037 00444c50     -...SAME70-XPLD.
  405ff0:	25202d2d 000d0a73 303a3132 36313a30     -- %s...21:00:16
  406000:	00000000 20706553 32203231 00383130     ....Sep 12 2018.
  406010:	43202d2d 69706d6f 3a64656c 20732520     -- Compiled: %s 
  406020:	2d207325 000d0a2d 756e654d 0d0a3a20     %s --...Menu :..
  406030:	2d2d2020 6c655320 20746365 7265706f       -- Select oper
  406040:	6f697461 0d0a3a6e 3a682020 73694420     ation:..  h: Dis
  406050:	79616c70 6e656d20 0d0a2075 3a312020     play menu ..  1:
  406060:	42434520 646f6d20 65742065 202e7473      ECB mode test. 
  406070:	20200d0a 43203a32 6d204342 2065646f     ..  2: CBC mode 
  406080:	74736574 0d0a202e 3a332020 42464320     test. ..  3: CFB
  406090:	20383231 65646f6d 73657420 0a202e74     128 mode test. .
  4060a0:	3420200d 464f203a 6f6d2042 74206564     .  4: OFB mode t
  4060b0:	2e747365 200d0a20 203a3520 20525443     est. ..  5: CTR 
  4060c0:	65646f6d 73657420 0a202e74 6420200d     mode test. ..  d
  4060d0:	4345203a 6f6d2042 74206564 20747365     : ECB mode test 
  4060e0:	68746977 414d4420 200d0a20 203a7020     with DMA ..  p: 
  4060f0:	20424345 65646f6d 73657420 69772074     ECB mode test wi
  406100:	50206874 0a204344 0a0d0a0d 0000000d     th PDC .........
  406110:	00006325 20424345 65646f6d 636e6520     %c..ECB mode enc
  406120:	74707972 206e6f69 20646e61 72636564     ryption and decr
  406130:	69747079 74206e6f 2e747365 00000a0d     yption test.....
  406140:	2d2d0a0d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ..--------------
  406150:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  406160:	2d2d2d2d 000a0d2d 3231202d 74696238     -----...- 128bit
  406170:	79726320 676f7470 68706172 6b206369      cryptographic k
  406180:	0a0d7965 00000000 4345202d 69632042     ey......- ECB ci
  406190:	72656870 646f6d20 000a0d65 7541202d     pher mode...- Au
  4061a0:	73206f74 74726174 646f6d20 000a0d65     to start mode...
  4061b0:	6e69202d 20747570 3420666f 62323320     - input of 4 32b
  4061c0:	77207469 7364726f 00000a0d 2d2d2d2d     it words....----
  4061d0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  4061e0:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0d2d2d2d     ---------------.
  4061f0:	0000000a 63696e69 696c6169 646e617a     ....inicializand
  406200:	4d44206f 000a2041 20414d44 0000000a     o DMA ..DMA ....
  406210:	20434243 65646f6d 636e6520 74707972     CBC mode encrypt
  406220:	206e6f69 20646e61 72636564 69747079     ion and decrypti
  406230:	74206e6f 2e747365 00000a0d 4243202d     on test.....- CB
  406240:	69632043 72656870 646f6d20 000a0d65     C cipher mode...
  406250:	4f4b0a0d 0d212121 0000000a 4b4f0a0d     ..KO!!!.......OK
  406260:	0d212121 0000000a 4243202d 65642043     !!!.....- CBC de
  406270:	68706963 6d207265 0d65646f 0000000a     cipher mode.....
  406280:	31424643 6d203832 2065646f 72636e65     CFB128 mode encr
  406290:	69747079 61206e6f 6420646e 79726365     yption and decry
  4062a0:	6f697470 6574206e 0d2e7473 0000000a     ption test......
  4062b0:	4643202d 38323142 70696320 20726568     - CFB128 cipher 
  4062c0:	65646f6d 00000a0d 4643202d 38323142     mode....- CFB128
  4062d0:	63656420 65687069 6f6d2072 0a0d6564      decipher mode..
  4062e0:	00000000 2042464f 65646f6d 636e6520     ....OFB mode enc
  4062f0:	74707972 206e6f69 20646e61 72636564     ryption and decr
  406300:	69747079 74206e6f 2e747365 00000a0d     yption test.....
  406310:	464f202d 69632042 72656870 646f6d20     - OFB cipher mod
  406320:	000a0d65 464f202d 65642042 68706963     e...- OFB deciph
  406330:	6d207265 0d65646f 0000000a 20525443     er mode.....CTR 
  406340:	65646f6d 636e6520 74707972 206e6f69     mode encryption 
  406350:	20646e61 72636564 69747079 74206e6f     and decryption t
  406360:	2e747365 00000a0d 5443202d 69632052     est.....- CTR ci
  406370:	72656870 646f6d20 000a0d65 5443202d     pher mode...- CT
  406380:	65642052 68706963 6d207265 0d65646f     R decipher mode.
  406390:	0000000a 0a616d64 00000000 73696854     ....dma.....This
  4063a0:	646f6d20 73692065 746f6e20 70757320      mode is not sup
  4063b0:	74726f70 62206465 65642079 65636976     ported by device
  4063c0:	000a0d2e                                ....

004063c4 <_global_impure_ptr>:
  4063c4:	20400060 33323130 37363534 42413938     `.@ 0123456789AB
  4063d4:	46454443 00000000 33323130 37363534     CDEF....01234567
  4063e4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4063f4:	0000296c                                l)..

004063f8 <blanks.7217>:
  4063f8:	20202020 20202020 20202020 20202020                     

00406408 <zeroes.7218>:
  406408:	30303030 30303030 30303030 30303030     0000000000000000

00406418 <basefix.6805>:
  406418:	0001000a 00030002 00050004 00070006     ................
  406428:	00090008 000b000a 000d000c 000f000e     ................
  406438:	00000010 00000043 49534f50 00000058     ....C...POSIX...
  406448:	0000002e                                ....

0040644c <_ctype_>:
  40644c:	20202000 20202020 28282020 20282828     .         ((((( 
  40645c:	20202020 20202020 20202020 20202020                     
  40646c:	10108820 10101010 10101010 10101010      ...............
  40647c:	04040410 04040404 10040404 10101010     ................
  40648c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40649c:	01010101 01010101 01010101 10101010     ................
  4064ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4064bc:	02020202 02020202 02020202 10101010     ................
  4064cc:	00000020 00000000 00000000 00000000      ...............
	...

00406550 <_init>:
  406550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406552:	bf00      	nop
  406554:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406556:	bc08      	pop	{r3}
  406558:	469e      	mov	lr, r3
  40655a:	4770      	bx	lr

0040655c <__init_array_start>:
  40655c:	004034a9 	.word	0x004034a9

00406560 <__frame_dummy_init_array_entry>:
  406560:	00400165                                e.@.

00406564 <_fini>:
  406564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406566:	bf00      	nop
  406568:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40656a:	bc08      	pop	{r3}
  40656c:	469e      	mov	lr, r3
  40656e:	4770      	bx	lr

00406570 <__fini_array_start>:
  406570:	00400141 	.word	0x00400141
